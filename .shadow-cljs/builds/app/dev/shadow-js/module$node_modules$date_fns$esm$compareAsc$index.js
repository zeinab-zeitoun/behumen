["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/date-fns/esm/compareAsc/index.js"],"~:js","shadow$provide.module$node_modules$date_fns$esm$compareAsc$index=function(global,require,module,exports){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj}}Object.defineProperty(exports,\"__esModule\",{value:!0});exports[\"default\"]=function(dirtyDateLeft,dirtyDateRight){(0,_index2[\"default\"])(2,arguments);var dateLeft=(0,_index[\"default\"])(dirtyDateLeft),dateRight=(0,_index[\"default\"])(dirtyDateRight);dateLeft=dateLeft.getTime()-dateRight.getTime();return 0>dateLeft?\n-1:0<dateLeft?1:dateLeft};var _index=_interopRequireDefault(require(\"module$node_modules$date_fns$esm$toDate$index\")),_index2=_interopRequireDefault(require(\"module$node_modules$date_fns$esm$_lib$requiredArgs$index\"))}","~:source","shadow$provide[\"module$node_modules$date_fns$esm$compareAsc$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = compareAsc;\n\nvar _index = _interopRequireDefault(require(\"../toDate/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * @name compareAsc\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Number} the result of the comparison\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * const result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\nfunction compareAsc(dirtyDateLeft, dirtyDateRight) {\n  (0, _index2[\"default\"])(2, arguments);\n  var dateLeft = (0, _index[\"default\"])(dirtyDateLeft);\n  var dateRight = (0, _index[\"default\"])(dirtyDateRight);\n  var diff = dateLeft.getTime() - dateRight.getTime();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$date_fns$esm$_lib$requiredArgs$index","~$shadow.js","~$module$node_modules$date_fns$esm$toDate$index"]],"~:properties",["^5",["__esModule","value"]],"~:compiled-at",1622535540958,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$date_fns$esm$compareAsc$index.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,kDAAA,CAAsE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAY9GC,QAASA,uBAAsB,CAACC,GAAD,CAAM,CAAE,MAAOA,IAAA,EAAOA,GAAAC,WAAP,CAAwBD,GAAxB,CAA8B,CAAE,UAAWA,GAAb,CAAvC,CATrCE,MAAAC,eAAA,CAAsBL,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CM,MAAO,CAAA,CADoC,CAA7C,CAGAN,QAAA,CAAQ,SAAR,CAAA,CA4CAO,QAAmB,CAACC,aAAD,CAAgBC,cAAhB,CAAgC,CACjD,CAAC,CAAA,CAAGC,OAAA,CAAQ,SAAR,CAAJ,EAAwB,CAAxB,CAA2BC,SAA3B,CACA,KAAIC,SAAW,CAAC,CAAA,CAAGC,MAAA,CAAO,SAAP,CAAJ,EAAuBL,aAAvB,CAAf,CACIM,UAAY,CAAC,CAAA,CAAGD,MAAA,CAAO,SAAP,CAAJ,EAAuBJ,cAAvB,CACZM,SAAAA,CAAOH,QAAAI,QAAA,EAAPD,CAA4BD,SAAAE,QAAA,EAEhC,OAAW,EAAX,CAAID,QAAJ;AACS,EADT,CAEkB,CAAX,CAAIA,QAAJ,CACE,CADF,CAGEA,QAXwC,CA1CnD,KAAIF,OAASZ,sBAAA,CAAuBH,OAAA,CAAQ,+CAAR,CAAvB,CAAb,CAEIY,QAAUT,sBAAA,CAAuBH,OAAA,CAAQ,0DAAR,CAAvB,CAVgG;\",\n\"sources\":[\"node_modules/date-fns/esm/compareAsc/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$date_fns$esm$compareAsc$index\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports[\\\"default\\\"] = compareAsc;\\n\\nvar _index = _interopRequireDefault(require(\\\"../toDate/index.js\\\"));\\n\\nvar _index2 = _interopRequireDefault(require(\\\"../_lib/requiredArgs/index.js\\\"));\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \\\"default\\\": obj }; }\\n\\n/**\\n * @name compareAsc\\n * @category Common Helpers\\n * @summary Compare the two dates and return -1, 0 or 1.\\n *\\n * @description\\n * Compare the two dates and return 1 if the first date is after the second,\\n * -1 if the first date is before the second or 0 if dates are equal.\\n *\\n * ### v2.0.0 breaking changes:\\n *\\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\\n *\\n * @param {Date|Number} dateLeft - the first date to compare\\n * @param {Date|Number} dateRight - the second date to compare\\n * @returns {Number} the result of the comparison\\n * @throws {TypeError} 2 arguments required\\n *\\n * @example\\n * // Compare 11 February 1987 and 10 July 1989:\\n * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\\n * //=> -1\\n *\\n * @example\\n * // Sort the array of dates:\\n * const result = [\\n *   new Date(1995, 6, 2),\\n *   new Date(1987, 1, 11),\\n *   new Date(1989, 6, 10)\\n * ].sort(compareAsc)\\n * //=> [\\n * //   Wed Feb 11 1987 00:00:00,\\n * //   Mon Jul 10 1989 00:00:00,\\n * //   Sun Jul 02 1995 00:00:00\\n * // ]\\n */\\nfunction compareAsc(dirtyDateLeft, dirtyDateRight) {\\n  (0, _index2[\\\"default\\\"])(2, arguments);\\n  var dateLeft = (0, _index[\\\"default\\\"])(dirtyDateLeft);\\n  var dateRight = (0, _index[\\\"default\\\"])(dirtyDateRight);\\n  var diff = dateLeft.getTime() - dateRight.getTime();\\n\\n  if (diff < 0) {\\n    return -1;\\n  } else if (diff > 0) {\\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\\n  } else {\\n    return diff;\\n  }\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"_interopRequireDefault\",\"obj\",\"__esModule\",\"Object\",\"defineProperty\",\"value\",\"compareAsc\",\"dirtyDateLeft\",\"dirtyDateRight\",\"_index2\",\"arguments\",\"dateLeft\",\"_index\",\"dateRight\",\"diff\",\"getTime\"]\n}\n"]