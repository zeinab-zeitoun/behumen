["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/date-fns/esm/_lib/getUTCWeek/index.js"],"~:js","shadow$provide.module$node_modules$date_fns$esm$_lib$getUTCWeek$index=function(global,require,module,exports){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj}}Object.defineProperty(exports,\"__esModule\",{value:!0});exports[\"default\"]=function(dirtyDate,options){(0,_index4[\"default\"])(1,arguments);var date=(0,_index[\"default\"])(dirtyDate);date=(0,_index2[\"default\"])(date,options).getTime()-(0,_index3[\"default\"])(date,options).getTime();return Math.round(date/MILLISECONDS_IN_WEEK)+\n1};var _index=_interopRequireDefault(require(\"module$node_modules$date_fns$esm$toDate$index\")),_index2=_interopRequireDefault(require(\"module$node_modules$date_fns$esm$_lib$startOfUTCWeek$index\")),_index3=_interopRequireDefault(require(\"module$node_modules$date_fns$esm$_lib$startOfUTCWeekYear$index\")),_index4=_interopRequireDefault(require(\"module$node_modules$date_fns$esm$_lib$requiredArgs$index\")),MILLISECONDS_IN_WEEK=6048E5}","~:source","shadow$provide[\"module$node_modules$date_fns$esm$_lib$getUTCWeek$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = getUTCWeek;\n\nvar _index = _interopRequireDefault(require(\"../../toDate/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../startOfUTCWeek/index.js\"));\n\nvar _index3 = _interopRequireDefault(require(\"../startOfUTCWeekYear/index.js\"));\n\nvar _index4 = _interopRequireDefault(require(\"../requiredArgs/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nfunction getUTCWeek(dirtyDate, options) {\n  (0, _index4[\"default\"])(1, arguments);\n  var date = (0, _index[\"default\"])(dirtyDate);\n  var diff = (0, _index2[\"default\"])(date, options).getTime() - (0, _index3[\"default\"])(date, options).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$date_fns$esm$_lib$requiredArgs$index","~$module$node_modules$date_fns$esm$_lib$startOfUTCWeekYear$index","~$shadow.js","~$module$node_modules$date_fns$esm$_lib$startOfUTCWeek$index","~$module$node_modules$date_fns$esm$toDate$index"]],"~:properties",["^5",["__esModule","value"]],"~:compiled-at",1622535540980,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$date_fns$esm$_lib$getUTCWeek$index.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,uDAAA,CAA2E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAgBnHC,QAASA,uBAAsB,CAACC,GAAD,CAAM,CAAE,MAAOA,IAAA,EAAOA,GAAAC,WAAP,CAAwBD,GAAxB,CAA8B,CAAE,UAAWA,GAAb,CAAvC,CAbrCE,MAAAC,eAAA,CAAsBL,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CM,MAAO,CAAA,CADoC,CAA7C,CAGAN,QAAA,CAAQ,SAAR,CAAA,CAeAO,QAAmB,CAACC,SAAD,CAAYC,OAAZ,CAAqB,CACtC,CAAC,CAAA,CAAGC,OAAA,CAAQ,SAAR,CAAJ,EAAwB,CAAxB,CAA2BC,SAA3B,CACA,KAAIC,KAAO,CAAC,CAAA,CAAGC,MAAA,CAAO,SAAP,CAAJ,EAAuBL,SAAvB,CACPM,KAAAA,CAAO,CAAC,CAAA,CAAGC,OAAA,CAAQ,SAAR,CAAJ,EAAwBH,IAAxB,CAA8BH,OAA9B,CAAAO,QAAA,EAAPF,CAA0D,CAAC,CAAA,CAAGG,OAAA,CAAQ,SAAR,CAAJ,EAAwBL,IAAxB,CAA8BH,OAA9B,CAAAO,QAAA,EAI9D,OAAOE,KAAAC,MAAA,CAAWL,IAAX,CAAkBM,oBAAlB,CAAP;AAAiD,CAPX,CAbxC,KAAIP,OAASZ,sBAAA,CAAuBH,OAAA,CAAQ,+CAAR,CAAvB,CAAb,CAEIiB,QAAUd,sBAAA,CAAuBH,OAAA,CAAQ,4DAAR,CAAvB,CAFd,CAIImB,QAAUhB,sBAAA,CAAuBH,OAAA,CAAQ,gEAAR,CAAvB,CAJd,CAMIY,QAAUT,sBAAA,CAAuBH,OAAA,CAAQ,0DAAR,CAAvB,CANd,CAUIsB,qBAAuB,MAlBwF;\",\n\"sources\":[\"node_modules/date-fns/esm/_lib/getUTCWeek/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$date_fns$esm$_lib$getUTCWeek$index\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports[\\\"default\\\"] = getUTCWeek;\\n\\nvar _index = _interopRequireDefault(require(\\\"../../toDate/index.js\\\"));\\n\\nvar _index2 = _interopRequireDefault(require(\\\"../startOfUTCWeek/index.js\\\"));\\n\\nvar _index3 = _interopRequireDefault(require(\\\"../startOfUTCWeekYear/index.js\\\"));\\n\\nvar _index4 = _interopRequireDefault(require(\\\"../requiredArgs/index.js\\\"));\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \\\"default\\\": obj }; }\\n\\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\\n// See issue: https://github.com/date-fns/date-fns/issues/376\\n\\nfunction getUTCWeek(dirtyDate, options) {\\n  (0, _index4[\\\"default\\\"])(1, arguments);\\n  var date = (0, _index[\\\"default\\\"])(dirtyDate);\\n  var diff = (0, _index2[\\\"default\\\"])(date, options).getTime() - (0, _index3[\\\"default\\\"])(date, options).getTime(); // Round the number of days to the nearest integer\\n  // because the number of milliseconds in a week is not constant\\n  // (e.g. it's different in the week of the daylight saving time clock shift)\\n\\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"_interopRequireDefault\",\"obj\",\"__esModule\",\"Object\",\"defineProperty\",\"value\",\"getUTCWeek\",\"dirtyDate\",\"options\",\"_index4\",\"arguments\",\"date\",\"_index\",\"diff\",\"_index2\",\"getTime\",\"_index3\",\"Math\",\"round\",\"MILLISECONDS_IN_WEEK\"]\n}\n"]