["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/rtl-css-js/dist/cjs/convert-7d2e62d9.js"],"~:js","shadow$provide.module$node_modules$rtl_css_js$dist$cjs$convert_7d2e62d9=function(global,require,module,exports){function arrayToObject(array){return array.reduce(function(obj,_ref){var prop1=_ref[0];_ref=_ref[1];obj[prop1]=_ref;obj[_ref]=prop1;return obj},{})}function isBoolean(val){return\"boolean\"===typeof val}function isFunction(val){return\"function\"===typeof val}function isNumber(val){return\"number\"===typeof val}function isNullOrUndefined(val){return null===val||\"undefined\"===typeof val}function isObject(val){return val&&\n\"object\"===typeof val}function isString(val){return\"string\"===typeof val}function includes(inclusive,inclusee){return-1!==inclusive.indexOf(inclusee)}function flipSign(value){return 0===parseFloat(value)?value:\"-\"===value[0]?value.slice(1):\"-\"+value}function flipTransformSign(match,prefix,offset,suffix){return prefix+flipSign(offset)+suffix}function calculateNewBackgroundPosition(value){var idx=value.indexOf(\".\");-1===idx?value=100-parseFloat(value)+\"%\":(idx=value.length-idx-2,value=100-parseFloat(value),\nvalue=value.toFixed(idx)+\"%\");return value}function getValuesAsList(value){return value.replace(/ +/g,\" \").split(\" \").map(function(i){return i.trim()}).filter(Boolean).reduce(function(_ref2,item){var list=_ref2.list;_ref2=_ref2.state;var openParansCount=(item.match(/\\(/g)||[]).length,closedParansCount=(item.match(/\\)/g)||[]).length;0<_ref2.parensDepth?list[list.length-1]=list[list.length-1]+\" \"+item:list.push(item);_ref2.parensDepth+=openParansCount-closedParansCount;return{list,state:_ref2}},{list:[],\nstate:{parensDepth:0}}).list}function handleQuartetValues(value){var splitValues=getValuesAsList(value);return 3>=splitValues.length||4<splitValues.length?value:[splitValues[0],splitValues[3],splitValues[2],splitValues[1]].join(\" \")}function convert(object){return Object.keys(object).reduce(function(newObj,originalKey){var originalValue=object[originalKey];isString(originalValue)&&(originalValue=originalValue.trim());if(includes(propsToIgnore,originalKey))return newObj[originalKey]=originalValue,\nnewObj;originalKey=convertProperty(originalKey,originalValue);newObj[originalKey.key]=originalKey.value;return newObj},Array.isArray(object)?[]:{})}function convertProperty(originalKey,originalValue){var isNoFlip=/\\/\\*\\s?@noflip\\s?\\*\\//.test(originalValue);originalKey=isNoFlip?originalKey:getPropertyDoppelganger(originalKey);originalValue=isNoFlip?originalValue:getValueDoppelganger(originalKey,originalValue);return{key:originalKey,value:originalValue}}function getPropertyDoppelganger(property){return propertiesToConvert[property]||\nproperty}function getValueDoppelganger(key,originalValue){if(isNullOrUndefined(originalValue)||isBoolean(originalValue))return originalValue;if(isObject(originalValue))return convert(originalValue);var isNum=isNumber(originalValue),isFunc=isFunction(originalValue);isFunc=isNum||isFunc?originalValue:originalValue.replace(/ !important.*?$/,\"\");originalValue=!isNum&&isFunc.length!==originalValue.length;key=(key=propertyValueConverters[key])?key({value:isFunc,valuesToConvert,propertiesToConvert,isRtl:!0,\nbgImgDirectionRegex,bgPosDirectionRegex}):valuesToConvert[isFunc]||isFunc;return originalValue?key+\" !important\":key}var propertyValueConverters={padding:function(_ref){_ref=_ref.value;return isNumber(_ref)?_ref:handleQuartetValues(_ref)},textShadow:function(_ref2){return _ref2.value.replace(/(-*)([.|\\d]+)/,function(match,negative,number){return\"0\"===number?match:(\"\"===negative?\"-\":\"\")+number})},borderColor:function(_ref3){return handleQuartetValues(_ref3.value)},borderRadius:function(_ref4){_ref4=\n_ref4.value;if(isNumber(_ref4))return _ref4;if(includes(_ref4,\"/\")){var _value$split=_ref4.split(\"/\");_ref4=_value$split[1];_value$split=propertyValueConverters.borderRadius({value:_value$split[0].trim()});_ref4=propertyValueConverters.borderRadius({value:_ref4.trim()});return _value$split+\" / \"+_ref4}_value$split=getValuesAsList(_ref4);switch(_value$split.length){case 2:return _value$split.reverse().join(\" \");case 4:return[_value$split[1],_value$split[0],_value$split[3],_value$split[2]].join(\" \");\ndefault:return _ref4}},background:function(_ref5){var value=_ref5.value,valuesToConvert=_ref5.valuesToConvert,isRtl=_ref5.isRtl,bgImgDirectionRegex=_ref5.bgImgDirectionRegex;_ref5=_ref5.bgPosDirectionRegex;var backgroundPositionValue=value.replace(/(url\\(.*?\\))|(rgba?\\(.*?\\))|(hsl\\(.*?\\))|(#[a-fA-F0-9]+)|((^| )(\\D)+( |$))/g,\"\").trim();value=value.replace(backgroundPositionValue,propertyValueConverters.backgroundPosition({value:backgroundPositionValue,valuesToConvert,isRtl,bgPosDirectionRegex:_ref5}));\nreturn propertyValueConverters.backgroundImage({value,valuesToConvert,bgImgDirectionRegex})},backgroundImage:function(_ref6){var value=_ref6.value,valuesToConvert=_ref6.valuesToConvert;_ref6=_ref6.bgImgDirectionRegex;return includes(value,\"url(\")||includes(value,\"linear-gradient(\")?value.replace(_ref6,function(match,g1,group2){return match.replace(group2,valuesToConvert[group2])}):value},backgroundPosition:function(_ref7){var valuesToConvert=_ref7.valuesToConvert,bgPosDirectionRegex=_ref7.bgPosDirectionRegex;\nreturn _ref7.value.replace(_ref7.isRtl?/^((-|\\d|\\.)+%)/:null,function(match,group){return calculateNewBackgroundPosition(group)}).replace(bgPosDirectionRegex,function(match){return valuesToConvert[match]})},backgroundPositionX:function(_ref8){var value=_ref8.value,valuesToConvert=_ref8.valuesToConvert,isRtl=_ref8.isRtl;_ref8=_ref8.bgPosDirectionRegex;return isNumber(value)?value:propertyValueConverters.backgroundPosition({value,valuesToConvert,isRtl,bgPosDirectionRegex:_ref8})},transition:function(_ref9){var propertiesToConvert=\n_ref9.propertiesToConvert;return _ref9.value.split(/,\\s*/g).map(function(transition){transition=transition.split(\" \");transition[0]=propertiesToConvert[transition[0]]||transition[0];return transition.join(\" \")}).join(\", \")},transitionProperty:function(_ref10){var propertiesToConvert=_ref10.propertiesToConvert;return _ref10.value.split(/,\\s*/g).map(function(prop){return propertiesToConvert[prop]||prop}).join(\", \")},transform:function(_ref11){return _ref11.value.replace(/(translateX\\s*\\(\\s*)((?:-?(?:[0-9]*\\.[0-9]+|[0-9]+)(?:\\s*(?:em|ex|px|cm|mm|in|pt|pc|deg|rad|grad|ms|s|hz|khz|%)|-?(?:[_a-z]|[^\\u0020-\\u007e]|(?:(?:(?:\\[0-9a-f]{1,6})(?:\\r\\n|\\s)?)|\\\\[^\\r\\n\\f0-9a-f]))(?:[_a-z0-9-]|[^\\u0020-\\u007e]|(?:(?:(?:\\[0-9a-f]{1,6})(?:\\r\\n|\\s)?)|\\\\[^\\r\\n\\f0-9a-f]))*)?)|(?:inherit|auto))(\\s*\\))/gi,\nflipTransformSign).replace(/(translate\\s*\\(\\s*)((?:-?(?:[0-9]*\\.[0-9]+|[0-9]+)(?:\\s*(?:em|ex|px|cm|mm|in|pt|pc|deg|rad|grad|ms|s|hz|khz|%)|-?(?:[_a-z]|[^\\u0020-\\u007e]|(?:(?:(?:\\[0-9a-f]{1,6})(?:\\r\\n|\\s)?)|\\\\[^\\r\\n\\f0-9a-f]))(?:[_a-z0-9-]|[^\\u0020-\\u007e]|(?:(?:(?:\\[0-9a-f]{1,6})(?:\\r\\n|\\s)?)|\\\\[^\\r\\n\\f0-9a-f]))*)?)|(?:inherit|auto))((?:\\s*,\\s*((?:-?(?:[0-9]*\\.[0-9]+|[0-9]+)(?:\\s*(?:em|ex|px|cm|mm|in|pt|pc|deg|rad|grad|ms|s|hz|khz|%)|-?(?:[_a-z]|[^\\u0020-\\u007e]|(?:(?:(?:\\[0-9a-f]{1,6})(?:\\r\\n|\\s)?)|\\\\[^\\r\\n\\f0-9a-f]))(?:[_a-z0-9-]|[^\\u0020-\\u007e]|(?:(?:(?:\\[0-9a-f]{1,6})(?:\\r\\n|\\s)?)|\\\\[^\\r\\n\\f0-9a-f]))*)?)|(?:inherit|auto))){0,1}\\s*\\))/gi,\nflipTransformSign).replace(/(translate3d\\s*\\(\\s*)((?:-?(?:[0-9]*\\.[0-9]+|[0-9]+)(?:\\s*(?:em|ex|px|cm|mm|in|pt|pc|deg|rad|grad|ms|s|hz|khz|%)|-?(?:[_a-z]|[^\\u0020-\\u007e]|(?:(?:(?:\\[0-9a-f]{1,6})(?:\\r\\n|\\s)?)|\\\\[^\\r\\n\\f0-9a-f]))(?:[_a-z0-9-]|[^\\u0020-\\u007e]|(?:(?:(?:\\[0-9a-f]{1,6})(?:\\r\\n|\\s)?)|\\\\[^\\r\\n\\f0-9a-f]))*)?)|(?:inherit|auto))((?:\\s*,\\s*((?:-?(?:[0-9]*\\.[0-9]+|[0-9]+)(?:\\s*(?:em|ex|px|cm|mm|in|pt|pc|deg|rad|grad|ms|s|hz|khz|%)|-?(?:[_a-z]|[^\\u0020-\\u007e]|(?:(?:(?:\\[0-9a-f]{1,6})(?:\\r\\n|\\s)?)|\\\\[^\\r\\n\\f0-9a-f]))(?:[_a-z0-9-]|[^\\u0020-\\u007e]|(?:(?:(?:\\[0-9a-f]{1,6})(?:\\r\\n|\\s)?)|\\\\[^\\r\\n\\f0-9a-f]))*)?)|(?:inherit|auto))){0,2}\\s*\\))/gi,\nflipTransformSign).replace(/(rotate[ZY]?\\s*\\(\\s*)((?:-?(?:[0-9]*\\.[0-9]+|[0-9]+)(?:\\s*(?:em|ex|px|cm|mm|in|pt|pc|deg|rad|grad|ms|s|hz|khz|%)|-?(?:[_a-z]|[^\\u0020-\\u007e]|(?:(?:(?:\\[0-9a-f]{1,6})(?:\\r\\n|\\s)?)|\\\\[^\\r\\n\\f0-9a-f]))(?:[_a-z0-9-]|[^\\u0020-\\u007e]|(?:(?:(?:\\[0-9a-f]{1,6})(?:\\r\\n|\\s)?)|\\\\[^\\r\\n\\f0-9a-f]))*)?)|(?:inherit|auto))(\\s*\\))/gi,flipTransformSign)}};propertyValueConverters.objectPosition=propertyValueConverters.backgroundPosition;propertyValueConverters.margin=propertyValueConverters.padding;\npropertyValueConverters.borderWidth=propertyValueConverters.padding;propertyValueConverters.boxShadow=propertyValueConverters.textShadow;propertyValueConverters.webkitBoxShadow=propertyValueConverters.boxShadow;propertyValueConverters.mozBoxShadow=propertyValueConverters.boxShadow;propertyValueConverters.WebkitBoxShadow=propertyValueConverters.boxShadow;propertyValueConverters.MozBoxShadow=propertyValueConverters.boxShadow;propertyValueConverters.borderStyle=propertyValueConverters.borderColor;propertyValueConverters.webkitTransform=\npropertyValueConverters.transform;propertyValueConverters.mozTransform=propertyValueConverters.transform;propertyValueConverters.WebkitTransform=propertyValueConverters.transform;propertyValueConverters.MozTransform=propertyValueConverters.transform;propertyValueConverters.transformOrigin=propertyValueConverters.backgroundPosition;propertyValueConverters.webkitTransformOrigin=propertyValueConverters.transformOrigin;propertyValueConverters.mozTransformOrigin=propertyValueConverters.transformOrigin;\npropertyValueConverters.WebkitTransformOrigin=propertyValueConverters.transformOrigin;propertyValueConverters.MozTransformOrigin=propertyValueConverters.transformOrigin;propertyValueConverters.webkitTransition=propertyValueConverters.transition;propertyValueConverters.mozTransition=propertyValueConverters.transition;propertyValueConverters.WebkitTransition=propertyValueConverters.transition;propertyValueConverters.MozTransition=propertyValueConverters.transition;propertyValueConverters.webkitTransitionProperty=\npropertyValueConverters.transitionProperty;propertyValueConverters.mozTransitionProperty=propertyValueConverters.transitionProperty;propertyValueConverters.WebkitTransitionProperty=propertyValueConverters.transitionProperty;propertyValueConverters.MozTransitionProperty=propertyValueConverters.transitionProperty;propertyValueConverters[\"text-shadow\"]=propertyValueConverters.textShadow;propertyValueConverters[\"border-color\"]=propertyValueConverters.borderColor;propertyValueConverters[\"border-radius\"]=\npropertyValueConverters.borderRadius;propertyValueConverters[\"background-image\"]=propertyValueConverters.backgroundImage;propertyValueConverters[\"background-position\"]=propertyValueConverters.backgroundPosition;propertyValueConverters[\"background-position-x\"]=propertyValueConverters.backgroundPositionX;propertyValueConverters[\"object-position\"]=propertyValueConverters.objectPosition;propertyValueConverters[\"border-width\"]=propertyValueConverters.padding;propertyValueConverters[\"box-shadow\"]=propertyValueConverters.textShadow;\npropertyValueConverters[\"-webkit-box-shadow\"]=propertyValueConverters.textShadow;propertyValueConverters[\"-moz-box-shadow\"]=propertyValueConverters.textShadow;propertyValueConverters[\"border-style\"]=propertyValueConverters.borderColor;propertyValueConverters[\"-webkit-transform\"]=propertyValueConverters.transform;propertyValueConverters[\"-moz-transform\"]=propertyValueConverters.transform;propertyValueConverters[\"transform-origin\"]=propertyValueConverters.transformOrigin;propertyValueConverters[\"-webkit-transform-origin\"]=\npropertyValueConverters.transformOrigin;propertyValueConverters[\"-moz-transform-origin\"]=propertyValueConverters.transformOrigin;propertyValueConverters[\"-webkit-transition\"]=propertyValueConverters.transition;propertyValueConverters[\"-moz-transition\"]=propertyValueConverters.transition;propertyValueConverters[\"transition-property\"]=propertyValueConverters.transitionProperty;propertyValueConverters[\"-webkit-transition-property\"]=propertyValueConverters.transitionProperty;propertyValueConverters[\"-moz-transition-property\"]=\npropertyValueConverters.transitionProperty;var propertiesToConvert=arrayToObject([[\"paddingLeft\",\"paddingRight\"],[\"marginLeft\",\"marginRight\"],[\"left\",\"right\"],[\"borderLeft\",\"borderRight\"],[\"borderLeftColor\",\"borderRightColor\"],[\"borderLeftStyle\",\"borderRightStyle\"],[\"borderLeftWidth\",\"borderRightWidth\"],[\"borderTopLeftRadius\",\"borderTopRightRadius\"],[\"borderBottomLeftRadius\",\"borderBottomRightRadius\"],[\"padding-left\",\"padding-right\"],[\"margin-left\",\"margin-right\"],[\"border-left\",\"border-right\"],[\"border-left-color\",\n\"border-right-color\"],[\"border-left-style\",\"border-right-style\"],[\"border-left-width\",\"border-right-width\"],[\"border-top-left-radius\",\"border-top-right-radius\"],[\"border-bottom-left-radius\",\"border-bottom-right-radius\"]]),propsToIgnore=[\"content\"],valuesToConvert=arrayToObject([[\"ltr\",\"rtl\"],[\"left\",\"right\"],[\"w-resize\",\"e-resize\"],[\"sw-resize\",\"se-resize\"],[\"nw-resize\",\"ne-resize\"]]),bgImgDirectionRegex=/(^|\\W|_)((ltr)|(rtl)|(left)|(right))(\\W|_|$)/g,bgPosDirectionRegex=/(left)|(right)/;exports.arrayToObject=\narrayToObject;exports.calculateNewBackgroundPosition=calculateNewBackgroundPosition;exports.convert=convert;exports.convertProperty=convertProperty;exports.flipSign=flipSign;exports.flipTransformSign=flipTransformSign;exports.getPropertyDoppelganger=getPropertyDoppelganger;exports.getValueDoppelganger=getValueDoppelganger;exports.getValuesAsList=getValuesAsList;exports.handleQuartetValues=handleQuartetValues;exports.includes=includes;exports.isBoolean=isBoolean;exports.isFunction=isFunction;exports.isNullOrUndefined=\nisNullOrUndefined;exports.isNumber=isNumber;exports.isObject=isObject;exports.isString=isString;exports.propertiesToConvert=propertiesToConvert;exports.propertyValueConverters=propertyValueConverters;exports.propsToIgnore=propsToIgnore;exports.valuesToConvert=valuesToConvert}","~:source","shadow$provide[\"module$node_modules$rtl_css_js$dist$cjs$convert_7d2e62d9\"] = function(global,require,module,exports) {\n'use strict';\n\n/**\n * Takes an array of [keyValue1, keyValue2] pairs and creates an object of {keyValue1: keyValue2, keyValue2: keyValue1}\n * @param {Array} array the array of pairs\n * @return {Object} the {key, value} pair object\n */\nfunction arrayToObject(array) {\n  return array.reduce(function (obj, _ref) {\n    var prop1 = _ref[0],\n        prop2 = _ref[1];\n    obj[prop1] = prop2;\n    obj[prop2] = prop1;\n    return obj;\n  }, {});\n}\n\nfunction isBoolean(val) {\n  return typeof val === 'boolean';\n}\n\nfunction isFunction(val) {\n  return typeof val === 'function';\n}\n\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n\nfunction isNullOrUndefined(val) {\n  return val === null || typeof val === 'undefined';\n}\n\nfunction isObject(val) {\n  return val && typeof val === 'object';\n}\n\nfunction isString(val) {\n  return typeof val === 'string';\n}\n\nfunction includes(inclusive, inclusee) {\n  return inclusive.indexOf(inclusee) !== -1;\n}\n/**\n * Flip the sign of a CSS value, possibly with a unit.\n *\n * We can't just negate the value with unary minus due to the units.\n *\n * @private\n * @param {String} value - the original value (for example 77%)\n * @return {String} the result (for example -77%)\n */\n\n\nfunction flipSign(value) {\n  if (parseFloat(value) === 0) {\n    // Don't mangle zeroes\n    return value;\n  }\n\n  if (value[0] === '-') {\n    return value.slice(1);\n  }\n\n  return \"-\" + value;\n}\n\nfunction flipTransformSign(match, prefix, offset, suffix) {\n  return prefix + flipSign(offset) + suffix;\n}\n/**\n * Takes a percentage for background position and inverts it.\n * This was copied and modified from CSSJanus:\n * https://github.com/cssjanus/cssjanus/blob/4245f834365f6cfb0239191a151432fb85abab23/src/cssjanus.js#L152-L175\n * @param {String} value - the original value (for example 77%)\n * @return {String} the result (for example 23%)\n */\n\n\nfunction calculateNewBackgroundPosition(value) {\n  var idx = value.indexOf('.');\n\n  if (idx === -1) {\n    value = 100 - parseFloat(value) + \"%\";\n  } else {\n    // Two off, one for the \"%\" at the end, one for the dot itself\n    var len = value.length - idx - 2;\n    value = 100 - parseFloat(value);\n    value = value.toFixed(len) + \"%\";\n  }\n\n  return value;\n}\n/**\n * This takes a list of CSS values and converts it to an array\n * @param {String} value - something like `1px`, `1px 2em`, or `3pt rgb(150, 230, 550) 40px calc(100% - 5px)`\n * @return {Array} the split values (for example: `['3pt', 'rgb(150, 230, 550)', '40px', 'calc(100% - 5px)']`)\n */\n\n\nfunction getValuesAsList(value) {\n  return value.replace(/ +/g, ' ') // remove all extraneous spaces\n  .split(' ').map(function (i) {\n    return i.trim();\n  }) // get rid of extra space before/after each item\n  .filter(Boolean) // get rid of empty strings\n  // join items which are within parenthese\n  // luckily `calc (100% - 5px)` is invalid syntax and it must be `calc(100% - 5px)`, otherwise this would be even more complex\n  .reduce(function (_ref2, item) {\n    var list = _ref2.list,\n        state = _ref2.state;\n    var openParansCount = (item.match(/\\(/g) || []).length;\n    var closedParansCount = (item.match(/\\)/g) || []).length;\n\n    if (state.parensDepth > 0) {\n      list[list.length - 1] = list[list.length - 1] + \" \" + item;\n    } else {\n      list.push(item);\n    }\n\n    state.parensDepth += openParansCount - closedParansCount;\n    return {\n      list: list,\n      state: state\n    };\n  }, {\n    list: [],\n    state: {\n      parensDepth: 0\n    }\n  }).list;\n}\n/**\n * This is intended for properties that are `top right bottom left` and will switch them to `top left bottom right`\n * @param {String} value - `1px 2px 3px 4px` for example, but also handles cases where there are too few/too many and\n * simply returns the value in those cases (which is the correct behavior)\n * @return {String} the result - `1px 4px 3px 2px` for example.\n */\n\n\nfunction handleQuartetValues(value) {\n  var splitValues = getValuesAsList(value);\n\n  if (splitValues.length <= 3 || splitValues.length > 4) {\n    return value;\n  }\n\n  var top = splitValues[0],\n      right = splitValues[1],\n      bottom = splitValues[2],\n      left = splitValues[3];\n  return [top, left, bottom, right].join(' ');\n}\n\nvar propertyValueConverters = {\n  padding: function padding(_ref) {\n    var value = _ref.value;\n\n    if (isNumber(value)) {\n      return value;\n    }\n\n    return handleQuartetValues(value);\n  },\n  textShadow: function textShadow(_ref2) {\n    var value = _ref2.value;\n    // intentionally leaving off the `g` flag here because we only want to change the first number (which is the offset-x)\n    return value.replace(/(-*)([.|\\d]+)/, function (match, negative, number) {\n      if (number === '0') {\n        return match;\n      }\n\n      var doubleNegative = negative === '' ? '-' : '';\n      return \"\" + doubleNegative + number;\n    });\n  },\n  borderColor: function borderColor(_ref3) {\n    var value = _ref3.value;\n    return handleQuartetValues(value);\n  },\n  borderRadius: function borderRadius(_ref4) {\n    var value = _ref4.value;\n\n    if (isNumber(value)) {\n      return value;\n    }\n\n    if (includes(value, '/')) {\n      var _value$split = value.split('/'),\n          radius1 = _value$split[0],\n          radius2 = _value$split[1];\n\n      var convertedRadius1 = propertyValueConverters.borderRadius({\n        value: radius1.trim()\n      });\n      var convertedRadius2 = propertyValueConverters.borderRadius({\n        value: radius2.trim()\n      });\n      return convertedRadius1 + \" / \" + convertedRadius2;\n    }\n\n    var splitValues = getValuesAsList(value);\n\n    switch (splitValues.length) {\n      case 2:\n        {\n          return splitValues.reverse().join(' ');\n        }\n\n      case 4:\n        {\n          var topLeft = splitValues[0],\n              topRight = splitValues[1],\n              bottomRight = splitValues[2],\n              bottomLeft = splitValues[3];\n          return [topRight, topLeft, bottomLeft, bottomRight].join(' ');\n        }\n\n      default:\n        {\n          return value;\n        }\n    }\n  },\n  background: function background(_ref5) {\n    var value = _ref5.value,\n        valuesToConvert = _ref5.valuesToConvert,\n        isRtl = _ref5.isRtl,\n        bgImgDirectionRegex = _ref5.bgImgDirectionRegex,\n        bgPosDirectionRegex = _ref5.bgPosDirectionRegex;\n    // Yeah, this is in need of a refactor \uD83D\uDE43...\n    // but this property is a tough cookie \uD83C\uDF6A\n    // get the backgroundPosition out of the string by removing everything that couldn't be the backgroundPosition value\n    var backgroundPositionValue = value.replace(/(url\\(.*?\\))|(rgba?\\(.*?\\))|(hsl\\(.*?\\))|(#[a-fA-F0-9]+)|((^| )(\\D)+( |$))/g, '').trim(); // replace that backgroundPosition value with the converted version\n\n    value = value.replace(backgroundPositionValue, propertyValueConverters.backgroundPosition({\n      value: backgroundPositionValue,\n      valuesToConvert: valuesToConvert,\n      isRtl: isRtl,\n      bgPosDirectionRegex: bgPosDirectionRegex\n    })); // do the backgroundImage value replacing on the whole value (because why not?)\n\n    return propertyValueConverters.backgroundImage({\n      value: value,\n      valuesToConvert: valuesToConvert,\n      bgImgDirectionRegex: bgImgDirectionRegex\n    });\n  },\n  backgroundImage: function backgroundImage(_ref6) {\n    var value = _ref6.value,\n        valuesToConvert = _ref6.valuesToConvert,\n        bgImgDirectionRegex = _ref6.bgImgDirectionRegex;\n\n    if (!includes(value, 'url(') && !includes(value, 'linear-gradient(')) {\n      return value;\n    }\n\n    return value.replace(bgImgDirectionRegex, function (match, g1, group2) {\n      return match.replace(group2, valuesToConvert[group2]);\n    });\n  },\n  backgroundPosition: function backgroundPosition(_ref7) {\n    var value = _ref7.value,\n        valuesToConvert = _ref7.valuesToConvert,\n        isRtl = _ref7.isRtl,\n        bgPosDirectionRegex = _ref7.bgPosDirectionRegex;\n    return value // intentionally only grabbing the first instance of this because that represents `left`\n    .replace(isRtl ? /^((-|\\d|\\.)+%)/ : null, function (match, group) {\n      return calculateNewBackgroundPosition(group);\n    }).replace(bgPosDirectionRegex, function (match) {\n      return valuesToConvert[match];\n    });\n  },\n  backgroundPositionX: function backgroundPositionX(_ref8) {\n    var value = _ref8.value,\n        valuesToConvert = _ref8.valuesToConvert,\n        isRtl = _ref8.isRtl,\n        bgPosDirectionRegex = _ref8.bgPosDirectionRegex;\n\n    if (isNumber(value)) {\n      return value;\n    }\n\n    return propertyValueConverters.backgroundPosition({\n      value: value,\n      valuesToConvert: valuesToConvert,\n      isRtl: isRtl,\n      bgPosDirectionRegex: bgPosDirectionRegex\n    });\n  },\n  transition: function transition(_ref9) {\n    var value = _ref9.value,\n        propertiesToConvert = _ref9.propertiesToConvert;\n    return value.split(/,\\s*/g).map(function (transition) {\n      var values = transition.split(' '); // Property is always defined first\n\n      values[0] = propertiesToConvert[values[0]] || values[0];\n      return values.join(' ');\n    }).join(', ');\n  },\n  transitionProperty: function transitionProperty(_ref10) {\n    var value = _ref10.value,\n        propertiesToConvert = _ref10.propertiesToConvert;\n    return value.split(/,\\s*/g).map(function (prop) {\n      return propertiesToConvert[prop] || prop;\n    }).join(', ');\n  },\n  transform: function transform(_ref11) {\n    var value = _ref11.value;\n    // This was copied and modified from CSSJanus:\n    // https://github.com/cssjanus/cssjanus/blob/4a40f001b1ba35567112d8b8e1d9d95eda4234c3/src/cssjanus.js#L152-L153\n    var nonAsciiPattern = \"[^\\\\u0020-\\\\u007e]\";\n    var escapePattern = \"(?:\" + '(?:(?:\\\\[0-9a-f]{1,6})(?:\\\\r\\\\n|\\\\s)?)' + \"|\\\\\\\\[^\\\\r\\\\n\\\\f0-9a-f])\";\n    var signedQuantPattern = \"((?:-?\" + ('(?:[0-9]*\\\\.[0-9]+|[0-9]+)' + \"(?:\\\\s*\" + '(?:em|ex|px|cm|mm|in|pt|pc|deg|rad|grad|ms|s|hz|khz|%)' + \"|\" + (\"-?\" + (\"(?:[_a-z]|\" + nonAsciiPattern + \"|\" + escapePattern + \")\") + (\"(?:[_a-z0-9-]|\" + nonAsciiPattern + \"|\" + escapePattern + \")\") + \"*\") + \")?\") + \")|(?:inherit|auto))\";\n    var translateXRegExp = new RegExp(\"(translateX\\\\s*\\\\(\\\\s*)\" + signedQuantPattern + \"(\\\\s*\\\\))\", 'gi');\n    var translateRegExp = new RegExp(\"(translate\\\\s*\\\\(\\\\s*)\" + signedQuantPattern + \"((?:\\\\s*,\\\\s*\" + signedQuantPattern + \"){0,1}\\\\s*\\\\))\", 'gi');\n    var translate3dRegExp = new RegExp(\"(translate3d\\\\s*\\\\(\\\\s*)\" + signedQuantPattern + \"((?:\\\\s*,\\\\s*\" + signedQuantPattern + \"){0,2}\\\\s*\\\\))\", 'gi');\n    var rotateRegExp = new RegExp(\"(rotate[ZY]?\\\\s*\\\\(\\\\s*)\" + signedQuantPattern + \"(\\\\s*\\\\))\", 'gi');\n    return value.replace(translateXRegExp, flipTransformSign).replace(translateRegExp, flipTransformSign).replace(translate3dRegExp, flipTransformSign).replace(rotateRegExp, flipTransformSign);\n  }\n};\npropertyValueConverters.objectPosition = propertyValueConverters.backgroundPosition;\npropertyValueConverters.margin = propertyValueConverters.padding;\npropertyValueConverters.borderWidth = propertyValueConverters.padding;\npropertyValueConverters.boxShadow = propertyValueConverters.textShadow;\npropertyValueConverters.webkitBoxShadow = propertyValueConverters.boxShadow;\npropertyValueConverters.mozBoxShadow = propertyValueConverters.boxShadow;\npropertyValueConverters.WebkitBoxShadow = propertyValueConverters.boxShadow;\npropertyValueConverters.MozBoxShadow = propertyValueConverters.boxShadow;\npropertyValueConverters.borderStyle = propertyValueConverters.borderColor;\npropertyValueConverters.webkitTransform = propertyValueConverters.transform;\npropertyValueConverters.mozTransform = propertyValueConverters.transform;\npropertyValueConverters.WebkitTransform = propertyValueConverters.transform;\npropertyValueConverters.MozTransform = propertyValueConverters.transform;\npropertyValueConverters.transformOrigin = propertyValueConverters.backgroundPosition;\npropertyValueConverters.webkitTransformOrigin = propertyValueConverters.transformOrigin;\npropertyValueConverters.mozTransformOrigin = propertyValueConverters.transformOrigin;\npropertyValueConverters.WebkitTransformOrigin = propertyValueConverters.transformOrigin;\npropertyValueConverters.MozTransformOrigin = propertyValueConverters.transformOrigin;\npropertyValueConverters.webkitTransition = propertyValueConverters.transition;\npropertyValueConverters.mozTransition = propertyValueConverters.transition;\npropertyValueConverters.WebkitTransition = propertyValueConverters.transition;\npropertyValueConverters.MozTransition = propertyValueConverters.transition;\npropertyValueConverters.webkitTransitionProperty = propertyValueConverters.transitionProperty;\npropertyValueConverters.mozTransitionProperty = propertyValueConverters.transitionProperty;\npropertyValueConverters.WebkitTransitionProperty = propertyValueConverters.transitionProperty;\npropertyValueConverters.MozTransitionProperty = propertyValueConverters.transitionProperty; // kebab-case versions\n\npropertyValueConverters['text-shadow'] = propertyValueConverters.textShadow;\npropertyValueConverters['border-color'] = propertyValueConverters.borderColor;\npropertyValueConverters['border-radius'] = propertyValueConverters.borderRadius;\npropertyValueConverters['background-image'] = propertyValueConverters.backgroundImage;\npropertyValueConverters['background-position'] = propertyValueConverters.backgroundPosition;\npropertyValueConverters['background-position-x'] = propertyValueConverters.backgroundPositionX;\npropertyValueConverters['object-position'] = propertyValueConverters.objectPosition;\npropertyValueConverters['border-width'] = propertyValueConverters.padding;\npropertyValueConverters['box-shadow'] = propertyValueConverters.textShadow;\npropertyValueConverters['-webkit-box-shadow'] = propertyValueConverters.textShadow;\npropertyValueConverters['-moz-box-shadow'] = propertyValueConverters.textShadow;\npropertyValueConverters['border-style'] = propertyValueConverters.borderColor;\npropertyValueConverters['-webkit-transform'] = propertyValueConverters.transform;\npropertyValueConverters['-moz-transform'] = propertyValueConverters.transform;\npropertyValueConverters['transform-origin'] = propertyValueConverters.transformOrigin;\npropertyValueConverters['-webkit-transform-origin'] = propertyValueConverters.transformOrigin;\npropertyValueConverters['-moz-transform-origin'] = propertyValueConverters.transformOrigin;\npropertyValueConverters['-webkit-transition'] = propertyValueConverters.transition;\npropertyValueConverters['-moz-transition'] = propertyValueConverters.transition;\npropertyValueConverters['transition-property'] = propertyValueConverters.transitionProperty;\npropertyValueConverters['-webkit-transition-property'] = propertyValueConverters.transitionProperty;\npropertyValueConverters['-moz-transition-property'] = propertyValueConverters.transitionProperty;\n\nvar propertiesToConvert = arrayToObject([['paddingLeft', 'paddingRight'], ['marginLeft', 'marginRight'], ['left', 'right'], ['borderLeft', 'borderRight'], ['borderLeftColor', 'borderRightColor'], ['borderLeftStyle', 'borderRightStyle'], ['borderLeftWidth', 'borderRightWidth'], ['borderTopLeftRadius', 'borderTopRightRadius'], ['borderBottomLeftRadius', 'borderBottomRightRadius'], // kebab-case versions\n['padding-left', 'padding-right'], ['margin-left', 'margin-right'], ['border-left', 'border-right'], ['border-left-color', 'border-right-color'], ['border-left-style', 'border-right-style'], ['border-left-width', 'border-right-width'], ['border-top-left-radius', 'border-top-right-radius'], ['border-bottom-left-radius', 'border-bottom-right-radius']]);\nvar propsToIgnore = ['content']; // this is the same as the propertiesToConvert except for values\n\nvar valuesToConvert = arrayToObject([['ltr', 'rtl'], ['left', 'right'], ['w-resize', 'e-resize'], ['sw-resize', 'se-resize'], ['nw-resize', 'ne-resize']]); // Sorry for the regex \uD83D\uDE1E, but basically thisis used to replace _every_ instance of\n// `ltr`, `rtl`, `right`, and `left` in `backgroundimage` with the corresponding opposite.\n// A situation we're accepting here:\n// url('/left/right/rtl/ltr.png') will be changed to url('/right/left/ltr/rtl.png')\n// Definite trade-offs here, but I think it's a good call.\n\nvar bgImgDirectionRegex = new RegExp('(^|\\\\W|_)((ltr)|(rtl)|(left)|(right))(\\\\W|_|$)', 'g');\nvar bgPosDirectionRegex = new RegExp('(left)|(right)');\n/**\n * converts properties and values in the CSS in JS object to their corresponding RTL values\n * @param {Object} object the CSS in JS object\n * @return {Object} the RTL converted object\n */\n\nfunction convert(object) {\n  return Object.keys(object).reduce(function (newObj, originalKey) {\n    var originalValue = object[originalKey];\n\n    if (isString(originalValue)) {\n      // you're welcome to later code \uD83D\uDE3A\n      originalValue = originalValue.trim();\n    } // Some properties should never be transformed\n\n\n    if (includes(propsToIgnore, originalKey)) {\n      newObj[originalKey] = originalValue;\n      return newObj;\n    }\n\n    var _convertProperty = convertProperty(originalKey, originalValue),\n        key = _convertProperty.key,\n        value = _convertProperty.value;\n\n    newObj[key] = value;\n    return newObj;\n  }, Array.isArray(object) ? [] : {});\n}\n/**\n * Converts a property and its value to the corresponding RTL key and value\n * @param {String} originalKey the original property key\n * @param {Number|String|Object} originalValue the original css property value\n * @return {Object} the new {key, value} pair\n */\n\nfunction convertProperty(originalKey, originalValue) {\n  var isNoFlip = /\\/\\*\\s?@noflip\\s?\\*\\//.test(originalValue);\n  var key = isNoFlip ? originalKey : getPropertyDoppelganger(originalKey);\n  var value = isNoFlip ? originalValue : getValueDoppelganger(key, originalValue);\n  return {\n    key: key,\n    value: value\n  };\n}\n/**\n * This gets the RTL version of the given property if it has a corresponding RTL property\n * @param {String} property the name of the property\n * @return {String} the name of the RTL property\n */\n\nfunction getPropertyDoppelganger(property) {\n  return propertiesToConvert[property] || property;\n}\n/**\n * This converts the given value to the RTL version of that value based on the key\n * @param {String} key this is the key (note: this should be the RTL version of the originalKey)\n * @param {String|Number|Object} originalValue the original css property value. If it's an object, then we'll convert that as well\n * @return {String|Number|Object} the converted value\n */\n\nfunction getValueDoppelganger(key, originalValue) {\n  /* eslint complexity:[2, 10] */\n  // let's try to keep the complexity down... If we have to do this much more, let's break this up\n  if (isNullOrUndefined(originalValue) || isBoolean(originalValue)) {\n    return originalValue;\n  }\n\n  if (isObject(originalValue)) {\n    return convert(originalValue); // recurssion \uD83C\uDF00\n  }\n\n  var isNum = isNumber(originalValue);\n  var isFunc = isFunction(originalValue);\n  var importantlessValue = isNum || isFunc ? originalValue : originalValue.replace(/ !important.*?$/, '');\n  var isImportant = !isNum && importantlessValue.length !== originalValue.length;\n  var valueConverter = propertyValueConverters[key];\n  var newValue;\n\n  if (valueConverter) {\n    newValue = valueConverter({\n      value: importantlessValue,\n      valuesToConvert: valuesToConvert,\n      propertiesToConvert: propertiesToConvert,\n      isRtl: true,\n      bgImgDirectionRegex: bgImgDirectionRegex,\n      bgPosDirectionRegex: bgPosDirectionRegex\n    });\n  } else {\n    newValue = valuesToConvert[importantlessValue] || importantlessValue;\n  }\n\n  if (isImportant) {\n    return newValue + \" !important\";\n  }\n\n  return newValue;\n}\n\nexports.arrayToObject = arrayToObject;\nexports.calculateNewBackgroundPosition = calculateNewBackgroundPosition;\nexports.convert = convert;\nexports.convertProperty = convertProperty;\nexports.flipSign = flipSign;\nexports.flipTransformSign = flipTransformSign;\nexports.getPropertyDoppelganger = getPropertyDoppelganger;\nexports.getValueDoppelganger = getValueDoppelganger;\nexports.getValuesAsList = getValuesAsList;\nexports.handleQuartetValues = handleQuartetValues;\nexports.includes = includes;\nexports.isBoolean = isBoolean;\nexports.isFunction = isFunction;\nexports.isNullOrUndefined = isNullOrUndefined;\nexports.isNumber = isNumber;\nexports.isObject = isObject;\nexports.isString = isString;\nexports.propertiesToConvert = propertiesToConvert;\nexports.propertyValueConverters = propertyValueConverters;\nexports.propsToIgnore = propsToIgnore;\nexports.valuesToConvert = valuesToConvert;\n\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["MozBoxShadow","isFunction","WebkitBoxShadow","isNumber","mozTransformOrigin","includes","MozTransformOrigin","list","bgPosDirectionRegex","backgroundImage","propertyValueConverters","webkitTransition","isRtl","margin","mozTransform","objectPosition","WebkitTransition","key","convert","bgImgDirectionRegex","padding","convertProperty","transform","getPropertyDoppelganger","propsToIgnore","flipTransformSign","WebkitTransitionProperty","borderWidth","WebkitTransformOrigin","isObject","WebkitTransform","value","flipSign","backgroundPosition","isNullOrUndefined","MozTransition","borderRadius","transformOrigin","mozTransitionProperty","borderColor","valuesToConvert","boxShadow","webkitTransform","handleQuartetValues","state","arrayToObject","mozTransition","webkitTransformOrigin","backgroundPositionX","MozTransitionProperty","transitionProperty","webkitTransitionProperty","MozTransform","webkitBoxShadow","transition","background","parensDepth","mozBoxShadow","borderStyle","propertiesToConvert","getValuesAsList","calculateNewBackgroundPosition","isBoolean","getValueDoppelganger","isString","textShadow"]],"~:compiled-at",1622535541158,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$rtl_css_js$dist$cjs$convert_7d2e62d9.js\",\n\"lineCount\":26,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/rtl-css-js/dist/cjs/convert-7d2e62d9.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$rtl_css_js$dist$cjs$convert_7d2e62d9\\\"] = function(global,require,module,exports) {\\n'use strict';\\n\\n/**\\n * Takes an array of [keyValue1, keyValue2] pairs and creates an object of {keyValue1: keyValue2, keyValue2: keyValue1}\\n * @param {Array} array the array of pairs\\n * @return {Object} the {key, value} pair object\\n */\\nfunction arrayToObject(array) {\\n  return array.reduce(function (obj, _ref) {\\n    var prop1 = _ref[0],\\n        prop2 = _ref[1];\\n    obj[prop1] = prop2;\\n    obj[prop2] = prop1;\\n    return obj;\\n  }, {});\\n}\\n\\nfunction isBoolean(val) {\\n  return typeof val === 'boolean';\\n}\\n\\nfunction isFunction(val) {\\n  return typeof val === 'function';\\n}\\n\\nfunction isNumber(val) {\\n  return typeof val === 'number';\\n}\\n\\nfunction isNullOrUndefined(val) {\\n  return val === null || typeof val === 'undefined';\\n}\\n\\nfunction isObject(val) {\\n  return val && typeof val === 'object';\\n}\\n\\nfunction isString(val) {\\n  return typeof val === 'string';\\n}\\n\\nfunction includes(inclusive, inclusee) {\\n  return inclusive.indexOf(inclusee) !== -1;\\n}\\n/**\\n * Flip the sign of a CSS value, possibly with a unit.\\n *\\n * We can't just negate the value with unary minus due to the units.\\n *\\n * @private\\n * @param {String} value - the original value (for example 77%)\\n * @return {String} the result (for example -77%)\\n */\\n\\n\\nfunction flipSign(value) {\\n  if (parseFloat(value) === 0) {\\n    // Don't mangle zeroes\\n    return value;\\n  }\\n\\n  if (value[0] === '-') {\\n    return value.slice(1);\\n  }\\n\\n  return \\\"-\\\" + value;\\n}\\n\\nfunction flipTransformSign(match, prefix, offset, suffix) {\\n  return prefix + flipSign(offset) + suffix;\\n}\\n/**\\n * Takes a percentage for background position and inverts it.\\n * This was copied and modified from CSSJanus:\\n * https://github.com/cssjanus/cssjanus/blob/4245f834365f6cfb0239191a151432fb85abab23/src/cssjanus.js#L152-L175\\n * @param {String} value - the original value (for example 77%)\\n * @return {String} the result (for example 23%)\\n */\\n\\n\\nfunction calculateNewBackgroundPosition(value) {\\n  var idx = value.indexOf('.');\\n\\n  if (idx === -1) {\\n    value = 100 - parseFloat(value) + \\\"%\\\";\\n  } else {\\n    // Two off, one for the \\\"%\\\" at the end, one for the dot itself\\n    var len = value.length - idx - 2;\\n    value = 100 - parseFloat(value);\\n    value = value.toFixed(len) + \\\"%\\\";\\n  }\\n\\n  return value;\\n}\\n/**\\n * This takes a list of CSS values and converts it to an array\\n * @param {String} value - something like `1px`, `1px 2em`, or `3pt rgb(150, 230, 550) 40px calc(100% - 5px)`\\n * @return {Array} the split values (for example: `['3pt', 'rgb(150, 230, 550)', '40px', 'calc(100% - 5px)']`)\\n */\\n\\n\\nfunction getValuesAsList(value) {\\n  return value.replace(/ +/g, ' ') // remove all extraneous spaces\\n  .split(' ').map(function (i) {\\n    return i.trim();\\n  }) // get rid of extra space before/after each item\\n  .filter(Boolean) // get rid of empty strings\\n  // join items which are within parenthese\\n  // luckily `calc (100% - 5px)` is invalid syntax and it must be `calc(100% - 5px)`, otherwise this would be even more complex\\n  .reduce(function (_ref2, item) {\\n    var list = _ref2.list,\\n        state = _ref2.state;\\n    var openParansCount = (item.match(/\\\\(/g) || []).length;\\n    var closedParansCount = (item.match(/\\\\)/g) || []).length;\\n\\n    if (state.parensDepth > 0) {\\n      list[list.length - 1] = list[list.length - 1] + \\\" \\\" + item;\\n    } else {\\n      list.push(item);\\n    }\\n\\n    state.parensDepth += openParansCount - closedParansCount;\\n    return {\\n      list: list,\\n      state: state\\n    };\\n  }, {\\n    list: [],\\n    state: {\\n      parensDepth: 0\\n    }\\n  }).list;\\n}\\n/**\\n * This is intended for properties that are `top right bottom left` and will switch them to `top left bottom right`\\n * @param {String} value - `1px 2px 3px 4px` for example, but also handles cases where there are too few/too many and\\n * simply returns the value in those cases (which is the correct behavior)\\n * @return {String} the result - `1px 4px 3px 2px` for example.\\n */\\n\\n\\nfunction handleQuartetValues(value) {\\n  var splitValues = getValuesAsList(value);\\n\\n  if (splitValues.length <= 3 || splitValues.length > 4) {\\n    return value;\\n  }\\n\\n  var top = splitValues[0],\\n      right = splitValues[1],\\n      bottom = splitValues[2],\\n      left = splitValues[3];\\n  return [top, left, bottom, right].join(' ');\\n}\\n\\nvar propertyValueConverters = {\\n  padding: function padding(_ref) {\\n    var value = _ref.value;\\n\\n    if (isNumber(value)) {\\n      return value;\\n    }\\n\\n    return handleQuartetValues(value);\\n  },\\n  textShadow: function textShadow(_ref2) {\\n    var value = _ref2.value;\\n    // intentionally leaving off the `g` flag here because we only want to change the first number (which is the offset-x)\\n    return value.replace(/(-*)([.|\\\\d]+)/, function (match, negative, number) {\\n      if (number === '0') {\\n        return match;\\n      }\\n\\n      var doubleNegative = negative === '' ? '-' : '';\\n      return \\\"\\\" + doubleNegative + number;\\n    });\\n  },\\n  borderColor: function borderColor(_ref3) {\\n    var value = _ref3.value;\\n    return handleQuartetValues(value);\\n  },\\n  borderRadius: function borderRadius(_ref4) {\\n    var value = _ref4.value;\\n\\n    if (isNumber(value)) {\\n      return value;\\n    }\\n\\n    if (includes(value, '/')) {\\n      var _value$split = value.split('/'),\\n          radius1 = _value$split[0],\\n          radius2 = _value$split[1];\\n\\n      var convertedRadius1 = propertyValueConverters.borderRadius({\\n        value: radius1.trim()\\n      });\\n      var convertedRadius2 = propertyValueConverters.borderRadius({\\n        value: radius2.trim()\\n      });\\n      return convertedRadius1 + \\\" / \\\" + convertedRadius2;\\n    }\\n\\n    var splitValues = getValuesAsList(value);\\n\\n    switch (splitValues.length) {\\n      case 2:\\n        {\\n          return splitValues.reverse().join(' ');\\n        }\\n\\n      case 4:\\n        {\\n          var topLeft = splitValues[0],\\n              topRight = splitValues[1],\\n              bottomRight = splitValues[2],\\n              bottomLeft = splitValues[3];\\n          return [topRight, topLeft, bottomLeft, bottomRight].join(' ');\\n        }\\n\\n      default:\\n        {\\n          return value;\\n        }\\n    }\\n  },\\n  background: function background(_ref5) {\\n    var value = _ref5.value,\\n        valuesToConvert = _ref5.valuesToConvert,\\n        isRtl = _ref5.isRtl,\\n        bgImgDirectionRegex = _ref5.bgImgDirectionRegex,\\n        bgPosDirectionRegex = _ref5.bgPosDirectionRegex;\\n    // Yeah, this is in need of a refactor \\ud83d\\ude43...\\n    // but this property is a tough cookie \\ud83c\\udf6a\\n    // get the backgroundPosition out of the string by removing everything that couldn't be the backgroundPosition value\\n    var backgroundPositionValue = value.replace(/(url\\\\(.*?\\\\))|(rgba?\\\\(.*?\\\\))|(hsl\\\\(.*?\\\\))|(#[a-fA-F0-9]+)|((^| )(\\\\D)+( |$))/g, '').trim(); // replace that backgroundPosition value with the converted version\\n\\n    value = value.replace(backgroundPositionValue, propertyValueConverters.backgroundPosition({\\n      value: backgroundPositionValue,\\n      valuesToConvert: valuesToConvert,\\n      isRtl: isRtl,\\n      bgPosDirectionRegex: bgPosDirectionRegex\\n    })); // do the backgroundImage value replacing on the whole value (because why not?)\\n\\n    return propertyValueConverters.backgroundImage({\\n      value: value,\\n      valuesToConvert: valuesToConvert,\\n      bgImgDirectionRegex: bgImgDirectionRegex\\n    });\\n  },\\n  backgroundImage: function backgroundImage(_ref6) {\\n    var value = _ref6.value,\\n        valuesToConvert = _ref6.valuesToConvert,\\n        bgImgDirectionRegex = _ref6.bgImgDirectionRegex;\\n\\n    if (!includes(value, 'url(') && !includes(value, 'linear-gradient(')) {\\n      return value;\\n    }\\n\\n    return value.replace(bgImgDirectionRegex, function (match, g1, group2) {\\n      return match.replace(group2, valuesToConvert[group2]);\\n    });\\n  },\\n  backgroundPosition: function backgroundPosition(_ref7) {\\n    var value = _ref7.value,\\n        valuesToConvert = _ref7.valuesToConvert,\\n        isRtl = _ref7.isRtl,\\n        bgPosDirectionRegex = _ref7.bgPosDirectionRegex;\\n    return value // intentionally only grabbing the first instance of this because that represents `left`\\n    .replace(isRtl ? /^((-|\\\\d|\\\\.)+%)/ : null, function (match, group) {\\n      return calculateNewBackgroundPosition(group);\\n    }).replace(bgPosDirectionRegex, function (match) {\\n      return valuesToConvert[match];\\n    });\\n  },\\n  backgroundPositionX: function backgroundPositionX(_ref8) {\\n    var value = _ref8.value,\\n        valuesToConvert = _ref8.valuesToConvert,\\n        isRtl = _ref8.isRtl,\\n        bgPosDirectionRegex = _ref8.bgPosDirectionRegex;\\n\\n    if (isNumber(value)) {\\n      return value;\\n    }\\n\\n    return propertyValueConverters.backgroundPosition({\\n      value: value,\\n      valuesToConvert: valuesToConvert,\\n      isRtl: isRtl,\\n      bgPosDirectionRegex: bgPosDirectionRegex\\n    });\\n  },\\n  transition: function transition(_ref9) {\\n    var value = _ref9.value,\\n        propertiesToConvert = _ref9.propertiesToConvert;\\n    return value.split(/,\\\\s*/g).map(function (transition) {\\n      var values = transition.split(' '); // Property is always defined first\\n\\n      values[0] = propertiesToConvert[values[0]] || values[0];\\n      return values.join(' ');\\n    }).join(', ');\\n  },\\n  transitionProperty: function transitionProperty(_ref10) {\\n    var value = _ref10.value,\\n        propertiesToConvert = _ref10.propertiesToConvert;\\n    return value.split(/,\\\\s*/g).map(function (prop) {\\n      return propertiesToConvert[prop] || prop;\\n    }).join(', ');\\n  },\\n  transform: function transform(_ref11) {\\n    var value = _ref11.value;\\n    // This was copied and modified from CSSJanus:\\n    // https://github.com/cssjanus/cssjanus/blob/4a40f001b1ba35567112d8b8e1d9d95eda4234c3/src/cssjanus.js#L152-L153\\n    var nonAsciiPattern = \\\"[^\\\\\\\\u0020-\\\\\\\\u007e]\\\";\\n    var escapePattern = \\\"(?:\\\" + '(?:(?:\\\\\\\\[0-9a-f]{1,6})(?:\\\\\\\\r\\\\\\\\n|\\\\\\\\s)?)' + \\\"|\\\\\\\\\\\\\\\\[^\\\\\\\\r\\\\\\\\n\\\\\\\\f0-9a-f])\\\";\\n    var signedQuantPattern = \\\"((?:-?\\\" + ('(?:[0-9]*\\\\\\\\.[0-9]+|[0-9]+)' + \\\"(?:\\\\\\\\s*\\\" + '(?:em|ex|px|cm|mm|in|pt|pc|deg|rad|grad|ms|s|hz|khz|%)' + \\\"|\\\" + (\\\"-?\\\" + (\\\"(?:[_a-z]|\\\" + nonAsciiPattern + \\\"|\\\" + escapePattern + \\\")\\\") + (\\\"(?:[_a-z0-9-]|\\\" + nonAsciiPattern + \\\"|\\\" + escapePattern + \\\")\\\") + \\\"*\\\") + \\\")?\\\") + \\\")|(?:inherit|auto))\\\";\\n    var translateXRegExp = new RegExp(\\\"(translateX\\\\\\\\s*\\\\\\\\(\\\\\\\\s*)\\\" + signedQuantPattern + \\\"(\\\\\\\\s*\\\\\\\\))\\\", 'gi');\\n    var translateRegExp = new RegExp(\\\"(translate\\\\\\\\s*\\\\\\\\(\\\\\\\\s*)\\\" + signedQuantPattern + \\\"((?:\\\\\\\\s*,\\\\\\\\s*\\\" + signedQuantPattern + \\\"){0,1}\\\\\\\\s*\\\\\\\\))\\\", 'gi');\\n    var translate3dRegExp = new RegExp(\\\"(translate3d\\\\\\\\s*\\\\\\\\(\\\\\\\\s*)\\\" + signedQuantPattern + \\\"((?:\\\\\\\\s*,\\\\\\\\s*\\\" + signedQuantPattern + \\\"){0,2}\\\\\\\\s*\\\\\\\\))\\\", 'gi');\\n    var rotateRegExp = new RegExp(\\\"(rotate[ZY]?\\\\\\\\s*\\\\\\\\(\\\\\\\\s*)\\\" + signedQuantPattern + \\\"(\\\\\\\\s*\\\\\\\\))\\\", 'gi');\\n    return value.replace(translateXRegExp, flipTransformSign).replace(translateRegExp, flipTransformSign).replace(translate3dRegExp, flipTransformSign).replace(rotateRegExp, flipTransformSign);\\n  }\\n};\\npropertyValueConverters.objectPosition = propertyValueConverters.backgroundPosition;\\npropertyValueConverters.margin = propertyValueConverters.padding;\\npropertyValueConverters.borderWidth = propertyValueConverters.padding;\\npropertyValueConverters.boxShadow = propertyValueConverters.textShadow;\\npropertyValueConverters.webkitBoxShadow = propertyValueConverters.boxShadow;\\npropertyValueConverters.mozBoxShadow = propertyValueConverters.boxShadow;\\npropertyValueConverters.WebkitBoxShadow = propertyValueConverters.boxShadow;\\npropertyValueConverters.MozBoxShadow = propertyValueConverters.boxShadow;\\npropertyValueConverters.borderStyle = propertyValueConverters.borderColor;\\npropertyValueConverters.webkitTransform = propertyValueConverters.transform;\\npropertyValueConverters.mozTransform = propertyValueConverters.transform;\\npropertyValueConverters.WebkitTransform = propertyValueConverters.transform;\\npropertyValueConverters.MozTransform = propertyValueConverters.transform;\\npropertyValueConverters.transformOrigin = propertyValueConverters.backgroundPosition;\\npropertyValueConverters.webkitTransformOrigin = propertyValueConverters.transformOrigin;\\npropertyValueConverters.mozTransformOrigin = propertyValueConverters.transformOrigin;\\npropertyValueConverters.WebkitTransformOrigin = propertyValueConverters.transformOrigin;\\npropertyValueConverters.MozTransformOrigin = propertyValueConverters.transformOrigin;\\npropertyValueConverters.webkitTransition = propertyValueConverters.transition;\\npropertyValueConverters.mozTransition = propertyValueConverters.transition;\\npropertyValueConverters.WebkitTransition = propertyValueConverters.transition;\\npropertyValueConverters.MozTransition = propertyValueConverters.transition;\\npropertyValueConverters.webkitTransitionProperty = propertyValueConverters.transitionProperty;\\npropertyValueConverters.mozTransitionProperty = propertyValueConverters.transitionProperty;\\npropertyValueConverters.WebkitTransitionProperty = propertyValueConverters.transitionProperty;\\npropertyValueConverters.MozTransitionProperty = propertyValueConverters.transitionProperty; // kebab-case versions\\n\\npropertyValueConverters['text-shadow'] = propertyValueConverters.textShadow;\\npropertyValueConverters['border-color'] = propertyValueConverters.borderColor;\\npropertyValueConverters['border-radius'] = propertyValueConverters.borderRadius;\\npropertyValueConverters['background-image'] = propertyValueConverters.backgroundImage;\\npropertyValueConverters['background-position'] = propertyValueConverters.backgroundPosition;\\npropertyValueConverters['background-position-x'] = propertyValueConverters.backgroundPositionX;\\npropertyValueConverters['object-position'] = propertyValueConverters.objectPosition;\\npropertyValueConverters['border-width'] = propertyValueConverters.padding;\\npropertyValueConverters['box-shadow'] = propertyValueConverters.textShadow;\\npropertyValueConverters['-webkit-box-shadow'] = propertyValueConverters.textShadow;\\npropertyValueConverters['-moz-box-shadow'] = propertyValueConverters.textShadow;\\npropertyValueConverters['border-style'] = propertyValueConverters.borderColor;\\npropertyValueConverters['-webkit-transform'] = propertyValueConverters.transform;\\npropertyValueConverters['-moz-transform'] = propertyValueConverters.transform;\\npropertyValueConverters['transform-origin'] = propertyValueConverters.transformOrigin;\\npropertyValueConverters['-webkit-transform-origin'] = propertyValueConverters.transformOrigin;\\npropertyValueConverters['-moz-transform-origin'] = propertyValueConverters.transformOrigin;\\npropertyValueConverters['-webkit-transition'] = propertyValueConverters.transition;\\npropertyValueConverters['-moz-transition'] = propertyValueConverters.transition;\\npropertyValueConverters['transition-property'] = propertyValueConverters.transitionProperty;\\npropertyValueConverters['-webkit-transition-property'] = propertyValueConverters.transitionProperty;\\npropertyValueConverters['-moz-transition-property'] = propertyValueConverters.transitionProperty;\\n\\nvar propertiesToConvert = arrayToObject([['paddingLeft', 'paddingRight'], ['marginLeft', 'marginRight'], ['left', 'right'], ['borderLeft', 'borderRight'], ['borderLeftColor', 'borderRightColor'], ['borderLeftStyle', 'borderRightStyle'], ['borderLeftWidth', 'borderRightWidth'], ['borderTopLeftRadius', 'borderTopRightRadius'], ['borderBottomLeftRadius', 'borderBottomRightRadius'], // kebab-case versions\\n['padding-left', 'padding-right'], ['margin-left', 'margin-right'], ['border-left', 'border-right'], ['border-left-color', 'border-right-color'], ['border-left-style', 'border-right-style'], ['border-left-width', 'border-right-width'], ['border-top-left-radius', 'border-top-right-radius'], ['border-bottom-left-radius', 'border-bottom-right-radius']]);\\nvar propsToIgnore = ['content']; // this is the same as the propertiesToConvert except for values\\n\\nvar valuesToConvert = arrayToObject([['ltr', 'rtl'], ['left', 'right'], ['w-resize', 'e-resize'], ['sw-resize', 'se-resize'], ['nw-resize', 'ne-resize']]); // Sorry for the regex \\ud83d\\ude1e, but basically thisis used to replace _every_ instance of\\n// `ltr`, `rtl`, `right`, and `left` in `backgroundimage` with the corresponding opposite.\\n// A situation we're accepting here:\\n// url('/left/right/rtl/ltr.png') will be changed to url('/right/left/ltr/rtl.png')\\n// Definite trade-offs here, but I think it's a good call.\\n\\nvar bgImgDirectionRegex = new RegExp('(^|\\\\\\\\W|_)((ltr)|(rtl)|(left)|(right))(\\\\\\\\W|_|$)', 'g');\\nvar bgPosDirectionRegex = new RegExp('(left)|(right)');\\n/**\\n * converts properties and values in the CSS in JS object to their corresponding RTL values\\n * @param {Object} object the CSS in JS object\\n * @return {Object} the RTL converted object\\n */\\n\\nfunction convert(object) {\\n  return Object.keys(object).reduce(function (newObj, originalKey) {\\n    var originalValue = object[originalKey];\\n\\n    if (isString(originalValue)) {\\n      // you're welcome to later code \\ud83d\\ude3a\\n      originalValue = originalValue.trim();\\n    } // Some properties should never be transformed\\n\\n\\n    if (includes(propsToIgnore, originalKey)) {\\n      newObj[originalKey] = originalValue;\\n      return newObj;\\n    }\\n\\n    var _convertProperty = convertProperty(originalKey, originalValue),\\n        key = _convertProperty.key,\\n        value = _convertProperty.value;\\n\\n    newObj[key] = value;\\n    return newObj;\\n  }, Array.isArray(object) ? [] : {});\\n}\\n/**\\n * Converts a property and its value to the corresponding RTL key and value\\n * @param {String} originalKey the original property key\\n * @param {Number|String|Object} originalValue the original css property value\\n * @return {Object} the new {key, value} pair\\n */\\n\\nfunction convertProperty(originalKey, originalValue) {\\n  var isNoFlip = /\\\\/\\\\*\\\\s?@noflip\\\\s?\\\\*\\\\//.test(originalValue);\\n  var key = isNoFlip ? originalKey : getPropertyDoppelganger(originalKey);\\n  var value = isNoFlip ? originalValue : getValueDoppelganger(key, originalValue);\\n  return {\\n    key: key,\\n    value: value\\n  };\\n}\\n/**\\n * This gets the RTL version of the given property if it has a corresponding RTL property\\n * @param {String} property the name of the property\\n * @return {String} the name of the RTL property\\n */\\n\\nfunction getPropertyDoppelganger(property) {\\n  return propertiesToConvert[property] || property;\\n}\\n/**\\n * This converts the given value to the RTL version of that value based on the key\\n * @param {String} key this is the key (note: this should be the RTL version of the originalKey)\\n * @param {String|Number|Object} originalValue the original css property value. If it's an object, then we'll convert that as well\\n * @return {String|Number|Object} the converted value\\n */\\n\\nfunction getValueDoppelganger(key, originalValue) {\\n  /* eslint complexity:[2, 10] */\\n  // let's try to keep the complexity down... If we have to do this much more, let's break this up\\n  if (isNullOrUndefined(originalValue) || isBoolean(originalValue)) {\\n    return originalValue;\\n  }\\n\\n  if (isObject(originalValue)) {\\n    return convert(originalValue); // recurssion \\ud83c\\udf00\\n  }\\n\\n  var isNum = isNumber(originalValue);\\n  var isFunc = isFunction(originalValue);\\n  var importantlessValue = isNum || isFunc ? originalValue : originalValue.replace(/ !important.*?$/, '');\\n  var isImportant = !isNum && importantlessValue.length !== originalValue.length;\\n  var valueConverter = propertyValueConverters[key];\\n  var newValue;\\n\\n  if (valueConverter) {\\n    newValue = valueConverter({\\n      value: importantlessValue,\\n      valuesToConvert: valuesToConvert,\\n      propertiesToConvert: propertiesToConvert,\\n      isRtl: true,\\n      bgImgDirectionRegex: bgImgDirectionRegex,\\n      bgPosDirectionRegex: bgPosDirectionRegex\\n    });\\n  } else {\\n    newValue = valuesToConvert[importantlessValue] || importantlessValue;\\n  }\\n\\n  if (isImportant) {\\n    return newValue + \\\" !important\\\";\\n  }\\n\\n  return newValue;\\n}\\n\\nexports.arrayToObject = arrayToObject;\\nexports.calculateNewBackgroundPosition = calculateNewBackgroundPosition;\\nexports.convert = convert;\\nexports.convertProperty = convertProperty;\\nexports.flipSign = flipSign;\\nexports.flipTransformSign = flipTransformSign;\\nexports.getPropertyDoppelganger = getPropertyDoppelganger;\\nexports.getValueDoppelganger = getValueDoppelganger;\\nexports.getValuesAsList = getValuesAsList;\\nexports.handleQuartetValues = handleQuartetValues;\\nexports.includes = includes;\\nexports.isBoolean = isBoolean;\\nexports.isFunction = isFunction;\\nexports.isNullOrUndefined = isNullOrUndefined;\\nexports.isNumber = isNumber;\\nexports.isObject = isObject;\\nexports.isString = isString;\\nexports.propertiesToConvert = propertiesToConvert;\\nexports.propertyValueConverters = propertyValueConverters;\\nexports.propsToIgnore = propsToIgnore;\\nexports.valuesToConvert = valuesToConvert;\\n\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"arrayToObject\",\"array\",\"reduce\",\"obj\",\"_ref\",\"prop1\",\"prop2\",\"isBoolean\",\"val\",\"isFunction\",\"isNumber\",\"isNullOrUndefined\",\"isObject\",\"isString\",\"includes\",\"inclusive\",\"inclusee\",\"indexOf\",\"flipSign\",\"value\",\"parseFloat\",\"slice\",\"flipTransformSign\",\"match\",\"prefix\",\"offset\",\"suffix\",\"calculateNewBackgroundPosition\",\"idx\",\"len\",\"length\",\"toFixed\",\"getValuesAsList\",\"replace\",\"split\",\"map\",\"i\",\"trim\",\"filter\",\"Boolean\",\"_ref2\",\"item\",\"list\",\"state\",\"openParansCount\",\"closedParansCount\",\"parensDepth\",\"push\",\"handleQuartetValues\",\"splitValues\",\"top\",\"left\",\"bottom\",\"right\",\"join\",\"convert\",\"object\",\"Object\",\"keys\",\"newObj\",\"originalKey\",\"originalValue\",\"propsToIgnore\",\"_convertProperty\",\"convertProperty\",\"key\",\"Array\",\"isArray\",\"isNoFlip\",\"test\",\"getPropertyDoppelganger\",\"getValueDoppelganger\",\"property\",\"propertiesToConvert\",\"isNum\",\"isFunc\",\"importantlessValue\",\"isImportant\",\"newValue\",\"valueConverter\",\"propertyValueConverters\",\"valuesToConvert\",\"isRtl\",\"bgImgDirectionRegex\",\"bgPosDirectionRegex\",\"padding\",\"textShadow\",\"negative\",\"number\",\"doubleNegative\",\"borderColor\",\"_ref3\",\"borderRadius\",\"_ref4\",\"_value$split\",\"radius2\",\"convertedRadius1\",\"radius1\",\"convertedRadius2\",\"reverse\",\"topRight\",\"topLeft\",\"bottomLeft\",\"bottomRight\",\"background\",\"_ref5\",\"backgroundPositionValue\",\"backgroundPosition\",\"backgroundImage\",\"_ref6\",\"g1\",\"group2\",\"_ref7\",\"group\",\"backgroundPositionX\",\"_ref8\",\"transition\",\"_ref9\",\"values\",\"transitionProperty\",\"_ref10\",\"prop\",\"transform\",\"_ref11\",\"translateXRegExp\",\"translateRegExp\",\"translate3dRegExp\",\"rotateRegExp\",\"objectPosition\",\"margin\",\"borderWidth\",\"boxShadow\",\"webkitBoxShadow\",\"mozBoxShadow\",\"WebkitBoxShadow\",\"MozBoxShadow\",\"borderStyle\",\"webkitTransform\",\"mozTransform\",\"WebkitTransform\",\"MozTransform\",\"transformOrigin\",\"webkitTransformOrigin\",\"mozTransformOrigin\",\"WebkitTransformOrigin\",\"MozTransformOrigin\",\"webkitTransition\",\"mozTransition\",\"WebkitTransition\",\"MozTransition\",\"webkitTransitionProperty\",\"mozTransitionProperty\",\"WebkitTransitionProperty\",\"MozTransitionProperty\"]\n}\n"]