["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/date-fns/esm/isAfter/index.js"],"~:js","shadow$provide.module$node_modules$date_fns$esm$isAfter$index=function(global,require,module,exports){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj}}Object.defineProperty(exports,\"__esModule\",{value:!0});exports[\"default\"]=function(dirtyDate,dirtyDateToCompare){(0,_index2[\"default\"])(2,arguments);var date=(0,_index[\"default\"])(dirtyDate),dateToCompare=(0,_index[\"default\"])(dirtyDateToCompare);return date.getTime()>dateToCompare.getTime()};var _index=_interopRequireDefault(require(\"module$node_modules$date_fns$esm$toDate$index\")),\n_index2=_interopRequireDefault(require(\"module$node_modules$date_fns$esm$_lib$requiredArgs$index\"))}","~:source","shadow$provide[\"module$node_modules$date_fns$esm$isAfter$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = isAfter;\n\nvar _index = _interopRequireDefault(require(\"../toDate/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * @name isAfter\n * @category Common Helpers\n * @summary Is the first date after the second one?\n *\n * @description\n * Is the first date after the second one?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date that should be after the other one to return true\n * @param {Date|Number} dateToCompare - the date to compare with\n * @returns {Boolean} the first date is after the second date\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Is 10 July 1989 after 11 February 1987?\n * var result = isAfter(new Date(1989, 6, 10), new Date(1987, 1, 11))\n * //=> true\n */\nfunction isAfter(dirtyDate, dirtyDateToCompare) {\n  (0, _index2[\"default\"])(2, arguments);\n  var date = (0, _index[\"default\"])(dirtyDate);\n  var dateToCompare = (0, _index[\"default\"])(dirtyDateToCompare);\n  return date.getTime() > dateToCompare.getTime();\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$date_fns$esm$_lib$requiredArgs$index","~$shadow.js","~$module$node_modules$date_fns$esm$toDate$index"]],"~:properties",["^5",["__esModule","value"]],"~:compiled-at",1622535540991,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$date_fns$esm$isAfter$index.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,+CAAA,CAAmE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAY3GC,QAASA,uBAAsB,CAACC,GAAD,CAAM,CAAE,MAAOA,IAAA,EAAOA,GAAAC,WAAP,CAAwBD,GAAxB,CAA8B,CAAE,UAAWA,GAAb,CAAvC,CATrCE,MAAAC,eAAA,CAAsBL,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CM,MAAO,CAAA,CADoC,CAA7C,CAGAN,QAAA,CAAQ,SAAR,CAAA,CA8BAO,QAAgB,CAACC,SAAD,CAAYC,kBAAZ,CAAgC,CAC9C,CAAC,CAAA,CAAGC,OAAA,CAAQ,SAAR,CAAJ,EAAwB,CAAxB,CAA2BC,SAA3B,CACA,KAAIC,KAAO,CAAC,CAAA,CAAGC,MAAA,CAAO,SAAP,CAAJ,EAAuBL,SAAvB,CAAX,CACIM,cAAgB,CAAC,CAAA,CAAGD,MAAA,CAAO,SAAP,CAAJ,EAAuBJ,kBAAvB,CACpB,OAAOG,KAAAG,QAAA,EAAP,CAAwBD,aAAAC,QAAA,EAJsB,CA5BhD,KAAIF,OAASZ,sBAAA,CAAuBH,OAAA,CAAQ,+CAAR,CAAvB,CAAb;AAEIY,QAAUT,sBAAA,CAAuBH,OAAA,CAAQ,0DAAR,CAAvB,CAV6F;\",\n\"sources\":[\"node_modules/date-fns/esm/isAfter/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$date_fns$esm$isAfter$index\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports[\\\"default\\\"] = isAfter;\\n\\nvar _index = _interopRequireDefault(require(\\\"../toDate/index.js\\\"));\\n\\nvar _index2 = _interopRequireDefault(require(\\\"../_lib/requiredArgs/index.js\\\"));\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \\\"default\\\": obj }; }\\n\\n/**\\n * @name isAfter\\n * @category Common Helpers\\n * @summary Is the first date after the second one?\\n *\\n * @description\\n * Is the first date after the second one?\\n *\\n * ### v2.0.0 breaking changes:\\n *\\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\\n *\\n * @param {Date|Number} date - the date that should be after the other one to return true\\n * @param {Date|Number} dateToCompare - the date to compare with\\n * @returns {Boolean} the first date is after the second date\\n * @throws {TypeError} 2 arguments required\\n *\\n * @example\\n * // Is 10 July 1989 after 11 February 1987?\\n * var result = isAfter(new Date(1989, 6, 10), new Date(1987, 1, 11))\\n * //=> true\\n */\\nfunction isAfter(dirtyDate, dirtyDateToCompare) {\\n  (0, _index2[\\\"default\\\"])(2, arguments);\\n  var date = (0, _index[\\\"default\\\"])(dirtyDate);\\n  var dateToCompare = (0, _index[\\\"default\\\"])(dirtyDateToCompare);\\n  return date.getTime() > dateToCompare.getTime();\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"_interopRequireDefault\",\"obj\",\"__esModule\",\"Object\",\"defineProperty\",\"value\",\"isAfter\",\"dirtyDate\",\"dirtyDateToCompare\",\"_index2\",\"arguments\",\"date\",\"_index\",\"dateToCompare\",\"getTime\"]\n}\n"]