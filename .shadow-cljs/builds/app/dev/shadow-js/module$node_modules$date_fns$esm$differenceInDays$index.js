["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/date-fns/esm/differenceInDays/index.js"],"~:js","shadow$provide.module$node_modules$date_fns$esm$differenceInDays$index=function(global,require,module,exports){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj}}function compareLocalAsc(dateLeft,dateRight){dateLeft=dateLeft.getFullYear()-dateRight.getFullYear()||dateLeft.getMonth()-dateRight.getMonth()||dateLeft.getDate()-dateRight.getDate()||dateLeft.getHours()-dateRight.getHours()||dateLeft.getMinutes()-dateRight.getMinutes()||dateLeft.getSeconds()-dateRight.getSeconds()||\ndateLeft.getMilliseconds()-dateRight.getMilliseconds();return 0>dateLeft?-1:0<dateLeft?1:dateLeft}Object.defineProperty(exports,\"__esModule\",{value:!0});exports[\"default\"]=function(dirtyDateLeft,dirtyDateRight){(0,_index3[\"default\"])(2,arguments);var dateLeft=(0,_index[\"default\"])(dirtyDateLeft),dateRight=(0,_index[\"default\"])(dirtyDateRight),sign=compareLocalAsc(dateLeft,dateRight),difference=Math.abs((0,_index2[\"default\"])(dateLeft,dateRight));dateLeft.setDate(dateLeft.getDate()-sign*difference);\ndateLeft=Number(compareLocalAsc(dateLeft,dateRight)===-sign);sign*=difference-dateLeft;return 0===sign?0:sign};var _index=_interopRequireDefault(require(\"module$node_modules$date_fns$esm$toDate$index\")),_index2=_interopRequireDefault(require(\"module$node_modules$date_fns$esm$differenceInCalendarDays$index\")),_index3=_interopRequireDefault(require(\"module$node_modules$date_fns$esm$_lib$requiredArgs$index\"))}","~:source","shadow$provide[\"module$node_modules$date_fns$esm$differenceInDays$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = differenceInDays;\n\nvar _index = _interopRequireDefault(require(\"../toDate/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../differenceInCalendarDays/index.js\"));\n\nvar _index3 = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n// Like `compareAsc` but uses local time not UTC, which is needed\n// for accurate equality comparisons of UTC timestamps that end up\n// having the same representation in local time, e.g. one hour before\n// DST ends vs. the instant that DST ends.\nfunction compareLocalAsc(dateLeft, dateRight) {\n  var diff = dateLeft.getFullYear() - dateRight.getFullYear() || dateLeft.getMonth() - dateRight.getMonth() || dateLeft.getDate() - dateRight.getDate() || dateLeft.getHours() - dateRight.getHours() || dateLeft.getMinutes() - dateRight.getMinutes() || dateLeft.getSeconds() - dateRight.getSeconds() || dateLeft.getMilliseconds() - dateRight.getMilliseconds();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}\n/**\n * @name differenceInDays\n * @category Day Helpers\n * @summary Get the number of full days between the given dates.\n *\n * @description\n * Get the number of full day periods between two dates. Fractional days are\n * truncated towards zero.\n *\n * One \"full day\" is the distance between a local time in one day to the same\n * local time on the next or previous day. A full day can sometimes be less than\n * or more than 24 hours if a daylight savings change happens between two dates.\n *\n * To ignore DST and only measure exact 24-hour periods, use this instead:\n * `Math.floor(differenceInHours(dateLeft, dateRight)/24)|0`.\n *\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full days according to the local timezone\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 365\n * // How many full days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 0\n * // How many full days are between\n * // 1 March 2020 0:00 and 1 June 2020 0:00 ?\n * // Note: because local time is used, the\n * // result will always be 92 days, even in\n * // time zones where DST starts and the\n * // period has only 92*24-1 hours.\n * const result = differenceInDays(\n *   new Date(2020, 5, 1),\n *   new Date(2020, 2, 1)\n * )\n//=> 92\n */\n\n\nfunction differenceInDays(dirtyDateLeft, dirtyDateRight) {\n  (0, _index3[\"default\"])(2, arguments);\n  var dateLeft = (0, _index[\"default\"])(dirtyDateLeft);\n  var dateRight = (0, _index[\"default\"])(dirtyDateRight);\n  var sign = compareLocalAsc(dateLeft, dateRight);\n  var difference = Math.abs((0, _index2[\"default\"])(dateLeft, dateRight));\n  dateLeft.setDate(dateLeft.getDate() - sign * difference); // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\n  // If so, result must be decreased by 1 in absolute value\n\n  var isLastDayNotFull = Number(compareLocalAsc(dateLeft, dateRight) === -sign);\n  var result = sign * (difference - isLastDayNotFull); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$date_fns$esm$_lib$requiredArgs$index","~$shadow.js","~$module$node_modules$date_fns$esm$differenceInCalendarDays$index","~$module$node_modules$date_fns$esm$toDate$index"]],"~:properties",["^5",["__esModule","value"]],"~:compiled-at",1622535658392,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$date_fns$esm$differenceInDays$index.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,wDAAA,CAA4E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAcpHC,QAASA,uBAAsB,CAACC,GAAD,CAAM,CAAE,MAAOA,IAAA,EAAOA,GAAAC,WAAP,CAAwBD,GAAxB,CAA8B,CAAE,UAAWA,GAAb,CAAvC,CAMrCE,QAASA,gBAAe,CAACC,QAAD,CAAWC,SAAX,CAAsB,CACxCC,QAAAA,CAAOF,QAAAG,YAAA,EAAPD,CAAgCD,SAAAE,YAAA,EAAhCD,EAA2DF,QAAAI,SAAA,EAA3DF,CAAiFD,SAAAG,SAAA,EAAjFF,EAAyGF,QAAAK,QAAA,EAAzGH,CAA8HD,SAAAI,QAAA,EAA9HH,EAAqJF,QAAAM,SAAA,EAArJJ,CAA2KD,SAAAK,SAAA,EAA3KJ,EAAmMF,QAAAO,WAAA,EAAnML,CAA2ND,SAAAM,WAAA,EAA3NL,EAAqPF,QAAAQ,WAAA,EAArPN,CAA6QD,SAAAO,WAAA,EAA7QN;AAAuSF,QAAAS,gBAAA,EAAvSP,CAAoUD,SAAAQ,gBAAA,EAExU,OAAW,EAAX,CAAIP,QAAJ,CACS,EADT,CAEkB,CAAX,CAAIA,QAAJ,CACE,CADF,CAGEA,QARmC,CAjB9CQ,MAAAC,eAAA,CAAsBhB,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CiB,MAAO,CAAA,CADoC,CAA7C,CAGAjB,QAAA,CAAQ,SAAR,CAAA,CAgFAkB,QAAyB,CAACC,aAAD,CAAgBC,cAAhB,CAAgC,CACvD,CAAC,CAAA,CAAGC,OAAA,CAAQ,SAAR,CAAJ,EAAwB,CAAxB,CAA2BC,SAA3B,CACA,KAAIjB,SAAW,CAAC,CAAA,CAAGkB,MAAA,CAAO,SAAP,CAAJ,EAAuBJ,aAAvB,CAAf,CACIb,UAAY,CAAC,CAAA,CAAGiB,MAAA,CAAO,SAAP,CAAJ,EAAuBH,cAAvB,CADhB,CAEII,KAAOpB,eAAA,CAAgBC,QAAhB,CAA0BC,SAA1B,CAFX,CAGImB,WAAaC,IAAAC,IAAA,CAAS,CAAC,CAAA,CAAGC,OAAA,CAAQ,SAAR,CAAJ,EAAwBvB,QAAxB,CAAkCC,SAAlC,CAAT,CACjBD,SAAAwB,QAAA,CAAiBxB,QAAAK,QAAA,EAAjB,CAAsCc,IAAtC,CAA6CC,UAA7C,CAGIK;QAAAA,CAAmBC,MAAA,CAAO3B,eAAA,CAAgBC,QAAhB,CAA0BC,SAA1B,CAAP,GAAgD,CAACkB,IAAjD,CACVA,KAATQ,EAAiBP,UAAjBO,CAA8BF,QAElC,OAAkB,EAAX,GAAAE,IAAA,CAAe,CAAf,CAAmBA,IAZ6B,CA9EzD,KAAIT,OAAStB,sBAAA,CAAuBH,OAAA,CAAQ,+CAAR,CAAvB,CAAb,CAEI8B,QAAU3B,sBAAA,CAAuBH,OAAA,CAAQ,iEAAR,CAAvB,CAFd,CAIIuB,QAAUpB,sBAAA,CAAuBH,OAAA,CAAQ,0DAAR,CAAvB,CAZsG;\",\n\"sources\":[\"node_modules/date-fns/esm/differenceInDays/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$date_fns$esm$differenceInDays$index\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports[\\\"default\\\"] = differenceInDays;\\n\\nvar _index = _interopRequireDefault(require(\\\"../toDate/index.js\\\"));\\n\\nvar _index2 = _interopRequireDefault(require(\\\"../differenceInCalendarDays/index.js\\\"));\\n\\nvar _index3 = _interopRequireDefault(require(\\\"../_lib/requiredArgs/index.js\\\"));\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \\\"default\\\": obj }; }\\n\\n// Like `compareAsc` but uses local time not UTC, which is needed\\n// for accurate equality comparisons of UTC timestamps that end up\\n// having the same representation in local time, e.g. one hour before\\n// DST ends vs. the instant that DST ends.\\nfunction compareLocalAsc(dateLeft, dateRight) {\\n  var diff = dateLeft.getFullYear() - dateRight.getFullYear() || dateLeft.getMonth() - dateRight.getMonth() || dateLeft.getDate() - dateRight.getDate() || dateLeft.getHours() - dateRight.getHours() || dateLeft.getMinutes() - dateRight.getMinutes() || dateLeft.getSeconds() - dateRight.getSeconds() || dateLeft.getMilliseconds() - dateRight.getMilliseconds();\\n\\n  if (diff < 0) {\\n    return -1;\\n  } else if (diff > 0) {\\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\\n  } else {\\n    return diff;\\n  }\\n}\\n/**\\n * @name differenceInDays\\n * @category Day Helpers\\n * @summary Get the number of full days between the given dates.\\n *\\n * @description\\n * Get the number of full day periods between two dates. Fractional days are\\n * truncated towards zero.\\n *\\n * One \\\"full day\\\" is the distance between a local time in one day to the same\\n * local time on the next or previous day. A full day can sometimes be less than\\n * or more than 24 hours if a daylight savings change happens between two dates.\\n *\\n * To ignore DST and only measure exact 24-hour periods, use this instead:\\n * `Math.floor(differenceInHours(dateLeft, dateRight)/24)|0`.\\n *\\n *\\n * ### v2.0.0 breaking changes:\\n *\\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\\n *\\n * @param {Date|Number} dateLeft - the later date\\n * @param {Date|Number} dateRight - the earlier date\\n * @returns {Number} the number of full days according to the local timezone\\n * @throws {TypeError} 2 arguments required\\n *\\n * @example\\n * // How many full days are between\\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\\n * const result = differenceInDays(\\n *   new Date(2012, 6, 2, 0, 0),\\n *   new Date(2011, 6, 2, 23, 0)\\n * )\\n * //=> 365\\n * // How many full days are between\\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\\n * const result = differenceInDays(\\n *   new Date(2011, 6, 3, 0, 1),\\n *   new Date(2011, 6, 2, 23, 59)\\n * )\\n * //=> 0\\n * // How many full days are between\\n * // 1 March 2020 0:00 and 1 June 2020 0:00 ?\\n * // Note: because local time is used, the\\n * // result will always be 92 days, even in\\n * // time zones where DST starts and the\\n * // period has only 92*24-1 hours.\\n * const result = differenceInDays(\\n *   new Date(2020, 5, 1),\\n *   new Date(2020, 2, 1)\\n * )\\n//=> 92\\n */\\n\\n\\nfunction differenceInDays(dirtyDateLeft, dirtyDateRight) {\\n  (0, _index3[\\\"default\\\"])(2, arguments);\\n  var dateLeft = (0, _index[\\\"default\\\"])(dirtyDateLeft);\\n  var dateRight = (0, _index[\\\"default\\\"])(dirtyDateRight);\\n  var sign = compareLocalAsc(dateLeft, dateRight);\\n  var difference = Math.abs((0, _index2[\\\"default\\\"])(dateLeft, dateRight));\\n  dateLeft.setDate(dateLeft.getDate() - sign * difference); // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\\n  // If so, result must be decreased by 1 in absolute value\\n\\n  var isLastDayNotFull = Number(compareLocalAsc(dateLeft, dateRight) === -sign);\\n  var result = sign * (difference - isLastDayNotFull); // Prevent negative zero\\n\\n  return result === 0 ? 0 : result;\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"_interopRequireDefault\",\"obj\",\"__esModule\",\"compareLocalAsc\",\"dateLeft\",\"dateRight\",\"diff\",\"getFullYear\",\"getMonth\",\"getDate\",\"getHours\",\"getMinutes\",\"getSeconds\",\"getMilliseconds\",\"Object\",\"defineProperty\",\"value\",\"differenceInDays\",\"dirtyDateLeft\",\"dirtyDateRight\",\"_index3\",\"arguments\",\"_index\",\"sign\",\"difference\",\"Math\",\"abs\",\"_index2\",\"setDate\",\"isLastDayNotFull\",\"Number\",\"result\"]\n}\n"]