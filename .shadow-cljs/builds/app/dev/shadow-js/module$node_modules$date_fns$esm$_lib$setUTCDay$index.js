["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/date-fns/esm/_lib/setUTCDay/index.js"],"~:js","shadow$provide.module$node_modules$date_fns$esm$_lib$setUTCDay$index=function(global,require,module,exports){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj}}Object.defineProperty(exports,\"__esModule\",{value:!0});exports[\"default\"]=function(dirtyDate,dirtyDay,dirtyOptions){(0,_index3[\"default\"])(2,arguments);var options=dirtyOptions||{},locale=options.locale;locale=locale&&locale.options&&locale.options.weekStartsOn;locale=null==locale?0:(0,_index[\"default\"])(locale);\nlocale=null==options.weekStartsOn?locale:(0,_index[\"default\"])(options.weekStartsOn);if(!(0<=locale&&6>=locale))throw new RangeError(\"weekStartsOn must be between 0 and 6 inclusively\");options=(0,_index2[\"default\"])(dirtyDate);var day=(0,_index[\"default\"])(dirtyDay),currentDay=options.getUTCDay();locale=((day%7+7)%7<locale?7:0)+day-currentDay;options.setUTCDate(options.getUTCDate()+locale);return options};var _index=_interopRequireDefault(require(\"module$node_modules$date_fns$esm$_lib$toInteger$index\")),\n_index2=_interopRequireDefault(require(\"module$node_modules$date_fns$esm$toDate$index\")),_index3=_interopRequireDefault(require(\"module$node_modules$date_fns$esm$_lib$requiredArgs$index\"))}","~:source","shadow$provide[\"module$node_modules$date_fns$esm$_lib$setUTCDay$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = setUTCDay;\n\nvar _index = _interopRequireDefault(require(\"../toInteger/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../../toDate/index.js\"));\n\nvar _index3 = _interopRequireDefault(require(\"../requiredArgs/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n// This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\nfunction setUTCDay(dirtyDate, dirtyDay, dirtyOptions) {\n  (0, _index3[\"default\"])(2, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : (0, _index[\"default\"])(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : (0, _index[\"default\"])(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = (0, _index2[\"default\"])(dirtyDate);\n  var day = (0, _index[\"default\"])(dirtyDay);\n  var currentDay = date.getUTCDay();\n  var remainder = day % 7;\n  var dayIndex = (remainder + 7) % 7;\n  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$date_fns$esm$_lib$requiredArgs$index","~$shadow.js","~$module$node_modules$date_fns$esm$_lib$toInteger$index","~$module$node_modules$date_fns$esm$toDate$index"]],"~:properties",["^5",["__esModule","value"]],"~:compiled-at",1622535540994,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$date_fns$esm$_lib$setUTCDay$index.js\",\n\"lineCount\":3,\n\"mappings\":\"AAAAA,cAAA,sDAAA,CAA0E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAclHC,QAASA,uBAAsB,CAACC,GAAD,CAAM,CAAE,MAAOA,IAAA,EAAOA,GAAAC,WAAP,CAAwBD,GAAxB,CAA8B,CAAE,UAAWA,GAAb,CAAvC,CAXrCE,MAAAC,eAAA,CAAsBL,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CM,MAAO,CAAA,CADoC,CAA7C,CAGAN,QAAA,CAAQ,SAAR,CAAA,CAYAO,QAAkB,CAACC,SAAD,CAAYC,QAAZ,CAAsBC,YAAtB,CAAoC,CACpD,CAAC,CAAA,CAAGC,OAAA,CAAQ,SAAR,CAAJ,EAAwB,CAAxB,CAA2BC,SAA3B,CACA,KAAIC,QAAUH,YAAVG,EAA0B,EAA9B,CACIC,OAASD,OAAAC,OACTC,OAAAA,CAAqBD,MAArBC,EAA+BD,MAAAD,QAA/BE,EAAiDD,MAAAD,QAAAG,aACjDC,OAAAA,CAA4C,IAAtB,EAAAF,MAAA,CAA6B,CAA7B,CAAiC,CAAC,CAAA,CAAGG,MAAA,CAAO,SAAP,CAAJ,EAAuBH,MAAvB,CACvDC;MAAAA,CAAuC,IAAxB,EAAAH,OAAAG,aAAA,CAA+BC,MAA/B,CAAqD,CAAC,CAAA,CAAGC,MAAA,CAAO,SAAP,CAAJ,EAAuBL,OAAAG,aAAvB,CAExE,IAAI,EAAkB,CAAlB,EAAEA,MAAF,EAAuC,CAAvC,EAAuBA,MAAvB,CAAJ,CACE,KAAM,KAAIG,UAAJ,CAAe,kDAAf,CAAN,CAGEC,OAAAA,CAAO,CAAC,CAAA,CAAGC,OAAA,CAAQ,SAAR,CAAJ,EAAwBb,SAAxB,CACX,KAAIc,IAAM,CAAC,CAAA,CAAGJ,MAAA,CAAO,SAAP,CAAJ,EAAuBT,QAAvB,CAAV,CACIc,WAAaH,OAAAI,UAAA,EAGbC,OAAAA,EAAQ,CAFIH,GAEJ,CAFU,CAEV,CADgB,CAChB,EADqB,CACrB,CAAWN,MAAX,CAA0B,CAA1B,CAA8B,CAAtCS,EAA2CH,GAA3CG,CAAiDF,UACrDH,QAAAM,WAAA,CAAgBN,OAAAO,WAAA,EAAhB,CAAoCF,MAApC,CACA,OAAOL,QAnB6C,CAVtD,KAAIF,OAASjB,sBAAA,CAAuBH,OAAA,CAAQ,uDAAR,CAAvB,CAAb;AAEIuB,QAAUpB,sBAAA,CAAuBH,OAAA,CAAQ,+CAAR,CAAvB,CAFd,CAIIa,QAAUV,sBAAA,CAAuBH,OAAA,CAAQ,0DAAR,CAAvB,CAZoG;\",\n\"sources\":[\"node_modules/date-fns/esm/_lib/setUTCDay/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$date_fns$esm$_lib$setUTCDay$index\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports[\\\"default\\\"] = setUTCDay;\\n\\nvar _index = _interopRequireDefault(require(\\\"../toInteger/index.js\\\"));\\n\\nvar _index2 = _interopRequireDefault(require(\\\"../../toDate/index.js\\\"));\\n\\nvar _index3 = _interopRequireDefault(require(\\\"../requiredArgs/index.js\\\"));\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \\\"default\\\": obj }; }\\n\\n// This function will be a part of public API when UTC function will be implemented.\\n// See issue: https://github.com/date-fns/date-fns/issues/376\\nfunction setUTCDay(dirtyDate, dirtyDay, dirtyOptions) {\\n  (0, _index3[\\\"default\\\"])(2, arguments);\\n  var options = dirtyOptions || {};\\n  var locale = options.locale;\\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : (0, _index[\\\"default\\\"])(localeWeekStartsOn);\\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : (0, _index[\\\"default\\\"])(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\\n\\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\\n  }\\n\\n  var date = (0, _index2[\\\"default\\\"])(dirtyDate);\\n  var day = (0, _index[\\\"default\\\"])(dirtyDay);\\n  var currentDay = date.getUTCDay();\\n  var remainder = day % 7;\\n  var dayIndex = (remainder + 7) % 7;\\n  var diff = (dayIndex < weekStartsOn ? 7 : 0) + day - currentDay;\\n  date.setUTCDate(date.getUTCDate() + diff);\\n  return date;\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"_interopRequireDefault\",\"obj\",\"__esModule\",\"Object\",\"defineProperty\",\"value\",\"setUTCDay\",\"dirtyDate\",\"dirtyDay\",\"dirtyOptions\",\"_index3\",\"arguments\",\"options\",\"locale\",\"localeWeekStartsOn\",\"weekStartsOn\",\"defaultWeekStartsOn\",\"_index\",\"RangeError\",\"date\",\"_index2\",\"day\",\"currentDay\",\"getUTCDay\",\"diff\",\"setUTCDate\",\"getUTCDate\"]\n}\n"]