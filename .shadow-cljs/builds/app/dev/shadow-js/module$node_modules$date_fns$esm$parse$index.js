["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/date-fns/esm/parse/index.js"],"~:js","shadow$provide.module$node_modules$date_fns$esm$parse$index=function(global,require,module,exports){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj}}function dateToSystemTimezone(date,flags){if(flags.timestampIsSet)return date;flags=new Date(0);flags.setFullYear(date.getUTCFullYear(),date.getUTCMonth(),date.getUTCDate());flags.setHours(date.getUTCHours(),date.getUTCMinutes(),date.getUTCSeconds(),date.getUTCMilliseconds());return flags}Object.defineProperty(exports,\n\"__esModule\",{value:!0});exports[\"default\"]=function(dirtyDateString,dirtyFormatString,dirtyReferenceDate,dirtyOptions){(0,_index10[\"default\"])(3,arguments);var dateString=String(dirtyDateString),formatString=String(dirtyFormatString),options=dirtyOptions||{},locale=options.locale||_index[\"default\"];if(!locale.match)throw new RangeError(\"locale must contain match property\");var localeFirstWeekContainsDate=locale.options&&locale.options.firstWeekContainsDate;localeFirstWeekContainsDate=null==localeFirstWeekContainsDate?\n1:(0,_index8[\"default\"])(localeFirstWeekContainsDate);localeFirstWeekContainsDate=null==options.firstWeekContainsDate?localeFirstWeekContainsDate:(0,_index8[\"default\"])(options.firstWeekContainsDate);if(!(1<=localeFirstWeekContainsDate&&7>=localeFirstWeekContainsDate))throw new RangeError(\"firstWeekContainsDate must be between 1 and 7 inclusively\");var localeWeekStartsOn=locale.options&&locale.options.weekStartsOn;localeWeekStartsOn=null==localeWeekStartsOn?0:(0,_index8[\"default\"])(localeWeekStartsOn);\nlocaleWeekStartsOn=null==options.weekStartsOn?localeWeekStartsOn:(0,_index8[\"default\"])(options.weekStartsOn);if(!(0<=localeWeekStartsOn&&6>=localeWeekStartsOn))throw new RangeError(\"weekStartsOn must be between 0 and 6 inclusively\");if(\"\"===formatString)return\"\"===dateString?(0,_index3[\"default\"])(dirtyReferenceDate):new Date(NaN);var subFnOptions={firstWeekContainsDate:localeFirstWeekContainsDate,weekStartsOn:localeWeekStartsOn,locale},setters=[{priority:TIMEZONE_UNIT_PRIORITY,subPriority:-1,set:dateToSystemTimezone,\nindex:0}];localeWeekStartsOn=formatString.match(longFormattingTokensRegExp).map(function(substring){var firstCharacter=substring[0];return\"p\"===firstCharacter||\"P\"===firstCharacter?(0,_index5[\"default\"][firstCharacter])(substring,locale.formatLong,subFnOptions):substring}).join(\"\").match(formattingTokensRegExp);var usedTokens=[];for(localeFirstWeekContainsDate=0;localeFirstWeekContainsDate<localeWeekStartsOn.length;localeFirstWeekContainsDate++){var token=localeWeekStartsOn[localeFirstWeekContainsDate];\n!options.useAdditionalWeekYearTokens&&(0,_index7.isProtectedWeekYearToken)(token)&&(0,_index7.throwProtectedError)(token,formatString,dirtyDateString);!options.useAdditionalDayOfYearTokens&&(0,_index7.isProtectedDayOfYearToken)(token)&&(0,_index7.throwProtectedError)(token,formatString,dirtyDateString);var firstCharacter$jscomp$0=token[0],parser=_index9[\"default\"][firstCharacter$jscomp$0];if(parser){var incompatibleTokens=parser.incompatibleTokens;if(Array.isArray(incompatibleTokens)){for(var incompatibleToken=\nvoid 0,_i=0;_i<usedTokens.length;_i++){var usedToken=usedTokens[_i].token;if(-1!==incompatibleTokens.indexOf(usedToken)||usedToken===firstCharacter$jscomp$0){incompatibleToken=usedTokens[_i];break}}if(incompatibleToken)throw new RangeError(\"The format string mustn't contain `\".concat(incompatibleToken.fullToken,\"` and `\").concat(token,\"` at the same time\"));}else if(\"*\"===parser.incompatibleTokens&&usedTokens.length)throw new RangeError(\"The format string mustn't contain `\".concat(token,\"` and any other token at the same time\"));\nusedTokens.push({token:firstCharacter$jscomp$0,fullToken:token});dateString=parser.parse(dateString,token,locale.match,subFnOptions);if(!dateString)return new Date(NaN);setters.push({priority:parser.priority,subPriority:parser.subPriority||0,set:parser.set,validate:parser.validate,value:dateString.value,index:setters.length});dateString=dateString.rest}else{if(firstCharacter$jscomp$0.match(unescapedLatinCharacterRegExp))throw new RangeError(\"Format string contains an unescaped latin alphabet character `\"+\nfirstCharacter$jscomp$0+\"`\");\"''\"===token?token=\"'\":\"'\"===firstCharacter$jscomp$0&&(token=token.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp,\"'\"));if(0===dateString.indexOf(token))dateString=dateString.slice(token.length);else return new Date(NaN)}}if(0<dateString.length&&notWhitespaceRegExp.test(dateString))return new Date(NaN);formatString=setters.map(function(setter){return setter.priority}).sort(function(a,b){return b-a}).filter(function(priority,index,array){return array.indexOf(priority)===\nindex}).map(function(priority){return setters.filter(function(setter){return setter.priority===priority}).sort(function(a,b){return b.subPriority-a.subPriority})}).map(function(setterArray){return setterArray[0]});options=(0,_index3[\"default\"])(dirtyReferenceDate);if(isNaN(options))return new Date(NaN);options=(0,_index2[\"default\"])(options,(0,_index6[\"default\"])(options));dateString={};for(localeFirstWeekContainsDate=0;localeFirstWeekContainsDate<formatString.length;localeFirstWeekContainsDate++){localeWeekStartsOn=\nformatString[localeFirstWeekContainsDate];if(localeWeekStartsOn.validate&&!localeWeekStartsOn.validate(options,localeWeekStartsOn.value,subFnOptions))return new Date(NaN);localeWeekStartsOn=localeWeekStartsOn.set(options,dateString,localeWeekStartsOn.value,subFnOptions);localeWeekStartsOn[0]?(options=localeWeekStartsOn[0],(0,_index4[\"default\"])(dateString,localeWeekStartsOn[1])):options=localeWeekStartsOn}return options};var _index=_interopRequireDefault(require(\"module$node_modules$date_fns$esm$locale$en_US$index\")),\n_index2=_interopRequireDefault(require(\"module$node_modules$date_fns$esm$subMilliseconds$index\")),_index3=_interopRequireDefault(require(\"module$node_modules$date_fns$esm$toDate$index\")),_index4=_interopRequireDefault(require(\"module$node_modules$date_fns$esm$_lib$assign$index\")),_index5=_interopRequireDefault(require(\"module$node_modules$date_fns$esm$_lib$format$longFormatters$index\")),_index6=_interopRequireDefault(require(\"module$node_modules$date_fns$esm$_lib$getTimezoneOffsetInMilliseconds$index\")),\n_index7=require(\"module$node_modules$date_fns$esm$_lib$protectedTokens$index\"),_index8=_interopRequireDefault(require(\"module$node_modules$date_fns$esm$_lib$toInteger$index\")),_index9=_interopRequireDefault(require(\"module$node_modules$date_fns$esm$parse$_lib$parsers$index\")),_index10=_interopRequireDefault(require(\"module$node_modules$date_fns$esm$_lib$requiredArgs$index\")),TIMEZONE_UNIT_PRIORITY=10,formattingTokensRegExp=/[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g,longFormattingTokensRegExp=\n/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,escapedStringRegExp=/^'([^]*?)'?$/,doubleQuoteRegExp=/''/g,notWhitespaceRegExp=/\\S/,unescapedLatinCharacterRegExp=/[a-zA-Z]/}","~:source","shadow$provide[\"module$node_modules$date_fns$esm$parse$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = parse;\n\nvar _index = _interopRequireDefault(require(\"../locale/en-US/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../subMilliseconds/index.js\"));\n\nvar _index3 = _interopRequireDefault(require(\"../toDate/index.js\"));\n\nvar _index4 = _interopRequireDefault(require(\"../_lib/assign/index.js\"));\n\nvar _index5 = _interopRequireDefault(require(\"../_lib/format/longFormatters/index.js\"));\n\nvar _index6 = _interopRequireDefault(require(\"../_lib/getTimezoneOffsetInMilliseconds/index.js\"));\n\nvar _index7 = require(\"../_lib/protectedTokens/index.js\");\n\nvar _index8 = _interopRequireDefault(require(\"../_lib/toInteger/index.js\"));\n\nvar _index9 = _interopRequireDefault(require(\"./_lib/parsers/index.js\"));\n\nvar _index10 = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar TIMEZONE_UNIT_PRIORITY = 10; // This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\n\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\n\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'([^]*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar notWhitespaceRegExp = /\\S/;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n/**\n * @name parse\n * @category Common Helpers\n * @summary Parse the date.\n *\n * @description\n * Return the date parsed from string using the given format string.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters in the format string wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n *\n * Format of the format string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 5 below the table).\n *\n * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited\n * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:\n *\n * ```javascript\n * parse('23 AM', 'HH a', new Date())\n * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time\n * ```\n *\n * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true\n *\n * Accepted format string patterns:\n * | Unit                            |Prior| Pattern | Result examples                   | Notes |\n * |---------------------------------|-----|---------|-----------------------------------|-------|\n * | Era                             | 140 | G..GGG  | AD, BC                            |       |\n * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 |     | GGGGG   | A, B                              |       |\n * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |\n * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |\n * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |\n * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |\n * |                                 |     | yyyyy   | ...                               | 2,4   |\n * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |\n * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\n * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |\n * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |\n * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |\n * |                                 |     | YYYYY   | ...                               | 2,4   |\n * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |\n * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |\n * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |\n * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |\n * |                                 |     | RRRRR   | ...                               | 2,4,5 |\n * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |\n * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |\n * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |\n * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |\n * |                                 |     | uuuuu   | ...                               | 2,4   |\n * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |\n * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | QQ      | 01, 02, 03, 04                    |       |\n * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |\n * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |\n * |                                 |     | qq      | 01, 02, 03, 04                    |       |\n * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |\n * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |\n * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | MM      | 01, 02, ..., 12                   |       |\n * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | MMMM    | January, February, ..., December  | 2     |\n * |                                 |     | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |\n * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |\n * |                                 |     | LL      | 01, 02, ..., 12                   |       |\n * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 |     | LLLL    | January, February, ..., December  | 2     |\n * |                                 |     | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |\n * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |\n * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |\n * |                                 |     | II      | 01, 02, ..., 53                   | 5     |\n * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |\n * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |\n * |                                 |     | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |\n * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |\n * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |\n * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 |     | DDDD    | ...                               | 2     |\n * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |\n * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |\n * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |\n * |                                 |     | iii     | Mon, Tue, Wed, ..., Sun           | 5     |\n * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |\n * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |\n * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 5     |\n * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | ee      | 02, 03, ..., 01                   |       |\n * |                                 |     | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |\n * |                                 |     | cc      | 02, 03, ..., 01                   |       |\n * |                                 |     | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\n * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |\n * |                                 |     | aaaa    | a.m., p.m.                        | 2     |\n * |                                 |     | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |\n * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 |     | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |\n * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 |     | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |\n * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |\n * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |\n * |                                 |     | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |\n * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |\n * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | mm      | 00, 01, ..., 59                   |       |\n * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |\n * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |\n * |                                 |     | ss      | 00, 01, ..., 59                   |       |\n * | Seconds timestamp               |  40 | t       | 512969520                         |       |\n * |                                 |     | tt      | ...                               | 2     |\n * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |\n * |                                 |     | SS      | 00, 01, ..., 99                   |       |\n * |                                 |     | SSS     | 000, 0001, ..., 999               |       |\n * |                                 |     | SSSS    | ...                               | 2     |\n * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |\n * |                                 |     | TT      | ...                               | 2     |\n * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |\n * |                                 |     | XX      | -0800, +0530, Z                   |       |\n * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |\n * |                                 |     | xx      | -0800, +0530, +0000               |       |\n * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |\n * |                                 |     | PP      | May 29, 1453                      |       |\n * |                                 |     | PPP     | May 29th, 1453                    |       |\n * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |\n * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |\n * |                                 |     | pp      | 12:00:00 AM                       |       |\n * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |\n * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |\n * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |\n * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular.\n *    In `format` function, they will produce different result:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n *    `parse` will try to match both formatting and stand-alone units interchangably.\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table:\n *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number\n *      as wide as the sequence\n *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.\n *      These variations are marked with \"2\" in the last column of the table.\n *\n * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 4. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:\n *\n *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`\n *\n *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`\n *\n *    while `uu` will just assign the year as is:\n *\n *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`\n *\n *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [setISOWeekYear]{@link https://date-fns.org/docs/setISOWeekYear}\n *    and [setWeekYear]{@link https://date-fns.org/docs/setWeekYear}).\n *\n * 5. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 7. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based\n *    on the given locale.\n *\n *    using `en-US` locale: `P` => `MM/dd/yyyy`\n *    using `en-US` locale: `p` => `hh:mm a`\n *    using `pt-BR` locale: `P` => `dd/MM/yyyy`\n *    using `pt-BR` locale: `p` => `HH:mm`\n *\n * Values will be assigned to the date in the descending order of its unit's priority.\n * Units of an equal priority overwrite each other in the order of appearance.\n *\n * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),\n * the values will be taken from 3rd argument `referenceDate` which works as a context of parsing.\n *\n * `referenceDate` must be passed for correct work of the function.\n * If you're not sure which `referenceDate` to supply, create a new instance of Date:\n * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`\n * In this case parsing will be done in the context of the current date.\n * If `referenceDate` is `Invalid Date` or a value not convertible to valid `Date`,\n * then `Invalid Date` will be returned.\n *\n * The result may vary by locale.\n *\n * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.\n *\n * If parsing failed, `Invalid Date` will be returned.\n * Invalid Date is a Date, whose time value is NaN.\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Old `parse` was renamed to `toDate`.\n *   Now `parse` is a new function which parses a string using a provided format.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   parse('2016-01-01')\n *\n *   // v2.0.0 onward (toDate no longer accepts a string)\n *   toDate(1392098430000) // Unix to timestamp\n *   toDate(new Date(2014, 1, 11, 11, 30, 30)) // Cloning the date\n *   parse('2016-01-01', 'yyyy-MM-dd', new Date())\n *   ```\n *\n * @param {String} dateString - the string to parse\n * @param {String} formatString - the string of tokens\n * @param {Date|Number} referenceDate - defines values missing from the parsed dateString\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://git.io/fxCyr\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://git.io/fxCyr\n * @returns {Date} the parsed date\n * @throws {TypeError} 3 arguments required\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} `options.locale` must contain `match` property\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Parse 11 February 2014 from middle-endian format:\n * var result = parse('02/11/2014', 'MM/dd/yyyy', new Date())\n * //=> Tue Feb 11 2014 00:00:00\n *\n * @example\n * // Parse 28th of February in Esperanto locale in the context of 2010 year:\n * import eo from 'date-fns/locale/eo'\n * var result = parse('28-a de februaro', \"do 'de' MMMM\", new Date(2010, 0, 1), {\n *   locale: eo\n * })\n * //=> Sun Feb 28 2010 00:00:00\n */\n\nfunction parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, dirtyOptions) {\n  (0, _index10[\"default\"])(3, arguments);\n  var dateString = String(dirtyDateString);\n  var formatString = String(dirtyFormatString);\n  var options = dirtyOptions || {};\n  var locale = options.locale || _index[\"default\"];\n\n  if (!locale.match) {\n    throw new RangeError('locale must contain match property');\n  }\n\n  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : (0, _index8[\"default\"])(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : (0, _index8[\"default\"])(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : (0, _index8[\"default\"])(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : (0, _index8[\"default\"])(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  if (formatString === '') {\n    if (dateString === '') {\n      return (0, _index3[\"default\"])(dirtyReferenceDate);\n    } else {\n      return new Date(NaN);\n    }\n  }\n\n  var subFnOptions = {\n    firstWeekContainsDate: firstWeekContainsDate,\n    weekStartsOn: weekStartsOn,\n    locale: locale // If timezone isn't specified, it will be set to the system timezone\n\n  };\n  var setters = [{\n    priority: TIMEZONE_UNIT_PRIORITY,\n    subPriority: -1,\n    set: dateToSystemTimezone,\n    index: 0\n  }];\n  var i;\n  var tokens = formatString.match(longFormattingTokensRegExp).map(function (substring) {\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === 'p' || firstCharacter === 'P') {\n      var longFormatter = _index5[\"default\"][firstCharacter];\n      return longFormatter(substring, locale.formatLong, subFnOptions);\n    }\n\n    return substring;\n  }).join('').match(formattingTokensRegExp);\n  var usedTokens = [];\n\n  for (i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n\n    if (!options.useAdditionalWeekYearTokens && (0, _index7.isProtectedWeekYearToken)(token)) {\n      (0, _index7.throwProtectedError)(token, formatString, dirtyDateString);\n    }\n\n    if (!options.useAdditionalDayOfYearTokens && (0, _index7.isProtectedDayOfYearToken)(token)) {\n      (0, _index7.throwProtectedError)(token, formatString, dirtyDateString);\n    }\n\n    var firstCharacter = token[0];\n    var parser = _index9[\"default\"][firstCharacter];\n\n    if (parser) {\n      var incompatibleTokens = parser.incompatibleTokens;\n\n      if (Array.isArray(incompatibleTokens)) {\n        var incompatibleToken = void 0;\n\n        for (var _i = 0; _i < usedTokens.length; _i++) {\n          var usedToken = usedTokens[_i].token;\n\n          if (incompatibleTokens.indexOf(usedToken) !== -1 || usedToken === firstCharacter) {\n            incompatibleToken = usedTokens[_i];\n            break;\n          }\n        }\n\n        if (incompatibleToken) {\n          throw new RangeError(\"The format string mustn't contain `\".concat(incompatibleToken.fullToken, \"` and `\").concat(token, \"` at the same time\"));\n        }\n      } else if (parser.incompatibleTokens === '*' && usedTokens.length) {\n        throw new RangeError(\"The format string mustn't contain `\".concat(token, \"` and any other token at the same time\"));\n      }\n\n      usedTokens.push({\n        token: firstCharacter,\n        fullToken: token\n      });\n      var parseResult = parser.parse(dateString, token, locale.match, subFnOptions);\n\n      if (!parseResult) {\n        return new Date(NaN);\n      }\n\n      setters.push({\n        priority: parser.priority,\n        subPriority: parser.subPriority || 0,\n        set: parser.set,\n        validate: parser.validate,\n        value: parseResult.value,\n        index: setters.length\n      });\n      dateString = parseResult.rest;\n    } else {\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n        throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n      } // Replace two single quote characters with one single quote character\n\n\n      if (token === \"''\") {\n        token = \"'\";\n      } else if (firstCharacter === \"'\") {\n        token = cleanEscapedString(token);\n      } // Cut token from string, or, if string doesn't match the token, return Invalid Date\n\n\n      if (dateString.indexOf(token) === 0) {\n        dateString = dateString.slice(token.length);\n      } else {\n        return new Date(NaN);\n      }\n    }\n  } // Check if the remaining input contains something other than whitespace\n\n\n  if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {\n    return new Date(NaN);\n  }\n\n  var uniquePrioritySetters = setters.map(function (setter) {\n    return setter.priority;\n  }).sort(function (a, b) {\n    return b - a;\n  }).filter(function (priority, index, array) {\n    return array.indexOf(priority) === index;\n  }).map(function (priority) {\n    return setters.filter(function (setter) {\n      return setter.priority === priority;\n    }).sort(function (a, b) {\n      return b.subPriority - a.subPriority;\n    });\n  }).map(function (setterArray) {\n    return setterArray[0];\n  });\n  var date = (0, _index3[\"default\"])(dirtyReferenceDate);\n\n  if (isNaN(date)) {\n    return new Date(NaN);\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/37\n\n\n  var utcDate = (0, _index2[\"default\"])(date, (0, _index6[\"default\"])(date));\n  var flags = {};\n\n  for (i = 0; i < uniquePrioritySetters.length; i++) {\n    var setter = uniquePrioritySetters[i];\n\n    if (setter.validate && !setter.validate(utcDate, setter.value, subFnOptions)) {\n      return new Date(NaN);\n    }\n\n    var result = setter.set(utcDate, flags, setter.value, subFnOptions); // Result is tuple (date, flags)\n\n    if (result[0]) {\n      utcDate = result[0];\n      (0, _index4[\"default\"])(flags, result[1]); // Result is date\n    } else {\n      utcDate = result;\n    }\n  }\n\n  return utcDate;\n}\n\nfunction dateToSystemTimezone(date, flags) {\n  if (flags.timestampIsSet) {\n    return date;\n  }\n\n  var convertedDate = new Date(0);\n  convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());\n  convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());\n  return convertedDate;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$date_fns$esm$_lib$getTimezoneOffsetInMilliseconds$index","~$module$node_modules$date_fns$esm$_lib$requiredArgs$index","~$module$node_modules$date_fns$esm$locale$en_US$index","~$module$node_modules$date_fns$esm$_lib$assign$index","~$module$node_modules$date_fns$esm$_lib$protectedTokens$index","~$shadow.js","~$module$node_modules$date_fns$esm$_lib$format$longFormatters$index","~$module$node_modules$date_fns$esm$parse$_lib$parsers$index","~$module$node_modules$date_fns$esm$_lib$toInteger$index","~$module$node_modules$date_fns$esm$toDate$index","~$module$node_modules$date_fns$esm$subMilliseconds$index"]],"~:properties",["^5",["priority","token","index","validate","__esModule","firstWeekContainsDate","fullToken","locale","value","set","weekStartsOn","subPriority"]],"~:compiled-at",1622535541004,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$date_fns$esm$parse$index.js\",\n\"lineCount\":14,\n\"mappings\":\"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\",\n\"sources\":[\"node_modules/date-fns/esm/parse/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$date_fns$esm$parse$index\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports[\\\"default\\\"] = parse;\\n\\nvar _index = _interopRequireDefault(require(\\\"../locale/en-US/index.js\\\"));\\n\\nvar _index2 = _interopRequireDefault(require(\\\"../subMilliseconds/index.js\\\"));\\n\\nvar _index3 = _interopRequireDefault(require(\\\"../toDate/index.js\\\"));\\n\\nvar _index4 = _interopRequireDefault(require(\\\"../_lib/assign/index.js\\\"));\\n\\nvar _index5 = _interopRequireDefault(require(\\\"../_lib/format/longFormatters/index.js\\\"));\\n\\nvar _index6 = _interopRequireDefault(require(\\\"../_lib/getTimezoneOffsetInMilliseconds/index.js\\\"));\\n\\nvar _index7 = require(\\\"../_lib/protectedTokens/index.js\\\");\\n\\nvar _index8 = _interopRequireDefault(require(\\\"../_lib/toInteger/index.js\\\"));\\n\\nvar _index9 = _interopRequireDefault(require(\\\"./_lib/parsers/index.js\\\"));\\n\\nvar _index10 = _interopRequireDefault(require(\\\"../_lib/requiredArgs/index.js\\\"));\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \\\"default\\\": obj }; }\\n\\nvar TIMEZONE_UNIT_PRIORITY = 10; // This RegExp consists of three parts separated by `|`:\\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\\n//   (one of the certain letters followed by `o`)\\n// - (\\\\w)\\\\1* matches any sequences of the same letter\\n// - '' matches two quote characters in a row\\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\\n//   except a single quote symbol, which ends the sequence.\\n//   Two quote characters do not end the sequence.\\n//   If there is no matching single quote\\n//   then the sequence will continue until the end of the string.\\n// - . matches any single character unmatched by previous parts of the RegExps\\n\\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\\\w)\\\\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also\\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\\n\\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\\nvar escapedStringRegExp = /^'([^]*?)'?$/;\\nvar doubleQuoteRegExp = /''/g;\\nvar notWhitespaceRegExp = /\\\\S/;\\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\\n/**\\n * @name parse\\n * @category Common Helpers\\n * @summary Parse the date.\\n *\\n * @description\\n * Return the date parsed from string using the given format string.\\n *\\n * > \\u26a0\\ufe0f Please note that the `format` tokens differ from Moment.js and other libraries.\\n * > See: https://git.io/fxCyr\\n *\\n * The characters in the format string wrapped between two single quotes characters (') are escaped.\\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\\n *\\n * Format of the format string is based on Unicode Technical Standard #35:\\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\\n * with a few additions (see note 5 below the table).\\n *\\n * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited\\n * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:\\n *\\n * ```javascript\\n * parse('23 AM', 'HH a', new Date())\\n * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time\\n * ```\\n *\\n * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true\\n *\\n * Accepted format string patterns:\\n * | Unit                            |Prior| Pattern | Result examples                   | Notes |\\n * |---------------------------------|-----|---------|-----------------------------------|-------|\\n * | Era                             | 140 | G..GGG  | AD, BC                            |       |\\n * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |\\n * |                                 |     | GGGGG   | A, B                              |       |\\n * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |\\n * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\\n * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |\\n * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |\\n * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |\\n * |                                 |     | yyyyy   | ...                               | 2,4   |\\n * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |\\n * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |\\n * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |\\n * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |\\n * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |\\n * |                                 |     | YYYYY   | ...                               | 2,4   |\\n * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |\\n * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |\\n * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |\\n * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |\\n * |                                 |     | RRRRR   | ...                               | 2,4,5 |\\n * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |\\n * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |\\n * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |\\n * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |\\n * |                                 |     | uuuuu   | ...                               | 2,4   |\\n * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |\\n * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |\\n * |                                 |     | QQ      | 01, 02, 03, 04                    |       |\\n * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |\\n * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\\n * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |\\n * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |\\n * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |\\n * |                                 |     | qq      | 01, 02, 03, 04                    |       |\\n * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |\\n * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\\n * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |\\n * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |\\n * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |\\n * |                                 |     | MM      | 01, 02, ..., 12                   |       |\\n * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |\\n * |                                 |     | MMMM    | January, February, ..., December  | 2     |\\n * |                                 |     | MMMMM   | J, F, ..., D                      |       |\\n * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |\\n * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |\\n * |                                 |     | LL      | 01, 02, ..., 12                   |       |\\n * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |\\n * |                                 |     | LLLL    | January, February, ..., December  | 2     |\\n * |                                 |     | LLLLL   | J, F, ..., D                      |       |\\n * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |\\n * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |\\n * |                                 |     | ww      | 01, 02, ..., 53                   |       |\\n * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |\\n * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |\\n * |                                 |     | II      | 01, 02, ..., 53                   | 5     |\\n * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |\\n * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |\\n * |                                 |     | dd      | 01, 02, ..., 31                   |       |\\n * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |\\n * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |\\n * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |\\n * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |\\n * |                                 |     | DDDD    | ...                               | 2     |\\n * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\\n * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\\n * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |\\n * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\\n * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |\\n * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |\\n * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |\\n * |                                 |     | iii     | Mon, Tue, Wed, ..., Sun           | 5     |\\n * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |\\n * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |\\n * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 5     |\\n * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |\\n * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |\\n * |                                 |     | ee      | 02, 03, ..., 01                   |       |\\n * |                                 |     | eee     | Mon, Tue, Wed, ..., Sun           |       |\\n * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\\n * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |\\n * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\\n * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |\\n * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |\\n * |                                 |     | cc      | 02, 03, ..., 01                   |       |\\n * |                                 |     | ccc     | Mon, Tue, Wed, ..., Sun           |       |\\n * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\\n * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |\\n * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |\\n * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |\\n * |                                 |     | aaaa    | a.m., p.m.                        | 2     |\\n * |                                 |     | aaaaa   | a, p                              |       |\\n * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |\\n * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |\\n * |                                 |     | bbbbb   | a, p, n, mi                       |       |\\n * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |\\n * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |\\n * |                                 |     | BBBBB   | at night, in the morning, ...     |       |\\n * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |\\n * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |\\n * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |\\n * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |\\n * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |\\n * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |\\n * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |\\n * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |\\n * |                                 |     | KK      | 01, 02, ..., 11, 00               |       |\\n * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |\\n * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |\\n * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |\\n * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |\\n * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |\\n * |                                 |     | mm      | 00, 01, ..., 59                   |       |\\n * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |\\n * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |\\n * |                                 |     | ss      | 00, 01, ..., 59                   |       |\\n * | Seconds timestamp               |  40 | t       | 512969520                         |       |\\n * |                                 |     | tt      | ...                               | 2     |\\n * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |\\n * |                                 |     | SS      | 00, 01, ..., 99                   |       |\\n * |                                 |     | SSS     | 000, 0001, ..., 999               |       |\\n * |                                 |     | SSSS    | ...                               | 2     |\\n * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |\\n * |                                 |     | TT      | ...                               | 2     |\\n * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |\\n * |                                 |     | XX      | -0800, +0530, Z                   |       |\\n * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |\\n * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |\\n * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\\n * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |\\n * |                                 |     | xx      | -0800, +0530, +0000               |       |\\n * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |\\n * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |\\n * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\\n * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |\\n * |                                 |     | PP      | May 29, 1453                      |       |\\n * |                                 |     | PPP     | May 29th, 1453                    |       |\\n * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |\\n * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |\\n * |                                 |     | pp      | 12:00:00 AM                       |       |\\n * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |\\n * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |\\n * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |\\n * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |\\n * Notes:\\n * 1. \\\"Formatting\\\" units (e.g. formatting quarter) in the default en-US locale\\n *    are the same as \\\"stand-alone\\\" units, but are different in some languages.\\n *    \\\"Formatting\\\" units are declined according to the rules of the language\\n *    in the context of a date. \\\"Stand-alone\\\" units are always nominative singular.\\n *    In `format` function, they will produce different result:\\n *\\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\\n *\\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\\n *\\n *    `parse` will try to match both formatting and stand-alone units interchangably.\\n *\\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\\n *    the single quote characters (see below).\\n *    If the sequence is longer than listed in table:\\n *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number\\n *      as wide as the sequence\\n *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.\\n *      These variations are marked with \\\"2\\\" in the last column of the table.\\n *\\n * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\\n *    These tokens represent the shortest form of the quarter.\\n *\\n * 4. The main difference between `y` and `u` patterns are B.C. years:\\n *\\n *    | Year | `y` | `u` |\\n *    |------|-----|-----|\\n *    | AC 1 |   1 |   1 |\\n *    | BC 1 |   1 |   0 |\\n *    | BC 2 |   2 |  -1 |\\n *\\n *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:\\n *\\n *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`\\n *\\n *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`\\n *\\n *    while `uu` will just assign the year as is:\\n *\\n *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`\\n *\\n *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`\\n *\\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\\n *    except local week-numbering years are dependent on `options.weekStartsOn`\\n *    and `options.firstWeekContainsDate` (compare [setISOWeekYear]{@link https://date-fns.org/docs/setISOWeekYear}\\n *    and [setWeekYear]{@link https://date-fns.org/docs/setWeekYear}).\\n *\\n * 5. These patterns are not in the Unicode Technical Standard #35:\\n *    - `i`: ISO day of week\\n *    - `I`: ISO week of year\\n *    - `R`: ISO week-numbering year\\n *    - `o`: ordinal number modifier\\n *    - `P`: long localized date\\n *    - `p`: long localized time\\n *\\n * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr\\n *\\n * 7. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.\\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr\\n *\\n * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based\\n *    on the given locale.\\n *\\n *    using `en-US` locale: `P` => `MM/dd/yyyy`\\n *    using `en-US` locale: `p` => `hh:mm a`\\n *    using `pt-BR` locale: `P` => `dd/MM/yyyy`\\n *    using `pt-BR` locale: `p` => `HH:mm`\\n *\\n * Values will be assigned to the date in the descending order of its unit's priority.\\n * Units of an equal priority overwrite each other in the order of appearance.\\n *\\n * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),\\n * the values will be taken from 3rd argument `referenceDate` which works as a context of parsing.\\n *\\n * `referenceDate` must be passed for correct work of the function.\\n * If you're not sure which `referenceDate` to supply, create a new instance of Date:\\n * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`\\n * In this case parsing will be done in the context of the current date.\\n * If `referenceDate` is `Invalid Date` or a value not convertible to valid `Date`,\\n * then `Invalid Date` will be returned.\\n *\\n * The result may vary by locale.\\n *\\n * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.\\n *\\n * If parsing failed, `Invalid Date` will be returned.\\n * Invalid Date is a Date, whose time value is NaN.\\n * Time value of Date: http://es5.github.io/#x15.9.1.1\\n *\\n * ### v2.0.0 breaking changes:\\n *\\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\\n *\\n * - Old `parse` was renamed to `toDate`.\\n *   Now `parse` is a new function which parses a string using a provided format.\\n *\\n *   ```javascript\\n *   // Before v2.0.0\\n *   parse('2016-01-01')\\n *\\n *   // v2.0.0 onward (toDate no longer accepts a string)\\n *   toDate(1392098430000) // Unix to timestamp\\n *   toDate(new Date(2014, 1, 11, 11, 30, 30)) // Cloning the date\\n *   parse('2016-01-01', 'yyyy-MM-dd', new Date())\\n *   ```\\n *\\n * @param {String} dateString - the string to parse\\n * @param {String} formatString - the string of tokens\\n * @param {Date|Number} referenceDate - defines values missing from the parsed dateString\\n * @param {Object} [options] - an object with options.\\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\\n * @param {1|2|3|4|5|6|7} [options.firstWeekContainsDate=1] - the day of January, which is always in the first week of the year\\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\\n *   see: https://git.io/fxCyr\\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\\n *   see: https://git.io/fxCyr\\n * @returns {Date} the parsed date\\n * @throws {TypeError} 3 arguments required\\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\\n * @throws {RangeError} `options.locale` must contain `match` property\\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\\n * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\\n * @throws {RangeError} format string contains an unescaped latin alphabet character\\n *\\n * @example\\n * // Parse 11 February 2014 from middle-endian format:\\n * var result = parse('02/11/2014', 'MM/dd/yyyy', new Date())\\n * //=> Tue Feb 11 2014 00:00:00\\n *\\n * @example\\n * // Parse 28th of February in Esperanto locale in the context of 2010 year:\\n * import eo from 'date-fns/locale/eo'\\n * var result = parse('28-a de februaro', \\\"do 'de' MMMM\\\", new Date(2010, 0, 1), {\\n *   locale: eo\\n * })\\n * //=> Sun Feb 28 2010 00:00:00\\n */\\n\\nfunction parse(dirtyDateString, dirtyFormatString, dirtyReferenceDate, dirtyOptions) {\\n  (0, _index10[\\\"default\\\"])(3, arguments);\\n  var dateString = String(dirtyDateString);\\n  var formatString = String(dirtyFormatString);\\n  var options = dirtyOptions || {};\\n  var locale = options.locale || _index[\\\"default\\\"];\\n\\n  if (!locale.match) {\\n    throw new RangeError('locale must contain match property');\\n  }\\n\\n  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;\\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : (0, _index8[\\\"default\\\"])(localeFirstWeekContainsDate);\\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : (0, _index8[\\\"default\\\"])(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\\n\\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\\n  }\\n\\n  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;\\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : (0, _index8[\\\"default\\\"])(localeWeekStartsOn);\\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : (0, _index8[\\\"default\\\"])(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\\n\\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\\n  }\\n\\n  if (formatString === '') {\\n    if (dateString === '') {\\n      return (0, _index3[\\\"default\\\"])(dirtyReferenceDate);\\n    } else {\\n      return new Date(NaN);\\n    }\\n  }\\n\\n  var subFnOptions = {\\n    firstWeekContainsDate: firstWeekContainsDate,\\n    weekStartsOn: weekStartsOn,\\n    locale: locale // If timezone isn't specified, it will be set to the system timezone\\n\\n  };\\n  var setters = [{\\n    priority: TIMEZONE_UNIT_PRIORITY,\\n    subPriority: -1,\\n    set: dateToSystemTimezone,\\n    index: 0\\n  }];\\n  var i;\\n  var tokens = formatString.match(longFormattingTokensRegExp).map(function (substring) {\\n    var firstCharacter = substring[0];\\n\\n    if (firstCharacter === 'p' || firstCharacter === 'P') {\\n      var longFormatter = _index5[\\\"default\\\"][firstCharacter];\\n      return longFormatter(substring, locale.formatLong, subFnOptions);\\n    }\\n\\n    return substring;\\n  }).join('').match(formattingTokensRegExp);\\n  var usedTokens = [];\\n\\n  for (i = 0; i < tokens.length; i++) {\\n    var token = tokens[i];\\n\\n    if (!options.useAdditionalWeekYearTokens && (0, _index7.isProtectedWeekYearToken)(token)) {\\n      (0, _index7.throwProtectedError)(token, formatString, dirtyDateString);\\n    }\\n\\n    if (!options.useAdditionalDayOfYearTokens && (0, _index7.isProtectedDayOfYearToken)(token)) {\\n      (0, _index7.throwProtectedError)(token, formatString, dirtyDateString);\\n    }\\n\\n    var firstCharacter = token[0];\\n    var parser = _index9[\\\"default\\\"][firstCharacter];\\n\\n    if (parser) {\\n      var incompatibleTokens = parser.incompatibleTokens;\\n\\n      if (Array.isArray(incompatibleTokens)) {\\n        var incompatibleToken = void 0;\\n\\n        for (var _i = 0; _i < usedTokens.length; _i++) {\\n          var usedToken = usedTokens[_i].token;\\n\\n          if (incompatibleTokens.indexOf(usedToken) !== -1 || usedToken === firstCharacter) {\\n            incompatibleToken = usedTokens[_i];\\n            break;\\n          }\\n        }\\n\\n        if (incompatibleToken) {\\n          throw new RangeError(\\\"The format string mustn't contain `\\\".concat(incompatibleToken.fullToken, \\\"` and `\\\").concat(token, \\\"` at the same time\\\"));\\n        }\\n      } else if (parser.incompatibleTokens === '*' && usedTokens.length) {\\n        throw new RangeError(\\\"The format string mustn't contain `\\\".concat(token, \\\"` and any other token at the same time\\\"));\\n      }\\n\\n      usedTokens.push({\\n        token: firstCharacter,\\n        fullToken: token\\n      });\\n      var parseResult = parser.parse(dateString, token, locale.match, subFnOptions);\\n\\n      if (!parseResult) {\\n        return new Date(NaN);\\n      }\\n\\n      setters.push({\\n        priority: parser.priority,\\n        subPriority: parser.subPriority || 0,\\n        set: parser.set,\\n        validate: parser.validate,\\n        value: parseResult.value,\\n        index: setters.length\\n      });\\n      dateString = parseResult.rest;\\n    } else {\\n      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\\n        throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\\n      } // Replace two single quote characters with one single quote character\\n\\n\\n      if (token === \\\"''\\\") {\\n        token = \\\"'\\\";\\n      } else if (firstCharacter === \\\"'\\\") {\\n        token = cleanEscapedString(token);\\n      } // Cut token from string, or, if string doesn't match the token, return Invalid Date\\n\\n\\n      if (dateString.indexOf(token) === 0) {\\n        dateString = dateString.slice(token.length);\\n      } else {\\n        return new Date(NaN);\\n      }\\n    }\\n  } // Check if the remaining input contains something other than whitespace\\n\\n\\n  if (dateString.length > 0 && notWhitespaceRegExp.test(dateString)) {\\n    return new Date(NaN);\\n  }\\n\\n  var uniquePrioritySetters = setters.map(function (setter) {\\n    return setter.priority;\\n  }).sort(function (a, b) {\\n    return b - a;\\n  }).filter(function (priority, index, array) {\\n    return array.indexOf(priority) === index;\\n  }).map(function (priority) {\\n    return setters.filter(function (setter) {\\n      return setter.priority === priority;\\n    }).sort(function (a, b) {\\n      return b.subPriority - a.subPriority;\\n    });\\n  }).map(function (setterArray) {\\n    return setterArray[0];\\n  });\\n  var date = (0, _index3[\\\"default\\\"])(dirtyReferenceDate);\\n\\n  if (isNaN(date)) {\\n    return new Date(NaN);\\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/37\\n\\n\\n  var utcDate = (0, _index2[\\\"default\\\"])(date, (0, _index6[\\\"default\\\"])(date));\\n  var flags = {};\\n\\n  for (i = 0; i < uniquePrioritySetters.length; i++) {\\n    var setter = uniquePrioritySetters[i];\\n\\n    if (setter.validate && !setter.validate(utcDate, setter.value, subFnOptions)) {\\n      return new Date(NaN);\\n    }\\n\\n    var result = setter.set(utcDate, flags, setter.value, subFnOptions); // Result is tuple (date, flags)\\n\\n    if (result[0]) {\\n      utcDate = result[0];\\n      (0, _index4[\\\"default\\\"])(flags, result[1]); // Result is date\\n    } else {\\n      utcDate = result;\\n    }\\n  }\\n\\n  return utcDate;\\n}\\n\\nfunction dateToSystemTimezone(date, flags) {\\n  if (flags.timestampIsSet) {\\n    return date;\\n  }\\n\\n  var convertedDate = new Date(0);\\n  convertedDate.setFullYear(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());\\n  convertedDate.setHours(date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());\\n  return convertedDate;\\n}\\n\\nfunction cleanEscapedString(input) {\\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \\\"'\\\");\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"_interopRequireDefault\",\"obj\",\"__esModule\",\"dateToSystemTimezone\",\"date\",\"flags\",\"timestampIsSet\",\"convertedDate\",\"Date\",\"setFullYear\",\"getUTCFullYear\",\"getUTCMonth\",\"getUTCDate\",\"setHours\",\"getUTCHours\",\"getUTCMinutes\",\"getUTCSeconds\",\"getUTCMilliseconds\",\"Object\",\"defineProperty\",\"value\",\"parse\",\"dirtyDateString\",\"dirtyFormatString\",\"dirtyReferenceDate\",\"dirtyOptions\",\"_index10\",\"arguments\",\"dateString\",\"String\",\"formatString\",\"options\",\"locale\",\"_index\",\"match\",\"RangeError\",\"localeFirstWeekContainsDate\",\"firstWeekContainsDate\",\"defaultFirstWeekContainsDate\",\"_index8\",\"localeWeekStartsOn\",\"weekStartsOn\",\"defaultWeekStartsOn\",\"_index3\",\"NaN\",\"subFnOptions\",\"setters\",\"priority\",\"TIMEZONE_UNIT_PRIORITY\",\"subPriority\",\"set\",\"index\",\"tokens\",\"longFormattingTokensRegExp\",\"map\",\"substring\",\"firstCharacter\",\"_index5\",\"longFormatter\",\"formatLong\",\"join\",\"formattingTokensRegExp\",\"usedTokens\",\"i\",\"length\",\"token\",\"useAdditionalWeekYearTokens\",\"_index7\",\"isProtectedWeekYearToken\",\"throwProtectedError\",\"useAdditionalDayOfYearTokens\",\"isProtectedDayOfYearToken\",\"parser\",\"_index9\",\"incompatibleTokens\",\"Array\",\"isArray\",\"incompatibleToken\",\"_i\",\"usedToken\",\"indexOf\",\"concat\",\"fullToken\",\"push\",\"parseResult\",\"validate\",\"rest\",\"unescapedLatinCharacterRegExp\",\"escapedStringRegExp\",\"replace\",\"doubleQuoteRegExp\",\"slice\",\"notWhitespaceRegExp\",\"test\",\"uniquePrioritySetters\",\"setter\",\"sort\",\"a\",\"b\",\"filter\",\"array\",\"setterArray\",\"isNaN\",\"utcDate\",\"_index2\",\"_index6\",\"result\",\"_index4\"]\n}\n"]