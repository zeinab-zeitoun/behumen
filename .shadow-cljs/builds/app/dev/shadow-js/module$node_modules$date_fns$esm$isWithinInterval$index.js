["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/date-fns/esm/isWithinInterval/index.js"],"~:js","shadow$provide.module$node_modules$date_fns$esm$isWithinInterval$index=function(global,require,module,exports){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj}}Object.defineProperty(exports,\"__esModule\",{value:!0});exports[\"default\"]=function(dirtyDate,interval){(0,_index2[\"default\"])(2,arguments);var time=(0,_index[\"default\"])(dirtyDate).getTime(),startTime=(0,_index[\"default\"])(interval.start).getTime(),endTime=(0,_index[\"default\"])(interval.end).getTime();if(!(startTime<=\nendTime))throw new RangeError(\"Invalid interval\");return time>=startTime&&time<=endTime};var _index=_interopRequireDefault(require(\"module$node_modules$date_fns$esm$toDate$index\")),_index2=_interopRequireDefault(require(\"module$node_modules$date_fns$esm$_lib$requiredArgs$index\"))}","~:source","shadow$provide[\"module$node_modules$date_fns$esm$isWithinInterval$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = isWithinInterval;\n\nvar _index = _interopRequireDefault(require(\"../toDate/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * @name isWithinInterval\n * @category Interval Helpers\n * @summary Is the given date within the interval?\n *\n * @description\n * Is the given date within the interval? (Including start and end.)\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `isWithinRange` to `isWithinInterval`.\n *   This change was made to mirror the use of the word \"interval\" in standard ISO 8601:2004 terminology:\n *\n *   ```\n *   2.1.3\n *   time interval\n *   part of the time axis limited by two instants\n *   ```\n *\n *   Also, this function now accepts an object with `start` and `end` properties\n *   instead of two arguments as an interval.\n *   This function now throws `RangeError` if the start of the interval is after its end\n *   or if any date in the interval is `Invalid Date`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   isWithinRange(\n *     new Date(2014, 0, 3),\n *     new Date(2014, 0, 1), new Date(2014, 0, 7)\n *   )\n *\n *   // v2.0.0 onward\n *\n *   isWithinInterval(\n *     new Date(2014, 0, 3),\n *     { start: new Date(2014, 0, 1), end: new Date(2014, 0, 7) }\n *   )\n *   ```\n *\n * @param {Date|Number} date - the date to check\n * @param {Interval} interval - the interval to check\n * @returns {Boolean} the date is within the interval\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // For the date within the interval:\n * isWithinInterval(new Date(2014, 0, 3), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * //=> true\n *\n * @example\n * // For the date outside of the interval:\n * isWithinInterval(new Date(2014, 0, 10), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * //=> false\n *\n * @example\n * // For date equal to interval start:\n * isWithinInterval(date, { start, end: date }) // => true\n *\n * @example\n * // For date equal to interval end:\n * isWithinInterval(date, { start: date, end }) // => true\n */\nfunction isWithinInterval(dirtyDate, interval) {\n  (0, _index2[\"default\"])(2, arguments);\n  var time = (0, _index[\"default\"])(dirtyDate).getTime();\n  var startTime = (0, _index[\"default\"])(interval.start).getTime();\n  var endTime = (0, _index[\"default\"])(interval.end).getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startTime <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  return time >= startTime && time <= endTime;\n}\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$module$node_modules$date_fns$esm$_lib$requiredArgs$index","~$shadow.js","~$module$node_modules$date_fns$esm$toDate$index"]],"~:properties",["^5",["__esModule","value"]],"~:compiled-at",1622535541012,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$date_fns$esm$isWithinInterval$index.js\",\n\"lineCount\":2,\n\"mappings\":\"AAAAA,cAAA,wDAAA,CAA4E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAYpHC,QAASA,uBAAsB,CAACC,GAAD,CAAM,CAAE,MAAOA,IAAA,EAAOA,GAAAC,WAAP,CAAwBD,GAAxB,CAA8B,CAAE,UAAWA,GAAb,CAAvC,CATrCE,MAAAC,eAAA,CAAsBL,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CM,MAAO,CAAA,CADoC,CAA7C,CAGAN,QAAA,CAAQ,SAAR,CAAA,CAiFAO,QAAyB,CAACC,SAAD,CAAYC,QAAZ,CAAsB,CAC7C,CAAC,CAAA,CAAGC,OAAA,CAAQ,SAAR,CAAJ,EAAwB,CAAxB,CAA2BC,SAA3B,CACA,KAAIC,KAAO,CAAC,CAAA,CAAGC,MAAA,CAAO,SAAP,CAAJ,EAAuBL,SAAvB,CAAAM,QAAA,EAAX,CACIC,UAAY,CAAC,CAAA,CAAGF,MAAA,CAAO,SAAP,CAAJ,EAAuBJ,QAAAO,MAAvB,CAAAF,QAAA,EADhB,CAEIG,QAAU,CAAC,CAAA,CAAGJ,MAAA,CAAO,SAAP,CAAJ,EAAuBJ,QAAAS,IAAvB,CAAAJ,QAAA,EAEd,IAAI,EAAEC,SAAF;AAAeE,OAAf,CAAJ,CACE,KAAM,KAAIE,UAAJ,CAAe,kBAAf,CAAN,CAGF,MAAOP,KAAP,EAAeG,SAAf,EAA4BH,IAA5B,EAAoCK,OAVS,CA/E/C,KAAIJ,OAASZ,sBAAA,CAAuBH,OAAA,CAAQ,+CAAR,CAAvB,CAAb,CAEIY,QAAUT,sBAAA,CAAuBH,OAAA,CAAQ,0DAAR,CAAvB,CAVsG;\",\n\"sources\":[\"node_modules/date-fns/esm/isWithinInterval/index.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$date_fns$esm$isWithinInterval$index\\\"] = function(global,require,module,exports) {\\n\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n  value: true\\n});\\nexports[\\\"default\\\"] = isWithinInterval;\\n\\nvar _index = _interopRequireDefault(require(\\\"../toDate/index.js\\\"));\\n\\nvar _index2 = _interopRequireDefault(require(\\\"../_lib/requiredArgs/index.js\\\"));\\n\\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \\\"default\\\": obj }; }\\n\\n/**\\n * @name isWithinInterval\\n * @category Interval Helpers\\n * @summary Is the given date within the interval?\\n *\\n * @description\\n * Is the given date within the interval? (Including start and end.)\\n *\\n * ### v2.0.0 breaking changes:\\n *\\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\\n *\\n * - The function was renamed from `isWithinRange` to `isWithinInterval`.\\n *   This change was made to mirror the use of the word \\\"interval\\\" in standard ISO 8601:2004 terminology:\\n *\\n *   ```\\n *   2.1.3\\n *   time interval\\n *   part of the time axis limited by two instants\\n *   ```\\n *\\n *   Also, this function now accepts an object with `start` and `end` properties\\n *   instead of two arguments as an interval.\\n *   This function now throws `RangeError` if the start of the interval is after its end\\n *   or if any date in the interval is `Invalid Date`.\\n *\\n *   ```javascript\\n *   // Before v2.0.0\\n *\\n *   isWithinRange(\\n *     new Date(2014, 0, 3),\\n *     new Date(2014, 0, 1), new Date(2014, 0, 7)\\n *   )\\n *\\n *   // v2.0.0 onward\\n *\\n *   isWithinInterval(\\n *     new Date(2014, 0, 3),\\n *     { start: new Date(2014, 0, 1), end: new Date(2014, 0, 7) }\\n *   )\\n *   ```\\n *\\n * @param {Date|Number} date - the date to check\\n * @param {Interval} interval - the interval to check\\n * @returns {Boolean} the date is within the interval\\n * @throws {TypeError} 2 arguments required\\n * @throws {RangeError} The start of an interval cannot be after its end\\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\\n *\\n * @example\\n * // For the date within the interval:\\n * isWithinInterval(new Date(2014, 0, 3), {\\n *   start: new Date(2014, 0, 1),\\n *   end: new Date(2014, 0, 7)\\n * })\\n * //=> true\\n *\\n * @example\\n * // For the date outside of the interval:\\n * isWithinInterval(new Date(2014, 0, 10), {\\n *   start: new Date(2014, 0, 1),\\n *   end: new Date(2014, 0, 7)\\n * })\\n * //=> false\\n *\\n * @example\\n * // For date equal to interval start:\\n * isWithinInterval(date, { start, end: date }) // => true\\n *\\n * @example\\n * // For date equal to interval end:\\n * isWithinInterval(date, { start: date, end }) // => true\\n */\\nfunction isWithinInterval(dirtyDate, interval) {\\n  (0, _index2[\\\"default\\\"])(2, arguments);\\n  var time = (0, _index[\\\"default\\\"])(dirtyDate).getTime();\\n  var startTime = (0, _index[\\\"default\\\"])(interval.start).getTime();\\n  var endTime = (0, _index[\\\"default\\\"])(interval.end).getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\\n\\n  if (!(startTime <= endTime)) {\\n    throw new RangeError('Invalid interval');\\n  }\\n\\n  return time >= startTime && time <= endTime;\\n}\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"require\",\"module\",\"exports\",\"_interopRequireDefault\",\"obj\",\"__esModule\",\"Object\",\"defineProperty\",\"value\",\"isWithinInterval\",\"dirtyDate\",\"interval\",\"_index2\",\"arguments\",\"time\",\"_index\",\"getTime\",\"startTime\",\"start\",\"endTime\",\"end\",\"RangeError\"]\n}\n"]