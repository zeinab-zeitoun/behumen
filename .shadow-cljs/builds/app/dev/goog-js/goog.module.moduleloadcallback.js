["^ ","~:resource-id",["~:shadow.build.classpath/resource","goog/module/moduleloadcallback.js"],"~:js","goog.provide(\"goog.module.ModuleLoadCallback\");\ngoog.require(\"goog.debug.entryPointRegistry\");\ngoog.require(\"goog.module\");\ngoog.module.ModuleLoadCallback = function(fn, opt_handler) {\n  this.fn_ = fn;\n  this.handler_ = opt_handler;\n};\ngoog.module.ModuleLoadCallback.prototype.execute = function(context) {\n  if (this.fn_) {\n    this.fn_.call(this.handler_ || null, context);\n    this.handler_ = null;\n    this.fn_ = null;\n  }\n};\ngoog.module.ModuleLoadCallback.prototype.abort = function() {\n  this.fn_ = null;\n  this.handler_ = null;\n};\ngoog.debug.entryPointRegistry.register(function(transformer) {\n  goog.module.ModuleLoadCallback.prototype.execute = transformer(goog.module.ModuleLoadCallback.prototype.execute);\n});\n","~:source","// Copyright 2008 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview A simple callback mechanism for notification about module\n * loads. Should be considered package-private to goog.module.\n *\n */\n\ngoog.provide('goog.module.ModuleLoadCallback');\n\ngoog.require('goog.debug.entryPointRegistry');\n/** @suppress {extraRequire} */\ngoog.require('goog.module');\n\n\n\n/**\n * Class used to encapsulate the callbacks to be called when a module loads.\n * @param {Function} fn Callback function.\n * @param {Object=} opt_handler Optional handler under whose scope to execute\n *     the callback.\n * @constructor\n * @final\n */\ngoog.module.ModuleLoadCallback = function(fn, opt_handler) {\n  /**\n   * Callback function.\n   * @type {Function}\n   * @private\n   */\n  this.fn_ = fn;\n\n  /**\n   * Optional handler under whose scope to execute the callback.\n   * @type {Object|undefined}\n   * @private\n   */\n  this.handler_ = opt_handler;\n};\n\n\n/**\n * Completes the operation and calls the callback function if appropriate.\n * @param {*} context The module context.\n */\ngoog.module.ModuleLoadCallback.prototype.execute = function(context) {\n  if (this.fn_) {\n    this.fn_.call(this.handler_ || null, context);\n    this.handler_ = null;\n    this.fn_ = null;\n  }\n};\n\n\n/**\n * Abort the callback, but not the actual module load.\n */\ngoog.module.ModuleLoadCallback.prototype.abort = function() {\n  this.fn_ = null;\n  this.handler_ = null;\n};\n\n\n// Register the browser event handler as an entry point, so that\n// it can be monitored for exception handling, etc.\ngoog.debug.entryPointRegistry.register(\n    /**\n     * @param {function(!Function): !Function} transformer The transforming\n     *     function.\n     */\n    function(transformer) {\n      goog.module.ModuleLoadCallback.prototype.execute =\n          transformer(goog.module.ModuleLoadCallback.prototype.execute);\n    });\n","~:compiled-at",1622535515692,"~:source-map-json","{\n\"version\":3,\n\"file\":\"goog.module.moduleloadcallback.js\",\n\"lineCount\":22,\n\"mappings\":\"AAoBAA,IAAAC,QAAA,CAAa,gCAAb,CAAA;AAEAD,IAAAE,QAAA,CAAa,+BAAb,CAAA;AAEAF,IAAAE,QAAA,CAAa,aAAb,CAAA;AAYAF,IAAAG,OAAAC,mBAAA,GAAiCC,QAAQ,CAACC,EAAD,EAAKC,WAAL,CAAkB;AAMzD,MAAAC,IAAA,GAAWF,EAAX;AAOA,MAAAG,SAAA,GAAgBF,WAAhB;AAbyD,CAA3D;AAqBAP,IAAAG,OAAAC,mBAAAM,UAAAC,QAAA,GAAmDC,QAAQ,CAACC,OAAD,CAAU;AACnE,MAAI,IAAAL,IAAJ,CAAc;AACZ,QAAAA,IAAAM,KAAA,CAAc,IAAAL,SAAd,IAA+B,IAA/B,EAAqCI,OAArC,CAAA;AACA,QAAAJ,SAAA,GAAgB,IAAhB;AACA,QAAAD,IAAA,GAAW,IAAX;AAHY;AADqD,CAArE;AAYAR,IAAAG,OAAAC,mBAAAM,UAAAK,MAAA,GAAiDC,QAAQ,EAAG;AAC1D,MAAAR,IAAA,GAAW,IAAX;AACA,MAAAC,SAAA,GAAgB,IAAhB;AAF0D,CAA5D;AAQAT,IAAAiB,MAAAC,mBAAAC,SAAA,CAKI,QAAQ,CAACC,WAAD,CAAc;AACpBpB,MAAAG,OAAAC,mBAAAM,UAAAC,QAAA,GACIS,WAAA,CAAYpB,IAAAG,OAAAC,mBAAAM,UAAAC,QAAZ,CADJ;AADoB,CAL1B,CAAA;;\",\n\"sources\":[\"goog/module/moduleloadcallback.js\"],\n\"sourcesContent\":[\"// Copyright 2008 The Closure Library Authors. All Rights Reserved.\\n//\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n// you may not use this file except in compliance with the License.\\n// You may obtain a copy of the License at\\n//\\n//      http://www.apache.org/licenses/LICENSE-2.0\\n//\\n// Unless required by applicable law or agreed to in writing, software\\n// distributed under the License is distributed on an \\\"AS-IS\\\" BASIS,\\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n// See the License for the specific language governing permissions and\\n// limitations under the License.\\n\\n/**\\n * @fileoverview A simple callback mechanism for notification about module\\n * loads. Should be considered package-private to goog.module.\\n *\\n */\\n\\ngoog.provide('goog.module.ModuleLoadCallback');\\n\\ngoog.require('goog.debug.entryPointRegistry');\\n/** @suppress {extraRequire} */\\ngoog.require('goog.module');\\n\\n\\n\\n/**\\n * Class used to encapsulate the callbacks to be called when a module loads.\\n * @param {Function} fn Callback function.\\n * @param {Object=} opt_handler Optional handler under whose scope to execute\\n *     the callback.\\n * @constructor\\n * @final\\n */\\ngoog.module.ModuleLoadCallback = function(fn, opt_handler) {\\n  /**\\n   * Callback function.\\n   * @type {Function}\\n   * @private\\n   */\\n  this.fn_ = fn;\\n\\n  /**\\n   * Optional handler under whose scope to execute the callback.\\n   * @type {Object|undefined}\\n   * @private\\n   */\\n  this.handler_ = opt_handler;\\n};\\n\\n\\n/**\\n * Completes the operation and calls the callback function if appropriate.\\n * @param {*} context The module context.\\n */\\ngoog.module.ModuleLoadCallback.prototype.execute = function(context) {\\n  if (this.fn_) {\\n    this.fn_.call(this.handler_ || null, context);\\n    this.handler_ = null;\\n    this.fn_ = null;\\n  }\\n};\\n\\n\\n/**\\n * Abort the callback, but not the actual module load.\\n */\\ngoog.module.ModuleLoadCallback.prototype.abort = function() {\\n  this.fn_ = null;\\n  this.handler_ = null;\\n};\\n\\n\\n// Register the browser event handler as an entry point, so that\\n// it can be monitored for exception handling, etc.\\ngoog.debug.entryPointRegistry.register(\\n    /**\\n     * @param {function(!Function): !Function} transformer The transforming\\n     *     function.\\n     */\\n    function(transformer) {\\n      goog.module.ModuleLoadCallback.prototype.execute =\\n          transformer(goog.module.ModuleLoadCallback.prototype.execute);\\n    });\\n\"],\n\"names\":[\"goog\",\"provide\",\"require\",\"module\",\"ModuleLoadCallback\",\"goog.module.ModuleLoadCallback\",\"fn\",\"opt_handler\",\"fn_\",\"handler_\",\"prototype\",\"execute\",\"goog.module.ModuleLoadCallback.prototype.execute\",\"context\",\"call\",\"abort\",\"goog.module.ModuleLoadCallback.prototype.abort\",\"debug\",\"entryPointRegistry\",\"register\",\"transformer\"]\n}\n"]