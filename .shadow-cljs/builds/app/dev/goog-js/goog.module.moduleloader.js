["^ ","~:resource-id",["~:shadow.build.classpath/resource","goog/module/moduleloader.js"],"~:js","goog.provide(\"goog.module.ModuleLoader\");\ngoog.require(\"goog.Timer\");\ngoog.require(\"goog.array\");\ngoog.require(\"goog.asserts\");\ngoog.require(\"goog.dom\");\ngoog.require(\"goog.dom.safe\");\ngoog.require(\"goog.events\");\ngoog.require(\"goog.events.Event\");\ngoog.require(\"goog.events.EventHandler\");\ngoog.require(\"goog.events.EventId\");\ngoog.require(\"goog.events.EventTarget\");\ngoog.require(\"goog.functions\");\ngoog.require(\"goog.html.TrustedResourceUrl\");\ngoog.require(\"goog.labs.userAgent.browser\");\ngoog.require(\"goog.log\");\ngoog.require(\"goog.module.AbstractModuleLoader\");\ngoog.require(\"goog.net.BulkLoader\");\ngoog.require(\"goog.net.EventType\");\ngoog.require(\"goog.net.jsloader\");\ngoog.require(\"goog.userAgent\");\ngoog.require(\"goog.userAgent.product\");\ngoog.module.ModuleLoader = function() {\n  goog.module.ModuleLoader.base(this, \"constructor\");\n  this.eventHandler_ = new goog.events.EventHandler(this);\n  this.registerDisposable(this.eventHandler_);\n  this.loadingModulesStatus_ = {};\n};\ngoog.inherits(goog.module.ModuleLoader, goog.events.EventTarget);\ngoog.module.ModuleLoader.prototype.logger = goog.log.getLogger(\"goog.module.ModuleLoader\");\ngoog.module.ModuleLoader.prototype.debugMode_ = false;\ngoog.module.ModuleLoader.prototype.sourceUrlInjection_ = false;\ngoog.module.ModuleLoader.prototype.useScriptTags_ = false;\ngoog.module.ModuleLoader.supportsSourceUrlStackTraces = function() {\n  return goog.userAgent.product.CHROME || goog.labs.userAgent.browser.isFirefox() && goog.labs.userAgent.browser.isVersionOrHigher(\"36\");\n};\ngoog.module.ModuleLoader.supportsSourceUrlDebugger = function() {\n  return goog.userAgent.product.CHROME || goog.userAgent.GECKO;\n};\ngoog.module.ModuleLoader.URL_MAX_LENGTH_ = 4043;\ngoog.module.ModuleLoader.SYNTAX_OR_NETWORK_ERROR_CODE_ = -1;\ngoog.module.ModuleLoader.createScriptElement_ = function(url) {\n  const script = goog.dom.createElement(goog.dom.TagName.SCRIPT);\n  goog.dom.safe.setScriptSrc(script, url);\n  script.async = false;\n  return script;\n};\ngoog.module.ModuleLoader.createPreloadScriptElement_ = function(url) {\n  const link = goog.dom.createElement(goog.dom.TagName.LINK);\n  goog.dom.safe.setLinkHrefAndRel(link, url, \"preload\");\n  link.as = \"script\";\n  return link;\n};\ngoog.module.ModuleLoader.prototype.getDebugMode = function() {\n  return this.debugMode_;\n};\ngoog.module.ModuleLoader.prototype.setUseScriptTags = function(useScriptTags) {\n  this.useScriptTags_ = useScriptTags;\n};\ngoog.module.ModuleLoader.prototype.getUseScriptTags = function() {\n  return this.useScriptTags_;\n};\ngoog.module.ModuleLoader.prototype.setDebugMode = function(debugMode) {\n  this.debugMode_ = debugMode;\n};\ngoog.module.ModuleLoader.prototype.setSourceUrlInjection = function(enabled) {\n  this.sourceUrlInjection_ = enabled;\n};\ngoog.module.ModuleLoader.prototype.usingSourceUrlInjection_ = function() {\n  return this.sourceUrlInjection_ || this.getDebugMode() && goog.module.ModuleLoader.supportsSourceUrlStackTraces();\n};\ngoog.module.ModuleLoader.prototype.loadModules = function(ids, moduleInfoMap, opt_successFn, opt_errorFn, opt_timeoutFn, opt_forceReload) {\n  var loadStatus = this.loadingModulesStatus_[ids] || goog.module.ModuleLoader.LoadStatus.createForIds_(ids, moduleInfoMap);\n  loadStatus.loadRequested = true;\n  if (loadStatus.successFn && opt_successFn) {\n    loadStatus.successFn = goog.functions.sequence(loadStatus.successFn, opt_successFn);\n  } else {\n    loadStatus.successFn = opt_successFn || loadStatus.successFn;\n  }\n  loadStatus.errorFn = opt_errorFn || null;\n  if (!this.loadingModulesStatus_[ids]) {\n    this.loadingModulesStatus_[ids] = loadStatus;\n    this.downloadModules_(ids);\n  } else {\n    if (this.getUseScriptTags()) {\n      this.downloadModules_(ids);\n    } else {\n      if (loadStatus.responseTexts != null) {\n        this.evaluateCode_(ids);\n      }\n    }\n  }\n};\ngoog.module.ModuleLoader.prototype.evaluateCode_ = function(moduleIds) {\n  this.dispatchEvent(new goog.module.ModuleLoader.RequestSuccessEvent(moduleIds));\n  goog.log.info(this.logger, \"evaluateCode ids:\" + moduleIds);\n  var loadStatus = this.loadingModulesStatus_[moduleIds];\n  var uris = loadStatus.requestUris;\n  var texts = loadStatus.responseTexts;\n  var error = null;\n  try {\n    if (this.usingSourceUrlInjection_()) {\n      for (var i = 0; i < uris.length; i++) {\n        var uri = uris[i];\n        goog.globalEval(texts[i] + \" //# sourceURL\\x3d\" + uri);\n      }\n    } else {\n      goog.globalEval(texts.join(\"\\n\"));\n    }\n  } catch (e) {\n    error = e;\n    goog.log.warning(this.logger, \"Loaded incomplete code for module(s): \" + moduleIds, e);\n  }\n  this.dispatchEvent(new goog.module.ModuleLoader.EvaluateCodeEvent(moduleIds));\n  if (error) {\n    this.handleErrorHelper_(moduleIds, loadStatus.errorFn, null, error);\n  } else {\n    if (loadStatus.successFn) {\n      loadStatus.successFn();\n    }\n  }\n  delete this.loadingModulesStatus_[moduleIds];\n};\ngoog.module.ModuleLoader.prototype.handleSuccess_ = function(bulkLoader, moduleIds) {\n  goog.log.info(this.logger, \"Code loaded for module(s): \" + moduleIds);\n  var loadStatus = this.loadingModulesStatus_[moduleIds];\n  loadStatus.responseTexts = bulkLoader.getResponseTexts();\n  if (loadStatus.loadRequested) {\n    this.evaluateCode_(moduleIds);\n  }\n  goog.Timer.callOnce(bulkLoader.dispose, 5, bulkLoader);\n};\ngoog.module.ModuleLoader.prototype.prefetchModule = function(id, moduleInfo) {\n  if (this.getDebugMode()) {\n    return;\n  }\n  goog.log.info(this.logger, `Prefetching module: ${id}`);\n  var loadStatus = this.loadingModulesStatus_[[id]];\n  if (loadStatus) {\n    return;\n  }\n  var moduleInfoMap = {};\n  moduleInfoMap[id] = moduleInfo;\n  loadStatus = goog.module.ModuleLoader.LoadStatus.createForIds_([id], moduleInfoMap);\n  this.loadingModulesStatus_[[id]] = loadStatus;\n  if (this.getUseScriptTags()) {\n    const links = [];\n    const insertPos = document.head || document.documentElement;\n    for (var i = 0; i < loadStatus.trustedRequestUris.length; i++) {\n      const link = goog.module.ModuleLoader.createPreloadScriptElement_(loadStatus.trustedRequestUris[i]);\n      links.push(link);\n      insertPos.insertBefore(link, insertPos.firstChild);\n    }\n    loadStatus.successFn = () => {\n      for (var i = 0; i < links.length; i++) {\n        const link = links[i];\n        goog.dom.removeNode(link);\n      }\n    };\n  } else {\n    this.downloadModules_([id]);\n  }\n};\ngoog.module.ModuleLoader.prototype.downloadModules_ = function(ids) {\n  const debugMode = this.getDebugMode();\n  const sourceUrlInjection = this.usingSourceUrlInjection_();\n  const useScriptTags = this.getUseScriptTags();\n  if (debugMode + sourceUrlInjection + useScriptTags > 1) {\n    const effectiveFlag = useScriptTags ? \"useScriptTags\" : debugMode && !sourceUrlInjection ? \"debug\" : \"sourceUrlInjection\";\n    goog.log.warning(this.logger, `More than one of debugMode (set to ${debugMode}), ` + `useScriptTags (set to ${useScriptTags}), ` + `and sourceUrlInjection (set to ${sourceUrlInjection}) ` + `is enabled. Proceeding with download as if ` + `${effectiveFlag} is set to true and the rest to false.`);\n  }\n  const loadStatus = goog.asserts.assert(this.loadingModulesStatus_[ids]);\n  if (useScriptTags) {\n    this.loadWithNonAsyncScriptTag_(loadStatus, ids);\n  } else {\n    if (debugMode && !sourceUrlInjection) {\n      goog.net.jsloader.safeLoadMany(loadStatus.trustedRequestUris);\n    } else {\n      goog.log.info(this.logger, \"downloadModules ids:\" + ids + \" uris:\" + loadStatus.requestUris);\n      var bulkLoader = new goog.net.BulkLoader(loadStatus.requestUris);\n      var eventHandler = this.eventHandler_;\n      eventHandler.listen(bulkLoader, goog.net.EventType.SUCCESS, goog.bind(this.handleSuccess_, this, bulkLoader, ids));\n      eventHandler.listen(bulkLoader, goog.net.EventType.ERROR, goog.bind(this.handleError_, this, bulkLoader, ids));\n      bulkLoader.load();\n    }\n  }\n};\ngoog.module.ModuleLoader.prototype.loadWithNonAsyncScriptTag_ = function(loadStatus, ids) {\n  goog.log.info(this.logger, `Loading initiated for: ${ids}`);\n  if (loadStatus.trustedRequestUris.length == 0) {\n    if (loadStatus.successFn) {\n      loadStatus.successFn();\n      return;\n    }\n  }\n  let lastScript = null;\n  const insertPos = document.head || document.documentElement;\n  for (var i = 0; i < loadStatus.trustedRequestUris.length; i++) {\n    const url = loadStatus.trustedRequestUris[i];\n    const urlLength = loadStatus.requestUris[i].length;\n    goog.asserts.assert(urlLength <= goog.module.ModuleLoader.URL_MAX_LENGTH_, `Module url length is ${urlLength}, which is greater than limit of ` + `${goog.module.ModuleLoader.URL_MAX_LENGTH_}. This should never ` + `happen.`);\n    const scriptElement = goog.module.ModuleLoader.createScriptElement_(url);\n    scriptElement.onload = () => {\n      scriptElement.onload = null;\n      scriptElement.onerror = null;\n      goog.dom.removeNode(scriptElement);\n      if (scriptElement == lastScript) {\n        goog.log.info(this.logger, `Loading complete for: ${ids}`);\n        lastScript = null;\n        if (loadStatus.successFn) {\n          loadStatus.successFn();\n        }\n      }\n    };\n    scriptElement.onerror = () => {\n      goog.log.error(this.logger, `Network error when loading module(s): ${ids}`);\n      scriptElement.onload = null;\n      scriptElement.onerror = null;\n      goog.dom.removeNode(scriptElement);\n      this.handleErrorHelper_(ids, loadStatus.errorFn, goog.module.ModuleLoader.SYNTAX_OR_NETWORK_ERROR_CODE_);\n      if (lastScript == scriptElement) {\n        lastScript = null;\n      } else {\n        goog.log.error(this.logger, `Dependent requests were made in parallel with failed request ` + `for module(s) \"${ids}\". Non-recoverable out-of-order ` + `execution may occur.`);\n      }\n    };\n    lastScript = scriptElement;\n    insertPos.insertBefore(scriptElement, insertPos.firstChild);\n  }\n};\ngoog.module.ModuleLoader.prototype.handleError_ = function(bulkLoader, moduleIds, event) {\n  var loadStatus = this.loadingModulesStatus_[moduleIds];\n  if (loadStatus) {\n    delete this.loadingModulesStatus_[moduleIds];\n    this.handleErrorHelper_(moduleIds, loadStatus.errorFn, event.status);\n  }\n  goog.Timer.callOnce(bulkLoader.dispose, 5, bulkLoader);\n};\ngoog.module.ModuleLoader.prototype.handleErrorHelper_ = function(moduleIds, errorFn, status, opt_error) {\n  this.dispatchEvent(new goog.module.ModuleLoader.RequestErrorEvent(moduleIds, status, opt_error));\n  goog.log.warning(this.logger, \"Request failed for module(s): \" + moduleIds);\n  if (errorFn) {\n    errorFn(status);\n  }\n};\ngoog.module.ModuleLoader.EventType = {EVALUATE_CODE:new goog.events.EventId(goog.events.getUniqueId(\"evaluateCode\")), REQUEST_SUCCESS:new goog.events.EventId(goog.events.getUniqueId(\"requestSuccess\")), REQUEST_ERROR:new goog.events.EventId(goog.events.getUniqueId(\"requestError\"))};\ngoog.module.ModuleLoader.EvaluateCodeEvent = function(moduleIds) {\n  goog.module.ModuleLoader.EvaluateCodeEvent.base(this, \"constructor\", goog.module.ModuleLoader.EventType.EVALUATE_CODE);\n  this.moduleIds = moduleIds;\n};\ngoog.inherits(goog.module.ModuleLoader.EvaluateCodeEvent, goog.events.Event);\ngoog.module.ModuleLoader.RequestSuccessEvent = function(moduleIds) {\n  goog.module.ModuleLoader.RequestSuccessEvent.base(this, \"constructor\", goog.module.ModuleLoader.EventType.REQUEST_SUCCESS);\n  this.moduleIds = moduleIds;\n};\ngoog.inherits(goog.module.ModuleLoader.RequestSuccessEvent, goog.events.Event);\ngoog.module.ModuleLoader.RequestErrorEvent = function(moduleIds, status, opt_error) {\n  goog.module.ModuleLoader.RequestErrorEvent.base(this, \"constructor\", goog.module.ModuleLoader.EventType.REQUEST_ERROR);\n  this.moduleIds = moduleIds;\n  this.status = status;\n  this.error = opt_error || null;\n};\ngoog.inherits(goog.module.ModuleLoader.RequestErrorEvent, goog.events.Event);\ngoog.module.ModuleLoader.LoadStatus = function(trustedRequestUris) {\n  this.requestUris = goog.array.map(trustedRequestUris, goog.html.TrustedResourceUrl.unwrap);\n  this.trustedRequestUris = trustedRequestUris;\n  this.responseTexts = null;\n  this.loadRequested = false;\n  this.successFn = null;\n  this.errorFn = null;\n};\ngoog.module.ModuleLoader.LoadStatus.createForIds_ = function(ids, moduleInfoMap) {\n  if (!ids) {\n    return new goog.module.ModuleLoader.LoadStatus([]);\n  }\n  const trustedRequestUris = [];\n  for (var i = 0; i < ids.length; i++) {\n    goog.array.extend(trustedRequestUris, moduleInfoMap[ids[i]].getUris());\n  }\n  return new goog.module.ModuleLoader.LoadStatus(trustedRequestUris);\n};\n","~:source","// Copyright 2008 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview The module loader for loading modules across the network.\n *\n * Browsers do not guarantee that scripts appended to the document\n * are executed in the order they are added. For production mode, we use\n * XHRs to load scripts, because they do not have this problem and they\n * have superior mechanisms for handling failure. However, XHR-evaled\n * scripts are harder to debug.\n *\n * In debugging mode, we use normal script tags. In order to make this work,\n * we load the scripts in serial: we do not execute script B to the document\n * until we are certain that script A is finished loading.\n *\n */\n\ngoog.provide('goog.module.ModuleLoader');\n\ngoog.require('goog.Timer');\ngoog.require('goog.array');\ngoog.require('goog.asserts');\ngoog.require('goog.dom');\ngoog.require('goog.dom.safe');\ngoog.require('goog.events');\ngoog.require('goog.events.Event');\ngoog.require('goog.events.EventHandler');\ngoog.require('goog.events.EventId');\ngoog.require('goog.events.EventTarget');\ngoog.require('goog.functions');\ngoog.require('goog.html.TrustedResourceUrl');\ngoog.require('goog.labs.userAgent.browser');\ngoog.require('goog.log');\ngoog.require('goog.module.AbstractModuleLoader');\ngoog.require('goog.net.BulkLoader');\ngoog.require('goog.net.EventType');\ngoog.require('goog.net.jsloader');\ngoog.require('goog.userAgent');\ngoog.require('goog.userAgent.product');\n\n\n\n/**\n * A class that loads JavaScript modules.\n * @constructor\n * @extends {goog.events.EventTarget}\n * @implements {goog.module.AbstractModuleLoader}\n */\ngoog.module.ModuleLoader = function() {\n  goog.module.ModuleLoader.base(this, 'constructor');\n\n  /**\n   * Event handler for managing handling events.\n   * @type {goog.events.EventHandler<!goog.module.ModuleLoader>}\n   * @private\n   */\n  this.eventHandler_ = new goog.events.EventHandler(this);\n  this.registerDisposable(this.eventHandler_);\n\n  /**\n   * A map from module IDs to goog.module.ModuleLoader.LoadStatus.\n   * @type {!Object<Array<string>, goog.module.ModuleLoader.LoadStatus>}\n   * @private\n   */\n  this.loadingModulesStatus_ = {};\n};\ngoog.inherits(goog.module.ModuleLoader, goog.events.EventTarget);\n\n\n/**\n * A logger.\n * @type {goog.log.Logger}\n * @protected\n */\ngoog.module.ModuleLoader.prototype.logger =\n    goog.log.getLogger('goog.module.ModuleLoader');\n\n\n/**\n * Whether debug mode is enabled.\n * @type {boolean}\n * @private\n */\ngoog.module.ModuleLoader.prototype.debugMode_ = false;\n\n\n/**\n * Whether source url injection is enabled.\n * @type {boolean}\n * @private\n */\ngoog.module.ModuleLoader.prototype.sourceUrlInjection_ = false;\n\n\n/**\n * Whether to load modules with non-async script tags.\n * @type {boolean}\n * @private\n */\ngoog.module.ModuleLoader.prototype.useScriptTags_ = false;\n\n\n/**\n * @return {boolean} Whether sourceURL affects stack traces.\n */\ngoog.module.ModuleLoader.supportsSourceUrlStackTraces = function() {\n  return goog.userAgent.product.CHROME ||\n      (goog.labs.userAgent.browser.isFirefox() &&\n       goog.labs.userAgent.browser.isVersionOrHigher('36'));\n};\n\n\n/**\n * @return {boolean} Whether sourceURL affects the debugger.\n */\ngoog.module.ModuleLoader.supportsSourceUrlDebugger = function() {\n  return goog.userAgent.product.CHROME || goog.userAgent.GECKO;\n};\n\n\n/**\n * URLs have a browser-dependent max character limit. IE9-IE11 are the lowest\n * common denominators for what we support - with a limit of 4043:\n * https://stackoverflow.com/questions/417142/what-is-the-maximum-length-of-a-url-in-different-browsers#31250734\n * If the URL constructed by the loader exceeds this limit, we will try to split\n * it into multiple requests.\n * TODO(user): Make this configurable since not all users care about IE.\n * @const {number}\n * @private\n */\ngoog.module.ModuleLoader.URL_MAX_LENGTH_ = 4043;\n\n\n/**\n * Error code for javascript syntax and network errors.\n * TODO(user): Detect more accurate error info.\n * @const {number}\n * @private\n */\ngoog.module.ModuleLoader.SYNTAX_OR_NETWORK_ERROR_CODE_ = -1;\n\n\n\n/**\n * @param {!goog.html.TrustedResourceUrl} url The url to be loaded.\n * @return {!HTMLScriptElement}\n * @private\n */\ngoog.module.ModuleLoader.createScriptElement_ = function(url) {\n  const script = goog.dom.createElement(goog.dom.TagName.SCRIPT);\n  goog.dom.safe.setScriptSrc(script, url);\n\n  // Set scriptElt.async = false to guarantee\n  // that scripts are loaded in parallel but executed in the insertion order.\n  // For more details, check\n  // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script\n  script.async = false;\n  return script;\n};\n\n\n/**\n * @param {!goog.html.TrustedResourceUrl} url The url to be pre-loaded.\n * @return {!HTMLLinkElement}\n * @private\n */\ngoog.module.ModuleLoader.createPreloadScriptElement_ = function(url) {\n  const link = goog.dom.createElement(goog.dom.TagName.LINK);\n  goog.dom.safe.setLinkHrefAndRel(link, url, 'preload');\n  link.as = 'script';\n  return link;\n};\n\n\n/**\n * Gets the debug mode for the loader.\n * @return {boolean} Whether the debug mode is enabled.\n */\ngoog.module.ModuleLoader.prototype.getDebugMode = function() {\n  return this.debugMode_;\n};\n\n\n/**\n * @param {boolean} useScriptTags Whether or not to use script tags\n *     (with async=false) for loading.\n */\ngoog.module.ModuleLoader.prototype.setUseScriptTags = function(useScriptTags) {\n  this.useScriptTags_ = useScriptTags;\n};\n\n\n/**\n * Gets whether we're using non-async script tags for loading.\n * @return {boolean} Whether or not we're using non-async script tags for\n *     loading.\n */\ngoog.module.ModuleLoader.prototype.getUseScriptTags = function() {\n  return this.useScriptTags_;\n};\n\n\n/**\n * Sets whether we're using non-async script tags for loading.\n * @param {boolean} debugMode Whether the debug mode is enabled.\n */\ngoog.module.ModuleLoader.prototype.setDebugMode = function(debugMode) {\n  this.debugMode_ = debugMode;\n};\n\n\n/**\n * When enabled, we will add a sourceURL comment to the end of all scripts\n * to mark their origin.\n *\n * On WebKit, stack traces will reflect the sourceURL comment, so this is\n * useful for debugging webkit stack traces in production.\n *\n * Notice that in debug mode, we will use source url injection + eval rather\n * then appending script nodes to the DOM, because the scripts will load far\n * faster.  (Appending script nodes is very slow, because we can't parallelize\n * the downloading and evaling of the script).\n *\n * The cost of appending sourceURL information is negligible when compared to\n * the cost of evaling the script. Almost all clients will want this on.\n *\n * TODO(nicksantos): Turn this on by default. We may want to turn this off\n * for clients that inject their own sourceURL.\n *\n * @param {boolean} enabled Whether source url injection is enabled.\n */\ngoog.module.ModuleLoader.prototype.setSourceUrlInjection = function(enabled) {\n  this.sourceUrlInjection_ = enabled;\n};\n\n\n/**\n * @return {boolean} Whether we're using source url injection.\n * @private\n */\ngoog.module.ModuleLoader.prototype.usingSourceUrlInjection_ = function() {\n  return this.sourceUrlInjection_ ||\n      (this.getDebugMode() &&\n       goog.module.ModuleLoader.supportsSourceUrlStackTraces());\n};\n\n\n/** @override */\ngoog.module.ModuleLoader.prototype.loadModules = function(\n    ids, moduleInfoMap, opt_successFn, opt_errorFn, opt_timeoutFn,\n    opt_forceReload) {\n  var loadStatus = this.loadingModulesStatus_[ids] ||\n      goog.module.ModuleLoader.LoadStatus.createForIds_(ids, moduleInfoMap);\n  loadStatus.loadRequested = true;\n  if (loadStatus.successFn && opt_successFn) {\n    // If there already exists a success function, chain it before the passed\n    // success functon.\n    loadStatus.successFn =\n        goog.functions.sequence(loadStatus.successFn, opt_successFn);\n  } else {\n    loadStatus.successFn = opt_successFn || loadStatus.successFn;\n  }\n  loadStatus.errorFn = opt_errorFn || null;\n\n  if (!this.loadingModulesStatus_[ids]) {\n    // Modules were not prefetched.\n    this.loadingModulesStatus_[ids] = loadStatus;\n    this.downloadModules_(ids);\n    // TODO(user): Need to handle timeouts in the module loading code.\n  } else if (this.getUseScriptTags()) {\n    // We started prefetching but we used <link rel=\"preload\".../> tags, so we\n    // rely on the browser to reconcile the (existing) prefetch request and the\n    // script tag we're about to insert.\n    this.downloadModules_(ids);\n  } else if (loadStatus.responseTexts != null) {\n    // Modules prefetch is complete.\n    this.evaluateCode_(ids);\n  }\n  // Otherwise modules prefetch is in progress, and these modules will be\n  // executed after the prefetch is complete.\n};\n\n\n/**\n * Evaluate the JS code.\n * @param {Array<string>} moduleIds The module ids.\n * @private\n */\ngoog.module.ModuleLoader.prototype.evaluateCode_ = function(moduleIds) {\n  this.dispatchEvent(\n      new goog.module.ModuleLoader.RequestSuccessEvent(moduleIds));\n\n  goog.log.info(this.logger, 'evaluateCode ids:' + moduleIds);\n  var loadStatus = this.loadingModulesStatus_[moduleIds];\n  var uris = loadStatus.requestUris;\n  var texts = loadStatus.responseTexts;\n  var error = null;\n  try {\n    if (this.usingSourceUrlInjection_()) {\n      for (var i = 0; i < uris.length; i++) {\n        var uri = uris[i];\n        goog.globalEval(texts[i] + ' //# sourceURL=' + uri);\n      }\n    } else {\n      goog.globalEval(texts.join('\\n'));\n    }\n  } catch (e) {\n    error = e;\n    // TODO(user): Consider throwing an exception here.\n    goog.log.warning(\n        this.logger, 'Loaded incomplete code for module(s): ' + moduleIds, e);\n  }\n\n  this.dispatchEvent(new goog.module.ModuleLoader.EvaluateCodeEvent(moduleIds));\n\n  if (error) {\n    this.handleErrorHelper_(\n        moduleIds, loadStatus.errorFn, null /* status */, error);\n  } else if (loadStatus.successFn) {\n    loadStatus.successFn();\n  }\n  delete this.loadingModulesStatus_[moduleIds];\n};\n\n\n/**\n * Handles a successful response to a request for prefetch or load one or more\n * modules.\n *\n * @param {goog.net.BulkLoader} bulkLoader The bulk loader.\n * @param {Array<string>} moduleIds The ids of the modules requested.\n * @private\n */\ngoog.module.ModuleLoader.prototype.handleSuccess_ = function(\n    bulkLoader, moduleIds) {\n  goog.log.info(this.logger, 'Code loaded for module(s): ' + moduleIds);\n\n  var loadStatus = this.loadingModulesStatus_[moduleIds];\n  loadStatus.responseTexts = bulkLoader.getResponseTexts();\n\n  if (loadStatus.loadRequested) {\n    this.evaluateCode_(moduleIds);\n  }\n\n  // NOTE: A bulk loader instance is used for loading a set of module ids.\n  // Once these modules have been loaded successfully or in error the bulk\n  // loader should be disposed as it is not needed anymore. A new bulk loader\n  // is instantiated for any new modules to be loaded. The dispose is called\n  // on a timer so that the bulkloader has a chance to release its\n  // objects.\n  goog.Timer.callOnce(bulkLoader.dispose, 5, bulkLoader);\n};\n\n\n/** @override */\ngoog.module.ModuleLoader.prototype.prefetchModule = function(id, moduleInfo) {\n  // Do not prefetch in debug mode\n  if (this.getDebugMode()) {\n    return;\n  }\n  goog.log.info(this.logger, `Prefetching module: ${id}`);\n  var loadStatus = this.loadingModulesStatus_[[id]];\n  if (loadStatus) {\n    return;\n  }\n  var moduleInfoMap = {};\n  moduleInfoMap[id] = moduleInfo;\n  loadStatus =\n      goog.module.ModuleLoader.LoadStatus.createForIds_([id], moduleInfoMap);\n  this.loadingModulesStatus_[[id]] = loadStatus;\n  if (this.getUseScriptTags()) {\n    const links = [];\n    const insertPos = document.head || document.documentElement;\n    for (var i = 0; i < loadStatus.trustedRequestUris.length; i++) {\n      const link = goog.module.ModuleLoader.createPreloadScriptElement_(\n          loadStatus.trustedRequestUris[i]);\n      links.push(link);\n      insertPos.insertBefore(link, insertPos.firstChild);\n    }\n    loadStatus.successFn = () => {\n      for (var i = 0; i < links.length; i++) {\n        const link = links[i];\n        goog.dom.removeNode(link);\n      }\n    };\n  } else {\n    this.downloadModules_([id]);\n  }\n};\n\n\n/**\n * Downloads a list of JavaScript modules.\n *\n * @param {?Array<string>} ids The module ids in dependency order.\n * @private\n */\ngoog.module.ModuleLoader.prototype.downloadModules_ = function(ids) {\n  const debugMode = this.getDebugMode();\n  const sourceUrlInjection = this.usingSourceUrlInjection_();\n  const useScriptTags = this.getUseScriptTags();\n  if ((debugMode + sourceUrlInjection + useScriptTags) > 1) {\n    const effectiveFlag = useScriptTags ?\n        'useScriptTags' :\n        (debugMode && !sourceUrlInjection) ? 'debug' : 'sourceUrlInjection';\n    goog.log.warning(\n        this.logger,\n        `More than one of debugMode (set to ${debugMode}), ` +\n            `useScriptTags (set to ${useScriptTags}), ` +\n            `and sourceUrlInjection (set to ${sourceUrlInjection}) ` +\n            `is enabled. Proceeding with download as if ` +\n            `${effectiveFlag} is set to true and the rest to false.`);\n  }\n  const loadStatus = goog.asserts.assert(this.loadingModulesStatus_[ids]);\n\n  if (useScriptTags) {\n    this.loadWithNonAsyncScriptTag_(loadStatus, ids);\n  } else if (debugMode && !sourceUrlInjection) {\n    // In debug mode use <script> tags rather than XHRs to load the files.\n    // This makes it possible to debug and inspect stack traces more easily.\n    // It's also possible to use it to load JavaScript files that are hosted on\n    // another domain.\n    // The scripts need to load serially, so this is much slower than parallel\n    // script loads with source url injection.\n    goog.net.jsloader.safeLoadMany(loadStatus.trustedRequestUris);\n  } else {\n    goog.log.info(\n        this.logger,\n        'downloadModules ids:' + ids + ' uris:' + loadStatus.requestUris);\n\n    var bulkLoader = new goog.net.BulkLoader(loadStatus.requestUris);\n\n    var eventHandler = this.eventHandler_;\n    eventHandler.listen(\n        bulkLoader, goog.net.EventType.SUCCESS,\n        goog.bind(this.handleSuccess_, this, bulkLoader, ids));\n    eventHandler.listen(\n        bulkLoader, goog.net.EventType.ERROR,\n        goog.bind(this.handleError_, this, bulkLoader, ids));\n    bulkLoader.load();\n  }\n};\n\n\n/**\n * Downloads a list of script URIS using <script async=false.../>, which\n * guarantees executuion order.\n * @param {!goog.module.ModuleLoader.LoadStatus} loadStatus The load status\n *     object for this module-load.\n *  @param {?Array<string>} ids The module ids in dependency order.\n * @private\n */\ngoog.module.ModuleLoader.prototype.loadWithNonAsyncScriptTag_ = function(\n    loadStatus, ids) {\n  goog.log.info(this.logger, `Loading initiated for: ${ids}`);\n  if (loadStatus.trustedRequestUris.length == 0) {\n    if (loadStatus.successFn) {\n      loadStatus.successFn();\n      return;\n    }\n  }\n\n  // We'll execute the success callback when the last script enqueed reaches\n  // onLoad.\n  let lastScript = null;\n  const insertPos = document.head || document.documentElement;\n\n  for (var i = 0; i < loadStatus.trustedRequestUris.length; i++) {\n    const url = loadStatus.trustedRequestUris[i];\n    const urlLength = loadStatus.requestUris[i].length;\n    goog.asserts.assert(\n        urlLength <= goog.module.ModuleLoader.URL_MAX_LENGTH_,\n        `Module url length is ${urlLength}, which is greater than limit of ` +\n            `${goog.module.ModuleLoader.URL_MAX_LENGTH_}. This should never ` +\n            `happen.`);\n\n    const scriptElement = goog.module.ModuleLoader.createScriptElement_(url);\n\n    scriptElement.onload = () => {\n      scriptElement.onload = null;\n      scriptElement.onerror = null;\n      goog.dom.removeNode(scriptElement);\n      if (scriptElement == lastScript) {\n        goog.log.info(this.logger, `Loading complete for: ${ids}`);\n        lastScript = null;\n        if (loadStatus.successFn) {\n          loadStatus.successFn();\n        }\n      }\n    };\n\n    scriptElement.onerror = () => {\n      goog.log.error(\n          this.logger, `Network error when loading module(s): ${ids}`);\n      scriptElement.onload = null;\n      scriptElement.onerror = null;\n      goog.dom.removeNode(scriptElement);\n      this.handleErrorHelper_(\n          ids, loadStatus.errorFn,\n          goog.module.ModuleLoader.SYNTAX_OR_NETWORK_ERROR_CODE_);\n      if (lastScript == scriptElement) {\n        lastScript = null;\n      } else {\n        goog.log.error(\n            this.logger,\n            `Dependent requests were made in parallel with failed request ` +\n                `for module(s) \"${ids}\". Non-recoverable out-of-order ` +\n                `execution may occur.`);\n      }\n    };\n    lastScript = scriptElement;\n    insertPos.insertBefore(scriptElement, insertPos.firstChild);\n  }\n};\n\n\n/**\n * Handles an error during a request for one or more modules.\n * @param {goog.net.BulkLoader} bulkLoader The bulk loader.\n * @param {Array<string>} moduleIds The ids of the modules requested.\n * @param {!goog.net.BulkLoader.LoadErrorEvent} event The load error event.\n * @private\n */\ngoog.module.ModuleLoader.prototype.handleError_ = function(\n    bulkLoader, moduleIds, event) {\n  var loadStatus = this.loadingModulesStatus_[moduleIds];\n  // The bulk loader doesn't cancel other requests when a request fails. We will\n  // delete the loadStatus in the first failure, so it will be undefined in\n  // subsequent errors.\n  if (loadStatus) {\n    delete this.loadingModulesStatus_[moduleIds];\n    this.handleErrorHelper_(moduleIds, loadStatus.errorFn, event.status);\n  }\n\n  // NOTE: A bulk loader instance is used for loading a set of module ids. Once\n  // these modules have been loaded successfully or in error the bulk loader\n  // should be disposed as it is not needed anymore. A new bulk loader is\n  // instantiated for any new modules to be loaded. The dispose is called\n  // on another thread so that the bulkloader has a chance to release its\n  // objects.\n  goog.Timer.callOnce(bulkLoader.dispose, 5, bulkLoader);\n};\n\n\n/**\n * Handles an error during a request for one or more modules.\n * @param {Array<string>} moduleIds The ids of the modules requested.\n * @param {?function(?number)} errorFn The function to call on failure.\n * @param {?number} status The response status.\n * @param {!Error=} opt_error The error encountered, if available.\n * @private\n */\ngoog.module.ModuleLoader.prototype.handleErrorHelper_ = function(\n    moduleIds, errorFn, status, opt_error) {\n  this.dispatchEvent(new goog.module.ModuleLoader.RequestErrorEvent(\n      moduleIds, status, opt_error));\n\n  goog.log.warning(this.logger, 'Request failed for module(s): ' + moduleIds);\n\n  if (errorFn) {\n    errorFn(status);\n  }\n};\n\n\n/**\n * Events dispatched by the ModuleLoader.\n * @const\n */\ngoog.module.ModuleLoader.EventType = {\n  /**\n   * @const {!goog.events.EventId<\n   *     !goog.module.ModuleLoader.EvaluateCodeEvent>} Called after the code for\n   *     a module is evaluated.\n   */\n  EVALUATE_CODE:\n      new goog.events.EventId(goog.events.getUniqueId('evaluateCode')),\n\n  /**\n   * @const {!goog.events.EventId<\n   *     !goog.module.ModuleLoader.RequestSuccessEvent>} Called when the\n   *     BulkLoader finishes successfully.\n   */\n  REQUEST_SUCCESS:\n      new goog.events.EventId(goog.events.getUniqueId('requestSuccess')),\n\n  /**\n   * @const {!goog.events.EventId<\n   *     !goog.module.ModuleLoader.RequestErrorEvent>} Called when the\n   *     BulkLoader fails, or code loading fails.\n   */\n  REQUEST_ERROR:\n      new goog.events.EventId(goog.events.getUniqueId('requestError'))\n};\n\n\n\n/**\n * @param {Array<string>} moduleIds The ids of the modules being evaluated.\n * @constructor\n * @extends {goog.events.Event}\n * @final\n * @protected\n */\ngoog.module.ModuleLoader.EvaluateCodeEvent = function(moduleIds) {\n  goog.module.ModuleLoader.EvaluateCodeEvent.base(\n      this, 'constructor', goog.module.ModuleLoader.EventType.EVALUATE_CODE);\n\n  /**\n   * @type {Array<string>}\n   */\n  this.moduleIds = moduleIds;\n};\ngoog.inherits(goog.module.ModuleLoader.EvaluateCodeEvent, goog.events.Event);\n\n\n\n/**\n * @param {Array<string>} moduleIds The ids of the modules being evaluated.\n * @constructor\n * @extends {goog.events.Event}\n * @final\n * @protected\n */\ngoog.module.ModuleLoader.RequestSuccessEvent = function(moduleIds) {\n  goog.module.ModuleLoader.RequestSuccessEvent.base(\n      this, 'constructor', goog.module.ModuleLoader.EventType.REQUEST_SUCCESS);\n\n  /**\n   * @type {Array<string>}\n   */\n  this.moduleIds = moduleIds;\n};\ngoog.inherits(goog.module.ModuleLoader.RequestSuccessEvent, goog.events.Event);\n\n\n\n/**\n * @param {?Array<string>} moduleIds The ids of the modules being evaluated.\n * @param {?number} status The response status.\n * @param {!Error=} opt_error The error encountered, if available.\n * @constructor\n * @extends {goog.events.Event}\n * @final\n * @protected\n */\ngoog.module.ModuleLoader.RequestErrorEvent = function(\n    moduleIds, status, opt_error) {\n  goog.module.ModuleLoader.RequestErrorEvent.base(\n      this, 'constructor', goog.module.ModuleLoader.EventType.REQUEST_ERROR);\n\n  /**\n   * @type {?Array<string>}\n   */\n  this.moduleIds = moduleIds;\n\n  /** @type {?number} */\n  this.status = status;\n\n  /** @type {?Error} */\n  this.error = opt_error || null;\n};\ngoog.inherits(goog.module.ModuleLoader.RequestErrorEvent, goog.events.Event);\n\n\n\n/**\n * A class that keeps the state of the module during the loading process. It is\n * used to save loading information between modules download and evaluation.\n *  @param {!Array<!goog.html.TrustedResourceUrl>} trustedRequestUris the uris\n containing the modules implementing ids.\n\n * @constructor\n * @final\n */\ngoog.module.ModuleLoader.LoadStatus = function(trustedRequestUris) {\n  /**\n   * The request uris.\n   * @final {!Array<string>}\n   */\n  this.requestUris =\n      goog.array.map(trustedRequestUris, goog.html.TrustedResourceUrl.unwrap);\n\n  /**\n   * A TrustedResourceUrl version of `this.requestUris`\n   * @final {!Array<!goog.html.TrustedResourceUrl>}\n   */\n  this.trustedRequestUris = trustedRequestUris;\n\n  /**\n   * The response texts.\n   * @type {?Array<string>}\n   */\n  this.responseTexts = null;\n\n  /**\n   * Whether loadModules was called for the set of modules referred by this\n   * status.\n   * @type {boolean}\n   */\n  this.loadRequested = false;\n\n  /**\n   * Success callback.\n   * @type {?function()}\n   */\n  this.successFn = null;\n\n  /**\n   * Error callback.\n   * @type {?function(?number)}\n   */\n  this.errorFn = null;\n};\n\n\n/**\n * Creates a `LoadStatus` object for tracking state during the loading of the\n * modules indexed in `ids`.\n *\n * @param {?Array<string>} ids the ids for this module load in dependency\n *   order.\n * @param {!Object<string, !goog.module.ModuleInfo>} moduleInfoMap A mapping\n *     from module id to ModuleInfo object.\n * @return {!goog.module.ModuleLoader.LoadStatus}\n * @private\n */\ngoog.module.ModuleLoader.LoadStatus.createForIds_ = function(\n    ids, moduleInfoMap) {\n  if (!ids) {\n    return new goog.module.ModuleLoader.LoadStatus([]);\n  }\n  const trustedRequestUris = [];\n  for (var i = 0; i < ids.length; i++) {\n    goog.array.extend(trustedRequestUris, moduleInfoMap[ids[i]].getUris());\n  }\n  return new goog.module.ModuleLoader.LoadStatus(trustedRequestUris);\n};\n","~:compiled-at",1622535515754,"~:source-map-json","{\n\"version\":3,\n\"file\":\"goog.module.moduleloader.js\",\n\"lineCount\":281,\n\"mappings\":\"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\",\n\"sources\":[\"goog/module/moduleloader.js\"],\n\"sourcesContent\":[\"// Copyright 2008 The Closure Library Authors. All Rights Reserved.\\n//\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n// you may not use this file except in compliance with the License.\\n// You may obtain a copy of the License at\\n//\\n//      http://www.apache.org/licenses/LICENSE-2.0\\n//\\n// Unless required by applicable law or agreed to in writing, software\\n// distributed under the License is distributed on an \\\"AS-IS\\\" BASIS,\\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n// See the License for the specific language governing permissions and\\n// limitations under the License.\\n\\n/**\\n * @fileoverview The module loader for loading modules across the network.\\n *\\n * Browsers do not guarantee that scripts appended to the document\\n * are executed in the order they are added. For production mode, we use\\n * XHRs to load scripts, because they do not have this problem and they\\n * have superior mechanisms for handling failure. However, XHR-evaled\\n * scripts are harder to debug.\\n *\\n * In debugging mode, we use normal script tags. In order to make this work,\\n * we load the scripts in serial: we do not execute script B to the document\\n * until we are certain that script A is finished loading.\\n *\\n */\\n\\ngoog.provide('goog.module.ModuleLoader');\\n\\ngoog.require('goog.Timer');\\ngoog.require('goog.array');\\ngoog.require('goog.asserts');\\ngoog.require('goog.dom');\\ngoog.require('goog.dom.safe');\\ngoog.require('goog.events');\\ngoog.require('goog.events.Event');\\ngoog.require('goog.events.EventHandler');\\ngoog.require('goog.events.EventId');\\ngoog.require('goog.events.EventTarget');\\ngoog.require('goog.functions');\\ngoog.require('goog.html.TrustedResourceUrl');\\ngoog.require('goog.labs.userAgent.browser');\\ngoog.require('goog.log');\\ngoog.require('goog.module.AbstractModuleLoader');\\ngoog.require('goog.net.BulkLoader');\\ngoog.require('goog.net.EventType');\\ngoog.require('goog.net.jsloader');\\ngoog.require('goog.userAgent');\\ngoog.require('goog.userAgent.product');\\n\\n\\n\\n/**\\n * A class that loads JavaScript modules.\\n * @constructor\\n * @extends {goog.events.EventTarget}\\n * @implements {goog.module.AbstractModuleLoader}\\n */\\ngoog.module.ModuleLoader = function() {\\n  goog.module.ModuleLoader.base(this, 'constructor');\\n\\n  /**\\n   * Event handler for managing handling events.\\n   * @type {goog.events.EventHandler<!goog.module.ModuleLoader>}\\n   * @private\\n   */\\n  this.eventHandler_ = new goog.events.EventHandler(this);\\n  this.registerDisposable(this.eventHandler_);\\n\\n  /**\\n   * A map from module IDs to goog.module.ModuleLoader.LoadStatus.\\n   * @type {!Object<Array<string>, goog.module.ModuleLoader.LoadStatus>}\\n   * @private\\n   */\\n  this.loadingModulesStatus_ = {};\\n};\\ngoog.inherits(goog.module.ModuleLoader, goog.events.EventTarget);\\n\\n\\n/**\\n * A logger.\\n * @type {goog.log.Logger}\\n * @protected\\n */\\ngoog.module.ModuleLoader.prototype.logger =\\n    goog.log.getLogger('goog.module.ModuleLoader');\\n\\n\\n/**\\n * Whether debug mode is enabled.\\n * @type {boolean}\\n * @private\\n */\\ngoog.module.ModuleLoader.prototype.debugMode_ = false;\\n\\n\\n/**\\n * Whether source url injection is enabled.\\n * @type {boolean}\\n * @private\\n */\\ngoog.module.ModuleLoader.prototype.sourceUrlInjection_ = false;\\n\\n\\n/**\\n * Whether to load modules with non-async script tags.\\n * @type {boolean}\\n * @private\\n */\\ngoog.module.ModuleLoader.prototype.useScriptTags_ = false;\\n\\n\\n/**\\n * @return {boolean} Whether sourceURL affects stack traces.\\n */\\ngoog.module.ModuleLoader.supportsSourceUrlStackTraces = function() {\\n  return goog.userAgent.product.CHROME ||\\n      (goog.labs.userAgent.browser.isFirefox() &&\\n       goog.labs.userAgent.browser.isVersionOrHigher('36'));\\n};\\n\\n\\n/**\\n * @return {boolean} Whether sourceURL affects the debugger.\\n */\\ngoog.module.ModuleLoader.supportsSourceUrlDebugger = function() {\\n  return goog.userAgent.product.CHROME || goog.userAgent.GECKO;\\n};\\n\\n\\n/**\\n * URLs have a browser-dependent max character limit. IE9-IE11 are the lowest\\n * common denominators for what we support - with a limit of 4043:\\n * https://stackoverflow.com/questions/417142/what-is-the-maximum-length-of-a-url-in-different-browsers#31250734\\n * If the URL constructed by the loader exceeds this limit, we will try to split\\n * it into multiple requests.\\n * TODO(user): Make this configurable since not all users care about IE.\\n * @const {number}\\n * @private\\n */\\ngoog.module.ModuleLoader.URL_MAX_LENGTH_ = 4043;\\n\\n\\n/**\\n * Error code for javascript syntax and network errors.\\n * TODO(user): Detect more accurate error info.\\n * @const {number}\\n * @private\\n */\\ngoog.module.ModuleLoader.SYNTAX_OR_NETWORK_ERROR_CODE_ = -1;\\n\\n\\n\\n/**\\n * @param {!goog.html.TrustedResourceUrl} url The url to be loaded.\\n * @return {!HTMLScriptElement}\\n * @private\\n */\\ngoog.module.ModuleLoader.createScriptElement_ = function(url) {\\n  const script = goog.dom.createElement(goog.dom.TagName.SCRIPT);\\n  goog.dom.safe.setScriptSrc(script, url);\\n\\n  // Set scriptElt.async = false to guarantee\\n  // that scripts are loaded in parallel but executed in the insertion order.\\n  // For more details, check\\n  // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script\\n  script.async = false;\\n  return script;\\n};\\n\\n\\n/**\\n * @param {!goog.html.TrustedResourceUrl} url The url to be pre-loaded.\\n * @return {!HTMLLinkElement}\\n * @private\\n */\\ngoog.module.ModuleLoader.createPreloadScriptElement_ = function(url) {\\n  const link = goog.dom.createElement(goog.dom.TagName.LINK);\\n  goog.dom.safe.setLinkHrefAndRel(link, url, 'preload');\\n  link.as = 'script';\\n  return link;\\n};\\n\\n\\n/**\\n * Gets the debug mode for the loader.\\n * @return {boolean} Whether the debug mode is enabled.\\n */\\ngoog.module.ModuleLoader.prototype.getDebugMode = function() {\\n  return this.debugMode_;\\n};\\n\\n\\n/**\\n * @param {boolean} useScriptTags Whether or not to use script tags\\n *     (with async=false) for loading.\\n */\\ngoog.module.ModuleLoader.prototype.setUseScriptTags = function(useScriptTags) {\\n  this.useScriptTags_ = useScriptTags;\\n};\\n\\n\\n/**\\n * Gets whether we're using non-async script tags for loading.\\n * @return {boolean} Whether or not we're using non-async script tags for\\n *     loading.\\n */\\ngoog.module.ModuleLoader.prototype.getUseScriptTags = function() {\\n  return this.useScriptTags_;\\n};\\n\\n\\n/**\\n * Sets whether we're using non-async script tags for loading.\\n * @param {boolean} debugMode Whether the debug mode is enabled.\\n */\\ngoog.module.ModuleLoader.prototype.setDebugMode = function(debugMode) {\\n  this.debugMode_ = debugMode;\\n};\\n\\n\\n/**\\n * When enabled, we will add a sourceURL comment to the end of all scripts\\n * to mark their origin.\\n *\\n * On WebKit, stack traces will reflect the sourceURL comment, so this is\\n * useful for debugging webkit stack traces in production.\\n *\\n * Notice that in debug mode, we will use source url injection + eval rather\\n * then appending script nodes to the DOM, because the scripts will load far\\n * faster.  (Appending script nodes is very slow, because we can't parallelize\\n * the downloading and evaling of the script).\\n *\\n * The cost of appending sourceURL information is negligible when compared to\\n * the cost of evaling the script. Almost all clients will want this on.\\n *\\n * TODO(nicksantos): Turn this on by default. We may want to turn this off\\n * for clients that inject their own sourceURL.\\n *\\n * @param {boolean} enabled Whether source url injection is enabled.\\n */\\ngoog.module.ModuleLoader.prototype.setSourceUrlInjection = function(enabled) {\\n  this.sourceUrlInjection_ = enabled;\\n};\\n\\n\\n/**\\n * @return {boolean} Whether we're using source url injection.\\n * @private\\n */\\ngoog.module.ModuleLoader.prototype.usingSourceUrlInjection_ = function() {\\n  return this.sourceUrlInjection_ ||\\n      (this.getDebugMode() &&\\n       goog.module.ModuleLoader.supportsSourceUrlStackTraces());\\n};\\n\\n\\n/** @override */\\ngoog.module.ModuleLoader.prototype.loadModules = function(\\n    ids, moduleInfoMap, opt_successFn, opt_errorFn, opt_timeoutFn,\\n    opt_forceReload) {\\n  var loadStatus = this.loadingModulesStatus_[ids] ||\\n      goog.module.ModuleLoader.LoadStatus.createForIds_(ids, moduleInfoMap);\\n  loadStatus.loadRequested = true;\\n  if (loadStatus.successFn && opt_successFn) {\\n    // If there already exists a success function, chain it before the passed\\n    // success functon.\\n    loadStatus.successFn =\\n        goog.functions.sequence(loadStatus.successFn, opt_successFn);\\n  } else {\\n    loadStatus.successFn = opt_successFn || loadStatus.successFn;\\n  }\\n  loadStatus.errorFn = opt_errorFn || null;\\n\\n  if (!this.loadingModulesStatus_[ids]) {\\n    // Modules were not prefetched.\\n    this.loadingModulesStatus_[ids] = loadStatus;\\n    this.downloadModules_(ids);\\n    // TODO(user): Need to handle timeouts in the module loading code.\\n  } else if (this.getUseScriptTags()) {\\n    // We started prefetching but we used <link rel=\\\"preload\\\".../> tags, so we\\n    // rely on the browser to reconcile the (existing) prefetch request and the\\n    // script tag we're about to insert.\\n    this.downloadModules_(ids);\\n  } else if (loadStatus.responseTexts != null) {\\n    // Modules prefetch is complete.\\n    this.evaluateCode_(ids);\\n  }\\n  // Otherwise modules prefetch is in progress, and these modules will be\\n  // executed after the prefetch is complete.\\n};\\n\\n\\n/**\\n * Evaluate the JS code.\\n * @param {Array<string>} moduleIds The module ids.\\n * @private\\n */\\ngoog.module.ModuleLoader.prototype.evaluateCode_ = function(moduleIds) {\\n  this.dispatchEvent(\\n      new goog.module.ModuleLoader.RequestSuccessEvent(moduleIds));\\n\\n  goog.log.info(this.logger, 'evaluateCode ids:' + moduleIds);\\n  var loadStatus = this.loadingModulesStatus_[moduleIds];\\n  var uris = loadStatus.requestUris;\\n  var texts = loadStatus.responseTexts;\\n  var error = null;\\n  try {\\n    if (this.usingSourceUrlInjection_()) {\\n      for (var i = 0; i < uris.length; i++) {\\n        var uri = uris[i];\\n        goog.globalEval(texts[i] + ' //# sourceURL=' + uri);\\n      }\\n    } else {\\n      goog.globalEval(texts.join('\\\\n'));\\n    }\\n  } catch (e) {\\n    error = e;\\n    // TODO(user): Consider throwing an exception here.\\n    goog.log.warning(\\n        this.logger, 'Loaded incomplete code for module(s): ' + moduleIds, e);\\n  }\\n\\n  this.dispatchEvent(new goog.module.ModuleLoader.EvaluateCodeEvent(moduleIds));\\n\\n  if (error) {\\n    this.handleErrorHelper_(\\n        moduleIds, loadStatus.errorFn, null /* status */, error);\\n  } else if (loadStatus.successFn) {\\n    loadStatus.successFn();\\n  }\\n  delete this.loadingModulesStatus_[moduleIds];\\n};\\n\\n\\n/**\\n * Handles a successful response to a request for prefetch or load one or more\\n * modules.\\n *\\n * @param {goog.net.BulkLoader} bulkLoader The bulk loader.\\n * @param {Array<string>} moduleIds The ids of the modules requested.\\n * @private\\n */\\ngoog.module.ModuleLoader.prototype.handleSuccess_ = function(\\n    bulkLoader, moduleIds) {\\n  goog.log.info(this.logger, 'Code loaded for module(s): ' + moduleIds);\\n\\n  var loadStatus = this.loadingModulesStatus_[moduleIds];\\n  loadStatus.responseTexts = bulkLoader.getResponseTexts();\\n\\n  if (loadStatus.loadRequested) {\\n    this.evaluateCode_(moduleIds);\\n  }\\n\\n  // NOTE: A bulk loader instance is used for loading a set of module ids.\\n  // Once these modules have been loaded successfully or in error the bulk\\n  // loader should be disposed as it is not needed anymore. A new bulk loader\\n  // is instantiated for any new modules to be loaded. The dispose is called\\n  // on a timer so that the bulkloader has a chance to release its\\n  // objects.\\n  goog.Timer.callOnce(bulkLoader.dispose, 5, bulkLoader);\\n};\\n\\n\\n/** @override */\\ngoog.module.ModuleLoader.prototype.prefetchModule = function(id, moduleInfo) {\\n  // Do not prefetch in debug mode\\n  if (this.getDebugMode()) {\\n    return;\\n  }\\n  goog.log.info(this.logger, `Prefetching module: ${id}`);\\n  var loadStatus = this.loadingModulesStatus_[[id]];\\n  if (loadStatus) {\\n    return;\\n  }\\n  var moduleInfoMap = {};\\n  moduleInfoMap[id] = moduleInfo;\\n  loadStatus =\\n      goog.module.ModuleLoader.LoadStatus.createForIds_([id], moduleInfoMap);\\n  this.loadingModulesStatus_[[id]] = loadStatus;\\n  if (this.getUseScriptTags()) {\\n    const links = [];\\n    const insertPos = document.head || document.documentElement;\\n    for (var i = 0; i < loadStatus.trustedRequestUris.length; i++) {\\n      const link = goog.module.ModuleLoader.createPreloadScriptElement_(\\n          loadStatus.trustedRequestUris[i]);\\n      links.push(link);\\n      insertPos.insertBefore(link, insertPos.firstChild);\\n    }\\n    loadStatus.successFn = () => {\\n      for (var i = 0; i < links.length; i++) {\\n        const link = links[i];\\n        goog.dom.removeNode(link);\\n      }\\n    };\\n  } else {\\n    this.downloadModules_([id]);\\n  }\\n};\\n\\n\\n/**\\n * Downloads a list of JavaScript modules.\\n *\\n * @param {?Array<string>} ids The module ids in dependency order.\\n * @private\\n */\\ngoog.module.ModuleLoader.prototype.downloadModules_ = function(ids) {\\n  const debugMode = this.getDebugMode();\\n  const sourceUrlInjection = this.usingSourceUrlInjection_();\\n  const useScriptTags = this.getUseScriptTags();\\n  if ((debugMode + sourceUrlInjection + useScriptTags) > 1) {\\n    const effectiveFlag = useScriptTags ?\\n        'useScriptTags' :\\n        (debugMode && !sourceUrlInjection) ? 'debug' : 'sourceUrlInjection';\\n    goog.log.warning(\\n        this.logger,\\n        `More than one of debugMode (set to ${debugMode}), ` +\\n            `useScriptTags (set to ${useScriptTags}), ` +\\n            `and sourceUrlInjection (set to ${sourceUrlInjection}) ` +\\n            `is enabled. Proceeding with download as if ` +\\n            `${effectiveFlag} is set to true and the rest to false.`);\\n  }\\n  const loadStatus = goog.asserts.assert(this.loadingModulesStatus_[ids]);\\n\\n  if (useScriptTags) {\\n    this.loadWithNonAsyncScriptTag_(loadStatus, ids);\\n  } else if (debugMode && !sourceUrlInjection) {\\n    // In debug mode use <script> tags rather than XHRs to load the files.\\n    // This makes it possible to debug and inspect stack traces more easily.\\n    // It's also possible to use it to load JavaScript files that are hosted on\\n    // another domain.\\n    // The scripts need to load serially, so this is much slower than parallel\\n    // script loads with source url injection.\\n    goog.net.jsloader.safeLoadMany(loadStatus.trustedRequestUris);\\n  } else {\\n    goog.log.info(\\n        this.logger,\\n        'downloadModules ids:' + ids + ' uris:' + loadStatus.requestUris);\\n\\n    var bulkLoader = new goog.net.BulkLoader(loadStatus.requestUris);\\n\\n    var eventHandler = this.eventHandler_;\\n    eventHandler.listen(\\n        bulkLoader, goog.net.EventType.SUCCESS,\\n        goog.bind(this.handleSuccess_, this, bulkLoader, ids));\\n    eventHandler.listen(\\n        bulkLoader, goog.net.EventType.ERROR,\\n        goog.bind(this.handleError_, this, bulkLoader, ids));\\n    bulkLoader.load();\\n  }\\n};\\n\\n\\n/**\\n * Downloads a list of script URIS using <script async=false.../>, which\\n * guarantees executuion order.\\n * @param {!goog.module.ModuleLoader.LoadStatus} loadStatus The load status\\n *     object for this module-load.\\n *  @param {?Array<string>} ids The module ids in dependency order.\\n * @private\\n */\\ngoog.module.ModuleLoader.prototype.loadWithNonAsyncScriptTag_ = function(\\n    loadStatus, ids) {\\n  goog.log.info(this.logger, `Loading initiated for: ${ids}`);\\n  if (loadStatus.trustedRequestUris.length == 0) {\\n    if (loadStatus.successFn) {\\n      loadStatus.successFn();\\n      return;\\n    }\\n  }\\n\\n  // We'll execute the success callback when the last script enqueed reaches\\n  // onLoad.\\n  let lastScript = null;\\n  const insertPos = document.head || document.documentElement;\\n\\n  for (var i = 0; i < loadStatus.trustedRequestUris.length; i++) {\\n    const url = loadStatus.trustedRequestUris[i];\\n    const urlLength = loadStatus.requestUris[i].length;\\n    goog.asserts.assert(\\n        urlLength <= goog.module.ModuleLoader.URL_MAX_LENGTH_,\\n        `Module url length is ${urlLength}, which is greater than limit of ` +\\n            `${goog.module.ModuleLoader.URL_MAX_LENGTH_}. This should never ` +\\n            `happen.`);\\n\\n    const scriptElement = goog.module.ModuleLoader.createScriptElement_(url);\\n\\n    scriptElement.onload = () => {\\n      scriptElement.onload = null;\\n      scriptElement.onerror = null;\\n      goog.dom.removeNode(scriptElement);\\n      if (scriptElement == lastScript) {\\n        goog.log.info(this.logger, `Loading complete for: ${ids}`);\\n        lastScript = null;\\n        if (loadStatus.successFn) {\\n          loadStatus.successFn();\\n        }\\n      }\\n    };\\n\\n    scriptElement.onerror = () => {\\n      goog.log.error(\\n          this.logger, `Network error when loading module(s): ${ids}`);\\n      scriptElement.onload = null;\\n      scriptElement.onerror = null;\\n      goog.dom.removeNode(scriptElement);\\n      this.handleErrorHelper_(\\n          ids, loadStatus.errorFn,\\n          goog.module.ModuleLoader.SYNTAX_OR_NETWORK_ERROR_CODE_);\\n      if (lastScript == scriptElement) {\\n        lastScript = null;\\n      } else {\\n        goog.log.error(\\n            this.logger,\\n            `Dependent requests were made in parallel with failed request ` +\\n                `for module(s) \\\"${ids}\\\". Non-recoverable out-of-order ` +\\n                `execution may occur.`);\\n      }\\n    };\\n    lastScript = scriptElement;\\n    insertPos.insertBefore(scriptElement, insertPos.firstChild);\\n  }\\n};\\n\\n\\n/**\\n * Handles an error during a request for one or more modules.\\n * @param {goog.net.BulkLoader} bulkLoader The bulk loader.\\n * @param {Array<string>} moduleIds The ids of the modules requested.\\n * @param {!goog.net.BulkLoader.LoadErrorEvent} event The load error event.\\n * @private\\n */\\ngoog.module.ModuleLoader.prototype.handleError_ = function(\\n    bulkLoader, moduleIds, event) {\\n  var loadStatus = this.loadingModulesStatus_[moduleIds];\\n  // The bulk loader doesn't cancel other requests when a request fails. We will\\n  // delete the loadStatus in the first failure, so it will be undefined in\\n  // subsequent errors.\\n  if (loadStatus) {\\n    delete this.loadingModulesStatus_[moduleIds];\\n    this.handleErrorHelper_(moduleIds, loadStatus.errorFn, event.status);\\n  }\\n\\n  // NOTE: A bulk loader instance is used for loading a set of module ids. Once\\n  // these modules have been loaded successfully or in error the bulk loader\\n  // should be disposed as it is not needed anymore. A new bulk loader is\\n  // instantiated for any new modules to be loaded. The dispose is called\\n  // on another thread so that the bulkloader has a chance to release its\\n  // objects.\\n  goog.Timer.callOnce(bulkLoader.dispose, 5, bulkLoader);\\n};\\n\\n\\n/**\\n * Handles an error during a request for one or more modules.\\n * @param {Array<string>} moduleIds The ids of the modules requested.\\n * @param {?function(?number)} errorFn The function to call on failure.\\n * @param {?number} status The response status.\\n * @param {!Error=} opt_error The error encountered, if available.\\n * @private\\n */\\ngoog.module.ModuleLoader.prototype.handleErrorHelper_ = function(\\n    moduleIds, errorFn, status, opt_error) {\\n  this.dispatchEvent(new goog.module.ModuleLoader.RequestErrorEvent(\\n      moduleIds, status, opt_error));\\n\\n  goog.log.warning(this.logger, 'Request failed for module(s): ' + moduleIds);\\n\\n  if (errorFn) {\\n    errorFn(status);\\n  }\\n};\\n\\n\\n/**\\n * Events dispatched by the ModuleLoader.\\n * @const\\n */\\ngoog.module.ModuleLoader.EventType = {\\n  /**\\n   * @const {!goog.events.EventId<\\n   *     !goog.module.ModuleLoader.EvaluateCodeEvent>} Called after the code for\\n   *     a module is evaluated.\\n   */\\n  EVALUATE_CODE:\\n      new goog.events.EventId(goog.events.getUniqueId('evaluateCode')),\\n\\n  /**\\n   * @const {!goog.events.EventId<\\n   *     !goog.module.ModuleLoader.RequestSuccessEvent>} Called when the\\n   *     BulkLoader finishes successfully.\\n   */\\n  REQUEST_SUCCESS:\\n      new goog.events.EventId(goog.events.getUniqueId('requestSuccess')),\\n\\n  /**\\n   * @const {!goog.events.EventId<\\n   *     !goog.module.ModuleLoader.RequestErrorEvent>} Called when the\\n   *     BulkLoader fails, or code loading fails.\\n   */\\n  REQUEST_ERROR:\\n      new goog.events.EventId(goog.events.getUniqueId('requestError'))\\n};\\n\\n\\n\\n/**\\n * @param {Array<string>} moduleIds The ids of the modules being evaluated.\\n * @constructor\\n * @extends {goog.events.Event}\\n * @final\\n * @protected\\n */\\ngoog.module.ModuleLoader.EvaluateCodeEvent = function(moduleIds) {\\n  goog.module.ModuleLoader.EvaluateCodeEvent.base(\\n      this, 'constructor', goog.module.ModuleLoader.EventType.EVALUATE_CODE);\\n\\n  /**\\n   * @type {Array<string>}\\n   */\\n  this.moduleIds = moduleIds;\\n};\\ngoog.inherits(goog.module.ModuleLoader.EvaluateCodeEvent, goog.events.Event);\\n\\n\\n\\n/**\\n * @param {Array<string>} moduleIds The ids of the modules being evaluated.\\n * @constructor\\n * @extends {goog.events.Event}\\n * @final\\n * @protected\\n */\\ngoog.module.ModuleLoader.RequestSuccessEvent = function(moduleIds) {\\n  goog.module.ModuleLoader.RequestSuccessEvent.base(\\n      this, 'constructor', goog.module.ModuleLoader.EventType.REQUEST_SUCCESS);\\n\\n  /**\\n   * @type {Array<string>}\\n   */\\n  this.moduleIds = moduleIds;\\n};\\ngoog.inherits(goog.module.ModuleLoader.RequestSuccessEvent, goog.events.Event);\\n\\n\\n\\n/**\\n * @param {?Array<string>} moduleIds The ids of the modules being evaluated.\\n * @param {?number} status The response status.\\n * @param {!Error=} opt_error The error encountered, if available.\\n * @constructor\\n * @extends {goog.events.Event}\\n * @final\\n * @protected\\n */\\ngoog.module.ModuleLoader.RequestErrorEvent = function(\\n    moduleIds, status, opt_error) {\\n  goog.module.ModuleLoader.RequestErrorEvent.base(\\n      this, 'constructor', goog.module.ModuleLoader.EventType.REQUEST_ERROR);\\n\\n  /**\\n   * @type {?Array<string>}\\n   */\\n  this.moduleIds = moduleIds;\\n\\n  /** @type {?number} */\\n  this.status = status;\\n\\n  /** @type {?Error} */\\n  this.error = opt_error || null;\\n};\\ngoog.inherits(goog.module.ModuleLoader.RequestErrorEvent, goog.events.Event);\\n\\n\\n\\n/**\\n * A class that keeps the state of the module during the loading process. It is\\n * used to save loading information between modules download and evaluation.\\n *  @param {!Array<!goog.html.TrustedResourceUrl>} trustedRequestUris the uris\\n containing the modules implementing ids.\\n\\n * @constructor\\n * @final\\n */\\ngoog.module.ModuleLoader.LoadStatus = function(trustedRequestUris) {\\n  /**\\n   * The request uris.\\n   * @final {!Array<string>}\\n   */\\n  this.requestUris =\\n      goog.array.map(trustedRequestUris, goog.html.TrustedResourceUrl.unwrap);\\n\\n  /**\\n   * A TrustedResourceUrl version of `this.requestUris`\\n   * @final {!Array<!goog.html.TrustedResourceUrl>}\\n   */\\n  this.trustedRequestUris = trustedRequestUris;\\n\\n  /**\\n   * The response texts.\\n   * @type {?Array<string>}\\n   */\\n  this.responseTexts = null;\\n\\n  /**\\n   * Whether loadModules was called for the set of modules referred by this\\n   * status.\\n   * @type {boolean}\\n   */\\n  this.loadRequested = false;\\n\\n  /**\\n   * Success callback.\\n   * @type {?function()}\\n   */\\n  this.successFn = null;\\n\\n  /**\\n   * Error callback.\\n   * @type {?function(?number)}\\n   */\\n  this.errorFn = null;\\n};\\n\\n\\n/**\\n * Creates a `LoadStatus` object for tracking state during the loading of the\\n * modules indexed in `ids`.\\n *\\n * @param {?Array<string>} ids the ids for this module load in dependency\\n *   order.\\n * @param {!Object<string, !goog.module.ModuleInfo>} moduleInfoMap A mapping\\n *     from module id to ModuleInfo object.\\n * @return {!goog.module.ModuleLoader.LoadStatus}\\n * @private\\n */\\ngoog.module.ModuleLoader.LoadStatus.createForIds_ = function(\\n    ids, moduleInfoMap) {\\n  if (!ids) {\\n    return new goog.module.ModuleLoader.LoadStatus([]);\\n  }\\n  const trustedRequestUris = [];\\n  for (var i = 0; i < ids.length; i++) {\\n    goog.array.extend(trustedRequestUris, moduleInfoMap[ids[i]].getUris());\\n  }\\n  return new goog.module.ModuleLoader.LoadStatus(trustedRequestUris);\\n};\\n\"],\n\"names\":[\"goog\",\"provide\",\"require\",\"module\",\"ModuleLoader\",\"goog.module.ModuleLoader\",\"base\",\"eventHandler_\",\"events\",\"EventHandler\",\"registerDisposable\",\"loadingModulesStatus_\",\"inherits\",\"EventTarget\",\"prototype\",\"logger\",\"log\",\"getLogger\",\"debugMode_\",\"sourceUrlInjection_\",\"useScriptTags_\",\"supportsSourceUrlStackTraces\",\"goog.module.ModuleLoader.supportsSourceUrlStackTraces\",\"userAgent\",\"product\",\"CHROME\",\"labs\",\"browser\",\"isFirefox\",\"isVersionOrHigher\",\"supportsSourceUrlDebugger\",\"goog.module.ModuleLoader.supportsSourceUrlDebugger\",\"GECKO\",\"URL_MAX_LENGTH_\",\"SYNTAX_OR_NETWORK_ERROR_CODE_\",\"createScriptElement_\",\"goog.module.ModuleLoader.createScriptElement_\",\"url\",\"script\",\"dom\",\"createElement\",\"TagName\",\"SCRIPT\",\"safe\",\"setScriptSrc\",\"async\",\"createPreloadScriptElement_\",\"goog.module.ModuleLoader.createPreloadScriptElement_\",\"link\",\"LINK\",\"setLinkHrefAndRel\",\"as\",\"getDebugMode\",\"goog.module.ModuleLoader.prototype.getDebugMode\",\"setUseScriptTags\",\"goog.module.ModuleLoader.prototype.setUseScriptTags\",\"useScriptTags\",\"getUseScriptTags\",\"goog.module.ModuleLoader.prototype.getUseScriptTags\",\"setDebugMode\",\"goog.module.ModuleLoader.prototype.setDebugMode\",\"debugMode\",\"setSourceUrlInjection\",\"goog.module.ModuleLoader.prototype.setSourceUrlInjection\",\"enabled\",\"usingSourceUrlInjection_\",\"goog.module.ModuleLoader.prototype.usingSourceUrlInjection_\",\"loadModules\",\"goog.module.ModuleLoader.prototype.loadModules\",\"ids\",\"moduleInfoMap\",\"opt_successFn\",\"opt_errorFn\",\"opt_timeoutFn\",\"opt_forceReload\",\"loadStatus\",\"LoadStatus\",\"createForIds_\",\"loadRequested\",\"successFn\",\"functions\",\"sequence\",\"errorFn\",\"downloadModules_\",\"responseTexts\",\"evaluateCode_\",\"goog.module.ModuleLoader.prototype.evaluateCode_\",\"moduleIds\",\"dispatchEvent\",\"RequestSuccessEvent\",\"info\",\"uris\",\"requestUris\",\"texts\",\"error\",\"i\",\"length\",\"uri\",\"globalEval\",\"join\",\"e\",\"warning\",\"EvaluateCodeEvent\",\"handleErrorHelper_\",\"handleSuccess_\",\"goog.module.ModuleLoader.prototype.handleSuccess_\",\"bulkLoader\",\"getResponseTexts\",\"Timer\",\"callOnce\",\"dispose\",\"prefetchModule\",\"goog.module.ModuleLoader.prototype.prefetchModule\",\"id\",\"moduleInfo\",\"links\",\"insertPos\",\"document\",\"head\",\"documentElement\",\"trustedRequestUris\",\"push\",\"insertBefore\",\"firstChild\",\"loadStatus.successFn\",\"removeNode\",\"goog.module.ModuleLoader.prototype.downloadModules_\",\"sourceUrlInjection\",\"effectiveFlag\",\"asserts\",\"assert\",\"loadWithNonAsyncScriptTag_\",\"net\",\"jsloader\",\"safeLoadMany\",\"BulkLoader\",\"eventHandler\",\"listen\",\"EventType\",\"SUCCESS\",\"bind\",\"ERROR\",\"handleError_\",\"load\",\"goog.module.ModuleLoader.prototype.loadWithNonAsyncScriptTag_\",\"lastScript\",\"urlLength\",\"scriptElement\",\"onload\",\"scriptElement.onload\",\"onerror\",\"scriptElement.onerror\",\"goog.module.ModuleLoader.prototype.handleError_\",\"event\",\"status\",\"goog.module.ModuleLoader.prototype.handleErrorHelper_\",\"opt_error\",\"RequestErrorEvent\",\"EVALUATE_CODE\",\"EventId\",\"getUniqueId\",\"REQUEST_SUCCESS\",\"REQUEST_ERROR\",\"goog.module.ModuleLoader.EvaluateCodeEvent\",\"Event\",\"goog.module.ModuleLoader.RequestSuccessEvent\",\"goog.module.ModuleLoader.RequestErrorEvent\",\"goog.module.ModuleLoader.LoadStatus\",\"array\",\"map\",\"html\",\"TrustedResourceUrl\",\"unwrap\",\"goog.module.ModuleLoader.LoadStatus.createForIds_\",\"extend\",\"getUris\"]\n}\n"]