["^ ","~:output",["^ ","~:js","goog.provide('rams_ui.util');\nvar page_render_data_79976 = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nrams_ui.util.check_if_id_rendered = (function rams_ui$util$check_if_id_rendered(id){\nif(cljs.core.truth_(window.isDev)){\nif(cljs.core.contains_QMARK_(cljs.core.deref(page_render_data_79976),id)){\nreturn re_frame.core.dispatch(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"set-debug\",\"set-debug\",-1849522602),\"pre-rendered\",new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"id\",\"id\",-1388402092),id], null)], null));\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n});\n\n/**\n * Helper function that is called in any component that you wish to have its state saved into the current page data structure. It will raise an alarm when in development mode that the same id has been used\n */\nrams_ui.util.rendering_id = (function rams_ui$util$rendering_id(id){\nrams_ui.util.check_if_id_rendered(id);\n\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(page_render_data_79976,cljs.core.assoc,id,true);\n});\n\nrams_ui.util.reset_page_render = (function rams_ui$util$reset_page_render(){\nreturn cljs.core.reset_BANG_(page_render_data_79976,cljs.core.PersistentArrayMap.EMPTY);\n});\n/**\n * Helper function that should only be used inside reg-event-db/reg-event-fx to set the value of component defined by an id. It returns the modified db and should be the output of the reg-event-db or the :db value of the reg-event-fx.\n * \n *   - **db**: the db is what is given to the reg-event-db as the app-db state\n *   - **id**: is the id of the value we wish to change. It is critical here to only change values of ids you know as some elements require a particular hash map to work\n *   - **value**: is the value that we wish the id to have from now on\n *   - **persistent?**: is an optional boolean that indicates whether the id is supposed to be persistent or not. This is only valuable if the id belongs to a component that supports \n */\nrams_ui.util.set_db_value = (function rams_ui$util$set_db_value(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___79985 = arguments.length;\nvar i__4737__auto___79986 = (0);\nwhile(true){\nif((i__4737__auto___79986 < len__4736__auto___79985)){\nargs__4742__auto__.push((arguments[i__4737__auto___79986]));\n\nvar G__79987 = (i__4737__auto___79986 + (1));\ni__4737__auto___79986 = G__79987;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((3) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((3)),(0),null)):null);\nreturn rams_ui.util.set_db_value.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4743__auto__);\n});\n\n(rams_ui.util.set_db_value.cljs$core$IFn$_invoke$arity$variadic = (function (db,id,value,p__79658){\nvar map__79659 = p__79658;\nvar map__79659__$1 = (((((!((map__79659 == null))))?(((((map__79659.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79659.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79659):map__79659);\nvar persistent_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79659__$1,new cljs.core.Keyword(null,\"persistent?\",\"persistent?\",-945121801));\nvar found_in = (cljs.core.truth_(persistent_QMARK_)?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui\",\"rams4ui\",606403965),new cljs.core.Keyword(null,\"persistent-state\",\"persistent-state\",1129359492)], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui\",\"rams4ui\",606403965),new cljs.core.Keyword(null,\"current-state\",\"current-state\",1048284452)], null));\nreturn cljs.core.assoc_in(db,((cljs.core.vector_QMARK_(id))?cljs.core.concat.cljs$core$IFn$_invoke$arity$2(found_in,id):cljs.core.conj.cljs$core$IFn$_invoke$arity$2(found_in,id)),value);\n}));\n\n(rams_ui.util.set_db_value.cljs$lang$maxFixedArity = (3));\n\n/** @this {Function} */\n(rams_ui.util.set_db_value.cljs$lang$applyTo = (function (seq79654){\nvar G__79655 = cljs.core.first(seq79654);\nvar seq79654__$1 = cljs.core.next(seq79654);\nvar G__79656 = cljs.core.first(seq79654__$1);\nvar seq79654__$2 = cljs.core.next(seq79654__$1);\nvar G__79657 = cljs.core.first(seq79654__$2);\nvar seq79654__$3 = cljs.core.next(seq79654__$2);\nvar self__4723__auto__ = this;\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__79655,G__79656,G__79657,seq79654__$3);\n}));\n\n/**\n * Helper function that should only be used inside reg-event-db/reg-event-fx to retrive the value of component defined by an id. It is most helpful as it does not require us to know the exact keys that are needed in the app-db of hashmap\n * \n *   - **db**: the db is what is given to the reg-event-db as the app-db state\n *   - **id**: is the id of the value we wish to change. It is critical here to only change values of ids you know as some elements require a particular hash map to work\n *   - **persistent?**: is an optional boolean that indicates whether the id is supposed to be persistent or not. This is only valuable if the id belongs to a component that supports persistent?\n */\nrams_ui.util.get_db_value = (function rams_ui$util$get_db_value(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___79994 = arguments.length;\nvar i__4737__auto___79995 = (0);\nwhile(true){\nif((i__4737__auto___79995 < len__4736__auto___79994)){\nargs__4742__auto__.push((arguments[i__4737__auto___79995]));\n\nvar G__79996 = (i__4737__auto___79995 + (1));\ni__4737__auto___79995 = G__79996;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((2) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((2)),(0),null)):null);\nreturn rams_ui.util.get_db_value.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4743__auto__);\n});\n\n(rams_ui.util.get_db_value.cljs$core$IFn$_invoke$arity$variadic = (function (db,id,p__79674){\nvar map__79675 = p__79674;\nvar map__79675__$1 = (((((!((map__79675 == null))))?(((((map__79675.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79675.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79675):map__79675);\nvar persistent_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79675__$1,new cljs.core.Keyword(null,\"persistent?\",\"persistent?\",-945121801));\nvar found_in = (cljs.core.truth_(persistent_QMARK_)?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui\",\"rams4ui\",606403965),new cljs.core.Keyword(null,\"persistent-state\",\"persistent-state\",1129359492)], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui\",\"rams4ui\",606403965),new cljs.core.Keyword(null,\"current-state\",\"current-state\",1048284452)], null));\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(db,((cljs.core.vector_QMARK_(id))?cljs.core.concat.cljs$core$IFn$_invoke$arity$2(found_in,id):cljs.core.conj.cljs$core$IFn$_invoke$arity$2(found_in,id)));\n}));\n\n(rams_ui.util.get_db_value.cljs$lang$maxFixedArity = (2));\n\n/** @this {Function} */\n(rams_ui.util.get_db_value.cljs$lang$applyTo = (function (seq79663){\nvar G__79664 = cljs.core.first(seq79663);\nvar seq79663__$1 = cljs.core.next(seq79663);\nvar G__79665 = cljs.core.first(seq79663__$1);\nvar seq79663__$2 = cljs.core.next(seq79663__$1);\nvar self__4723__auto__ = this;\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__79664,G__79665,seq79663__$2);\n}));\n\n/**\n * Helper function that should only be used inside reg-event-db/reg-event-fx to set the error of component defined by an id. It returns the modified db and should be the output of the reg-event-db or the :db value of the reg-event-fx.\n * \n *   - **db**: the db is what is given to the reg-event-db as the app-db state\n *   - **id**: is the id of the value we wish to change. It is critical here to only change values of ids you know as some elements require a particular hash map to work\n *   - **value**: is the value that we wish the id to have from now on\n *   - **persistent?**: is an optional boolean that indicates whether the id is supposed to be persistent or not. This is only valuable if the id belongs to a component that supports \n */\nrams_ui.util.set_db_error = (function rams_ui$util$set_db_error(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___80003 = arguments.length;\nvar i__4737__auto___80005 = (0);\nwhile(true){\nif((i__4737__auto___80005 < len__4736__auto___80003)){\nargs__4742__auto__.push((arguments[i__4737__auto___80005]));\n\nvar G__80007 = (i__4737__auto___80005 + (1));\ni__4737__auto___80005 = G__80007;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((3) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((3)),(0),null)):null);\nreturn rams_ui.util.set_db_error.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__4743__auto__);\n});\n\n(rams_ui.util.set_db_error.cljs$core$IFn$_invoke$arity$variadic = (function (db,id,value,p__79709){\nvar map__79710 = p__79709;\nvar map__79710__$1 = (((((!((map__79710 == null))))?(((((map__79710.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79710.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79710):map__79710);\nvar persistent_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79710__$1,new cljs.core.Keyword(null,\"persistent?\",\"persistent?\",-945121801));\nvar found_in = (cljs.core.truth_(persistent_QMARK_)?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui\",\"rams4ui\",606403965),new cljs.core.Keyword(null,\"persistent-errors\",\"persistent-errors\",1198517115)], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui\",\"rams4ui\",606403965),new cljs.core.Keyword(null,\"current-errors\",\"current-errors\",1363504926)], null));\nreturn cljs.core.assoc_in(db,((cljs.core.vector_QMARK_(id))?cljs.core.concat.cljs$core$IFn$_invoke$arity$2(found_in,id):cljs.core.conj.cljs$core$IFn$_invoke$arity$2(found_in,id)),value);\n}));\n\n(rams_ui.util.set_db_error.cljs$lang$maxFixedArity = (3));\n\n/** @this {Function} */\n(rams_ui.util.set_db_error.cljs$lang$applyTo = (function (seq79697){\nvar G__79698 = cljs.core.first(seq79697);\nvar seq79697__$1 = cljs.core.next(seq79697);\nvar G__79699 = cljs.core.first(seq79697__$1);\nvar seq79697__$2 = cljs.core.next(seq79697__$1);\nvar G__79700 = cljs.core.first(seq79697__$2);\nvar seq79697__$3 = cljs.core.next(seq79697__$2);\nvar self__4723__auto__ = this;\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__79698,G__79699,G__79700,seq79697__$3);\n}));\n\n/**\n * Helper function that should only be used inside reg-event-db/reg-event-fx to retrive the error of component defined by an id. It is most helpful as it does not require us to know the exact keys that are needed in the app-db of hashmap\n * \n *   - **db**: the db is what is given to the reg-event-db as the app-db state\n *   - **id**: is the id of the value we wish to change. It is critical here to only change values of ids you know as some elements require a particular hash map to work\n *   - **persistent?**: is an optional boolean that indicates whether the id is supposed to be persistent or not. This is only valuable if the id belongs to a component that supports persistent?\n */\nrams_ui.util.get_db_error = (function rams_ui$util$get_db_error(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___80016 = arguments.length;\nvar i__4737__auto___80017 = (0);\nwhile(true){\nif((i__4737__auto___80017 < len__4736__auto___80016)){\nargs__4742__auto__.push((arguments[i__4737__auto___80017]));\n\nvar G__80018 = (i__4737__auto___80017 + (1));\ni__4737__auto___80017 = G__80018;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((2) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((2)),(0),null)):null);\nreturn rams_ui.util.get_db_error.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4743__auto__);\n});\n\n(rams_ui.util.get_db_error.cljs$core$IFn$_invoke$arity$variadic = (function (db,id,p__79728){\nvar map__79729 = p__79728;\nvar map__79729__$1 = (((((!((map__79729 == null))))?(((((map__79729.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79729.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79729):map__79729);\nvar persistent_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79729__$1,new cljs.core.Keyword(null,\"persistent?\",\"persistent?\",-945121801));\nvar found_in = (cljs.core.truth_(persistent_QMARK_)?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui\",\"rams4ui\",606403965),new cljs.core.Keyword(null,\"persistent-errors\",\"persistent-errors\",1198517115)], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui\",\"rams4ui\",606403965),new cljs.core.Keyword(null,\"current-errors\",\"current-errors\",1363504926)], null));\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(db,((cljs.core.vector_QMARK_(id))?cljs.core.concat.cljs$core$IFn$_invoke$arity$2(found_in,id):cljs.core.conj.cljs$core$IFn$_invoke$arity$2(found_in,id)));\n}));\n\n(rams_ui.util.get_db_error.cljs$lang$maxFixedArity = (2));\n\n/** @this {Function} */\n(rams_ui.util.get_db_error.cljs$lang$applyTo = (function (seq79713){\nvar G__79714 = cljs.core.first(seq79713);\nvar seq79713__$1 = cljs.core.next(seq79713);\nvar G__79715 = cljs.core.first(seq79713__$1);\nvar seq79713__$2 = cljs.core.next(seq79713__$1);\nvar self__4723__auto__ = this;\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__79714,G__79715,seq79713__$2);\n}));\n\nre_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"set-debug\",\"set-debug\",-1849522602),(function (db,p__79731){\nvar vec__79732 = p__79731;\nvar event = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79732,(0),null);\nvar action = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79732,(1),null);\nvar params = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79732,(2),null);\ncljs.core.print.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"[WARNING] Action: \",action,\" |  | Params: \",params], 0));\n\nreturn db;\n}));\nre_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"rams4ui|set-value\",\"rams4ui|set-value\",-1384526061),(function (db,p__79735){\nvar vec__79736 = p__79735;\nvar event = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79736,(0),null);\nvar item_id = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79736,(1),null);\nvar value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79736,(2),null);\nvar persistent_QMARK_ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79736,(3),null);\nvar found_in = (cljs.core.truth_(persistent_QMARK_)?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui\",\"rams4ui\",606403965),new cljs.core.Keyword(null,\"persistent-state\",\"persistent-state\",1129359492)], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui\",\"rams4ui\",606403965),new cljs.core.Keyword(null,\"current-state\",\"current-state\",1048284452)], null));\nreturn cljs.core.assoc_in(db,((cljs.core.vector_QMARK_(item_id))?cljs.core.concat.cljs$core$IFn$_invoke$arity$2(found_in,item_id):cljs.core.conj.cljs$core$IFn$_invoke$arity$2(found_in,item_id)),value);\n}));\nre_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"rams4ui|set-error\",\"rams4ui|set-error\",-264385733),(function (db,p__79740){\nvar vec__79741 = p__79740;\nvar event = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79741,(0),null);\nvar item_id = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79741,(1),null);\nvar value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79741,(2),null);\nvar persistent_QMARK_ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79741,(3),null);\nvar found_in = (cljs.core.truth_(persistent_QMARK_)?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui\",\"rams4ui\",606403965),new cljs.core.Keyword(null,\"persistent-errors\",\"persistent-errors\",1198517115)], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui\",\"rams4ui\",606403965),new cljs.core.Keyword(null,\"current-errors\",\"current-errors\",1363504926)], null));\nreturn cljs.core.assoc_in(db,((cljs.core.vector_QMARK_(item_id))?cljs.core.concat.cljs$core$IFn$_invoke$arity$2(found_in,item_id):cljs.core.conj.cljs$core$IFn$_invoke$arity$2(found_in,item_id)),value);\n}));\nre_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"rams4ui|set-loading\",\"rams4ui|set-loading\",1633832745),(function (db,p__79744){\nvar vec__79745 = p__79744;\nvar event = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79745,(0),null);\nvar item_id = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79745,(1),null);\nvar value = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79745,(2),null);\nvar persistent_QMARK_ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79745,(3),null);\nvar found_in = (cljs.core.truth_(persistent_QMARK_)?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui\",\"rams4ui\",606403965),new cljs.core.Keyword(null,\"persistent-loading\",\"persistent-loading\",-1134716244)], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui\",\"rams4ui\",606403965),new cljs.core.Keyword(null,\"current-loading\",\"current-loading\",1389813077)], null));\nreturn cljs.core.assoc_in(db,((cljs.core.vector_QMARK_(item_id))?cljs.core.concat.cljs$core$IFn$_invoke$arity$2(found_in,item_id):cljs.core.conj.cljs$core$IFn$_invoke$arity$2(found_in,item_id)),value);\n}));\nre_frame.core.reg_sub.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"rams4ui|get-value\",\"rams4ui|get-value\",234567166),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(function (db,p__79748){\nvar vec__79749 = p__79748;\nvar event = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79749,(0),null);\nvar item_id = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79749,(1),null);\nvar persistent_QMARK_ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79749,(2),null);\nvar found_in = (cljs.core.truth_(persistent_QMARK_)?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui\",\"rams4ui\",606403965),new cljs.core.Keyword(null,\"persistent-state\",\"persistent-state\",1129359492)], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui\",\"rams4ui\",606403965),new cljs.core.Keyword(null,\"current-state\",\"current-state\",1048284452)], null));\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(db,((cljs.core.vector_QMARK_(item_id))?cljs.core.concat.cljs$core$IFn$_invoke$arity$2(found_in,item_id):cljs.core.conj.cljs$core$IFn$_invoke$arity$2(found_in,item_id)));\n})], 0));\nre_frame.core.reg_sub.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"rams4ui|get-error\",\"rams4ui|get-error\",-805104615),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(function (db,p__79752){\nvar vec__79753 = p__79752;\nvar event = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79753,(0),null);\nvar item_id = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79753,(1),null);\nvar persistent_QMARK_ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79753,(2),null);\nvar found_in = (cljs.core.truth_(persistent_QMARK_)?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui\",\"rams4ui\",606403965),new cljs.core.Keyword(null,\"persistent-errors\",\"persistent-errors\",1198517115)], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui\",\"rams4ui\",606403965),new cljs.core.Keyword(null,\"current-errors\",\"current-errors\",1363504926)], null));\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(db,((cljs.core.vector_QMARK_(item_id))?cljs.core.concat.cljs$core$IFn$_invoke$arity$2(found_in,item_id):cljs.core.conj.cljs$core$IFn$_invoke$arity$2(found_in,item_id)));\n})], 0));\nre_frame.core.reg_sub.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"rams4ui|get-loading\",\"rams4ui|get-loading\",341070759),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(function (db,p__79761){\nvar vec__79762 = p__79761;\nvar event = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79762,(0),null);\nvar item_id = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79762,(1),null);\nvar persistent_QMARK_ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79762,(2),null);\nvar found_in = (cljs.core.truth_(persistent_QMARK_)?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui\",\"rams4ui\",606403965),new cljs.core.Keyword(null,\"persistent-loading\",\"persistent-loading\",-1134716244)], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui\",\"rams4ui\",606403965),new cljs.core.Keyword(null,\"current-loading\",\"current-loading\",1389813077)], null));\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(db,((cljs.core.vector_QMARK_(item_id))?cljs.core.concat.cljs$core$IFn$_invoke$arity$2(found_in,item_id):cljs.core.conj.cljs$core$IFn$_invoke$arity$2(found_in,item_id)));\n})], 0));\nre_frame.core.reg_sub.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"rams4ui|get-current-url\",\"rams4ui|get-current-url\",-398060574),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(function (db,p__79771){\nvar vec__79772 = p__79771;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79772,(0),null);\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(db,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui\",\"rams4ui\",606403965),new cljs.core.Keyword(null,\"current-url\",\"current-url\",-1470200930)], null));\n})], 0));\nre_frame.core.reg_sub.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"rams4ui|get-current-params\",\"rams4ui|get-current-params\",-1583611663),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(function (db,p__79775){\nvar vec__79781 = p__79775;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79781,(0),null);\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(db,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui\",\"rams4ui\",606403965),new cljs.core.Keyword(null,\"current-params\",\"current-params\",1384467996)], null));\n})], 0));\nre_frame.core.reg_sub.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"rams4ui|get-historical-pages\",\"rams4ui|get-historical-pages\",-35929322),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([(function (db,p__79785){\nvar vec__79786 = p__79785;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79786,(0),null);\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(db,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui\",\"rams4ui\",606403965),new cljs.core.Keyword(null,\"history-pages\",\"history-pages\",-2124405518)], null));\n})], 0));\nre_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"rams4ui|set-new-url\",\"rams4ui|set-new-url\",-1800599428),(function (db,p__79792){\nvar vec__79793 = p__79792;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79793,(0),null);\nvar params = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79793,(1),null);\nvar clear_history_QMARK_ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79793,(2),null);\nvar old_states = cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(db,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui\",\"rams4ui\",606403965),new cljs.core.Keyword(null,\"history-pages\",\"history-pages\",-2124405518)], null));\nvar old_states_len = cljs.core.count(old_states);\nvar take_counter = (cljs.core.truth_(clear_history_QMARK_)?(0):(function (){var items = cljs.core.reverse(old_states);\nvar counter = old_states_len;\nvar done = false;\nwhile(true){\nif(((done) || (cljs.core.empty_QMARK_(items)))){\nif(cljs.core.empty_QMARK_(items)){\nreturn cljs.core.count(old_states);\n} else {\nreturn counter;\n}\n} else {\nvar item = cljs.core.first(items);\nvar G__80037 = cljs.core.rest(items);\nvar G__80038 = (counter - (1));\nvar G__80039 = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"url\",\"url\",276297046).cljs$core$IFn$_invoke$arity$1(params),new cljs.core.Keyword(null,\"url\",\"url\",276297046).cljs$core$IFn$_invoke$arity$1(item))) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"params\",\"params\",710516235).cljs$core$IFn$_invoke$arity$1(params),new cljs.core.Keyword(null,\"params\",\"params\",710516235).cljs$core$IFn$_invoke$arity$1(item))));\nitems = G__80037;\ncounter = G__80038;\ndone = G__80039;\ncontinue;\n}\nbreak;\n}\n})());\nvar went_back_QMARK_ = (((take_counter > (0))) && ((take_counter < old_states_len)));\nvar last_state = (((take_counter > (0)))?cljs.core.nth.cljs$core$IFn$_invoke$arity$2(old_states,(take_counter - (1))):null);\nhistory.pushState(cljs.core.clj__GT_js(new cljs.core.Keyword(null,\"params\",\"params\",710516235).cljs$core$IFn$_invoke$arity$1(params)),new cljs.core.Keyword(null,\"label\",\"label\",1718410804).cljs$core$IFn$_invoke$arity$1(params),new cljs.core.Keyword(null,\"url\",\"url\",276297046).cljs$core$IFn$_invoke$arity$1(params));\n\nreturn cljs.core.assoc_in(cljs.core.assoc_in(cljs.core.assoc_in(cljs.core.assoc_in(cljs.core.assoc_in(db,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui\",\"rams4ui\",606403965),new cljs.core.Keyword(null,\"current-errors\",\"current-errors\",1363504926)], null),((went_back_QMARK_)?new cljs.core.Keyword(null,\"erros\",\"erros\",1162912104).cljs$core$IFn$_invoke$arity$1(last_state):new cljs.core.Keyword(null,\"errors\",\"errors\",-908790718).cljs$core$IFn$_invoke$arity$1(params))),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui\",\"rams4ui\",606403965),new cljs.core.Keyword(null,\"current-state\",\"current-state\",1048284452)], null),((went_back_QMARK_)?new cljs.core.Keyword(null,\"state\",\"state\",-1988618099).cljs$core$IFn$_invoke$arity$1(last_state):new cljs.core.Keyword(null,\"state\",\"state\",-1988618099).cljs$core$IFn$_invoke$arity$1(params))),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui\",\"rams4ui\",606403965),new cljs.core.Keyword(null,\"current-params\",\"current-params\",1384467996)], null),new cljs.core.Keyword(null,\"params\",\"params\",710516235).cljs$core$IFn$_invoke$arity$1(params)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui\",\"rams4ui\",606403965),new cljs.core.Keyword(null,\"current-url\",\"current-url\",-1470200930)], null),new cljs.core.Keyword(null,\"url\",\"url\",276297046).cljs$core$IFn$_invoke$arity$1(params)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui\",\"rams4ui\",606403965),new cljs.core.Keyword(null,\"history-pages\",\"history-pages\",-2124405518)], null),cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((cljs.core.truth_(last_state)?cljs.core.take.cljs$core$IFn$_invoke$arity$2((take_counter - (1)),old_states):null),(cljs.core.truth_((function (){var and__4115__auto__ = last_state;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(old_states_len,take_counter);\n} else {\nreturn and__4115__auto__;\n}\n})())?new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(last_state,new cljs.core.Keyword(null,\"errors\",\"errors\",-908790718),cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(db,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui\",\"rams4ui\",606403965),new cljs.core.Keyword(null,\"current-errors\",\"current-errors\",1363504926)], null)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"state\",\"state\",-1988618099),cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(db,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui\",\"rams4ui\",606403965),new cljs.core.Keyword(null,\"current-state\",\"current-state\",1048284452)], null))], 0))], null):null),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(params,new cljs.core.Keyword(null,\"label\",\"label\",1718410804),(cljs.core.truth_(new cljs.core.Keyword(null,\"label\",\"label\",1718410804).cljs$core$IFn$_invoke$arity$1(params))?new cljs.core.Keyword(null,\"label\",\"label\",1718410804).cljs$core$IFn$_invoke$arity$1(params):new cljs.core.Keyword(null,\"label\",\"label\",1718410804).cljs$core$IFn$_invoke$arity$1(last_state)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"errors\",\"errors\",-908790718),((went_back_QMARK_)?new cljs.core.Keyword(null,\"errors\",\"errors\",-908790718).cljs$core$IFn$_invoke$arity$1(last_state):new cljs.core.Keyword(null,\"errors\",\"errors\",-908790718).cljs$core$IFn$_invoke$arity$1(params)),new cljs.core.Keyword(null,\"state\",\"state\",-1988618099),((went_back_QMARK_)?new cljs.core.Keyword(null,\"state\",\"state\",-1988618099).cljs$core$IFn$_invoke$arity$1(last_state):new cljs.core.Keyword(null,\"state\",\"state\",-1988618099).cljs$core$IFn$_invoke$arity$1(params))], 0))], null)], 0)));\n}));\nre_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"rams4ui|go-back\",\"rams4ui|go-back\",1489758826),(function (db,p__79806){\nvar vec__79807 = p__79806;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79807,(0),null);\nvar steps = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79807,(1),null);\nvar keep_states = cljs.core.take.cljs$core$IFn$_invoke$arity$2((cljs.core.count(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(db,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui\",\"rams4ui\",606403965),new cljs.core.Keyword(null,\"history-pages\",\"history-pages\",-2124405518)], null))) - steps),cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(db,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui\",\"rams4ui\",606403965),new cljs.core.Keyword(null,\"history-pages\",\"history-pages\",-2124405518)], null)));\nvar last_state = cljs.core.last(keep_states);\nif(cljs.core.truth_((function (){var or__4126__auto__ = cljs.core.empty_QMARK_(keep_states);\nif(or__4126__auto__){\nreturn or__4126__auto__;\n} else {\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(db,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui\",\"rams4ui\",606403965),new cljs.core.Keyword(null,\"used-back?\",\"used-back?\",-1803690128)], null));\n}\n})())){\nreturn cljs.core.assoc_in(db,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui\",\"rams4ui\",606403965),new cljs.core.Keyword(null,\"used-back?\",\"used-back?\",-1803690128)], null),false);\n} else {\nhistory.go(((-1) * steps));\n\nreturn cljs.core.assoc_in(cljs.core.assoc_in(cljs.core.assoc_in(cljs.core.assoc_in(cljs.core.assoc_in(cljs.core.assoc_in(db,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui\",\"rams4ui\",606403965),new cljs.core.Keyword(null,\"used-back?\",\"used-back?\",-1803690128)], null),true),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui\",\"rams4ui\",606403965),new cljs.core.Keyword(null,\"current-errors\",\"current-errors\",1363504926)], null),new cljs.core.Keyword(null,\"errors\",\"errors\",-908790718).cljs$core$IFn$_invoke$arity$1(last_state)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui\",\"rams4ui\",606403965),new cljs.core.Keyword(null,\"current-state\",\"current-state\",1048284452)], null),new cljs.core.Keyword(null,\"state\",\"state\",-1988618099).cljs$core$IFn$_invoke$arity$1(last_state)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui\",\"rams4ui\",606403965),new cljs.core.Keyword(null,\"current-params\",\"current-params\",1384467996)], null),new cljs.core.Keyword(null,\"params\",\"params\",710516235).cljs$core$IFn$_invoke$arity$1(last_state)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui\",\"rams4ui\",606403965),new cljs.core.Keyword(null,\"current-url\",\"current-url\",-1470200930)], null),new cljs.core.Keyword(null,\"url\",\"url\",276297046).cljs$core$IFn$_invoke$arity$1(last_state)),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui\",\"rams4ui\",606403965),new cljs.core.Keyword(null,\"history-pages\",\"history-pages\",-2124405518)], null),keep_states);\n}\n}));\n/**\n * Helper function to go back to previous page. If given no arguments it will go back to the previous page otherwise if given a number it will go back those number of steps.\n */\nrams_ui.util.go_back = (function rams_ui$util$go_back(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___80057 = arguments.length;\nvar i__4737__auto___80058 = (0);\nwhile(true){\nif((i__4737__auto___80058 < len__4736__auto___80057)){\nargs__4742__auto__.push((arguments[i__4737__auto___80058]));\n\nvar G__80059 = (i__4737__auto___80058 + (1));\ni__4737__auto___80058 = G__80059;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((0) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((0)),(0),null)):null);\nreturn rams_ui.util.go_back.cljs$core$IFn$_invoke$arity$variadic(argseq__4743__auto__);\n});\n\n(rams_ui.util.go_back.cljs$core$IFn$_invoke$arity$variadic = (function (p__79845){\nvar vec__79846 = p__79845;\nvar steps = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79846,(0),null);\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79846,(1),null);\nreturn re_frame.core.dispatch(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui|go-back\",\"rams4ui|go-back\",1489758826),(cljs.core.truth_(steps)?steps:(1))], null));\n}));\n\n(rams_ui.util.go_back.cljs$lang$maxFixedArity = (0));\n\n/** @this {Function} */\n(rams_ui.util.go_back.cljs$lang$applyTo = (function (seq79825){\nvar self__4724__auto__ = this;\nreturn self__4724__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq79825));\n}));\n\n/**\n * Helper function to open a url. This adds the new url to the history state of the browser. It takes the following arguments:\n * \n *   - **url**: the relative url needed to open the page in question\n *   - **label**: a required label that will appear in the breadcrumb. Note that if the breadcrumb is not part of the system then this is optional\n *   - **params**: an optional hashmap of any parameters to be passed\n *   - **state**: an optional hashmap indicating the state of the page to be loaded\n *   - **clear-history?**: an optional parameter to indicate whether we should clear the breadcrumb or not\n */\nrams_ui.util.open_url = (function rams_ui$util$open_url(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___80060 = arguments.length;\nvar i__4737__auto___80061 = (0);\nwhile(true){\nif((i__4737__auto___80061 < len__4736__auto___80060)){\nargs__4742__auto__.push((arguments[i__4737__auto___80061]));\n\nvar G__80062 = (i__4737__auto___80061 + (1));\ni__4737__auto___80061 = G__80062;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((1) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((1)),(0),null)):null);\nreturn rams_ui.util.open_url.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4743__auto__);\n});\n\n(rams_ui.util.open_url.cljs$core$IFn$_invoke$arity$variadic = (function (url,p__79863){\nvar map__79864 = p__79863;\nvar map__79864__$1 = (((((!((map__79864 == null))))?(((((map__79864.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79864.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79864):map__79864);\nvar label = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79864__$1,new cljs.core.Keyword(null,\"label\",\"label\",1718410804));\nvar params = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79864__$1,new cljs.core.Keyword(null,\"params\",\"params\",710516235));\nvar state = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79864__$1,new cljs.core.Keyword(null,\"state\",\"state\",-1988618099));\nvar clear_history_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79864__$1,new cljs.core.Keyword(null,\"clear-history?\",\"clear-history?\",1674814374));\nreturn re_frame.core.dispatch(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui|set-new-url\",\"rams4ui|set-new-url\",-1800599428),new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"url\",\"url\",276297046),url,new cljs.core.Keyword(null,\"params\",\"params\",710516235),params,new cljs.core.Keyword(null,\"label\",\"label\",1718410804),label,new cljs.core.Keyword(null,\"state\",\"state\",-1988618099),state], null),clear_history_QMARK_], null));\n}));\n\n(rams_ui.util.open_url.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(rams_ui.util.open_url.cljs$lang$applyTo = (function (seq79852){\nvar G__79854 = cljs.core.first(seq79852);\nvar seq79852__$1 = cljs.core.next(seq79852);\nvar self__4723__auto__ = this;\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__79854,seq79852__$1);\n}));\n\nrams_ui.util.get_history = (function rams_ui$util$get_history(){\n\nreturn re_frame.core.subscribe.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui|get-historical-pages\",\"rams4ui|get-historical-pages\",-35929322)], null));\n});\nrams_ui.util.get_url = (function rams_ui$util$get_url(){\n\nreturn re_frame.core.subscribe.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui|get-current-url\",\"rams4ui|get-current-url\",-398060574)], null));\n});\nrams_ui.util.get_params = (function rams_ui$util$get_params(){\n\nreturn re_frame.core.subscribe.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui|get-current-params\",\"rams4ui|get-current-params\",-1583611663)], null));\n});\n/**\n * Helper function that sets the value of an id in the current state. id can be either keyword/string/number/array. Note that if id is for example an array [:form :input] then\n *   ```clojure\n *   (get-value [:form :input]) ;; will get the value of this one form\n *   (get-value :form) ;; will get a hashmap that will at least be {:input \"test\"} for example\n *   ```\n *   Note that this function takes two optional parameters that behave as follows:\n * \n *   - **persistent?**: identifies that the value will carry over from one page to the next\n *   - **model**: is an optional atom or reagent atom that is a hash map where the id is saved. Note that if this is used the id will not be saved in the global db and will neither be persistent nor will it be saved from one page to the next. Also note that this model should have been passed to set-value\n */\nrams_ui.util.set_value = (function rams_ui$util$set_value(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___80063 = arguments.length;\nvar i__4737__auto___80064 = (0);\nwhile(true){\nif((i__4737__auto___80064 < len__4736__auto___80063)){\nargs__4742__auto__.push((arguments[i__4737__auto___80064]));\n\nvar G__80065 = (i__4737__auto___80064 + (1));\ni__4737__auto___80064 = G__80065;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((2) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((2)),(0),null)):null);\nreturn rams_ui.util.set_value.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4743__auto__);\n});\n\n(rams_ui.util.set_value.cljs$core$IFn$_invoke$arity$variadic = (function (id,value,p__79885){\nvar map__79886 = p__79885;\nvar map__79886__$1 = (((((!((map__79886 == null))))?(((((map__79886.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79886.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79886):map__79886);\nvar persistent_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79886__$1,new cljs.core.Keyword(null,\"persistent?\",\"persistent?\",-945121801));\nvar model = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79886__$1,new cljs.core.Keyword(null,\"model\",\"model\",331153215));\nif(cljs.core.truth_(model)){\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(model,cljs.core.assoc_in,((cljs.core.vector_QMARK_(id))?id:new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [id], null)),value);\n} else {\nreturn re_frame.core.dispatch(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui|set-value\",\"rams4ui|set-value\",-1384526061),id,value,persistent_QMARK_], null));\n}\n}));\n\n(rams_ui.util.set_value.cljs$lang$maxFixedArity = (2));\n\n/** @this {Function} */\n(rams_ui.util.set_value.cljs$lang$applyTo = (function (seq79882){\nvar G__79883 = cljs.core.first(seq79882);\nvar seq79882__$1 = cljs.core.next(seq79882);\nvar G__79884 = cljs.core.first(seq79882__$1);\nvar seq79882__$2 = cljs.core.next(seq79882__$1);\nvar self__4723__auto__ = this;\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__79883,G__79884,seq79882__$2);\n}));\n\n/**\n * Helper function that get a subscription the value of an id in the page state. id can be either keyword/string/number/array. Note that if id is for example an array [:form :input] then\n *   ```clojure\n *   (get-value [:form :input]) ;; will get the value of this one form\n *   (get-value :form) ;; will get a hashmap that will at least be {:input \"test\"} for example\n *   ```\n * \n *   As a reminder since the return is a subscription it is critical to dreference it when using it. Also note that this will cause a reneder if the value of the id changes\n *   ```clojure\n *   (let [var (get-value [:form :input])]\n *  (print @var) ;; will return the actual value\n *  (print var) ;; will return a reference atom that can not be used directly\n *   )\n * \n *   Note that this function takes two optional parameters that behave as follows:\n * \n *   - **persistent?**: identifies that the value will carry over from one page to the next\n *   - **model**: is an optional atom or reagent atom that is a hash map where the id is saved. Note that if this is used the id will not be saved in the global db and will neither be persistent nor will it be saved from one page to the next. Also note that this model should have been passed to set-value\n *   ```\n */\nrams_ui.util.get_value = (function rams_ui$util$get_value(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___80068 = arguments.length;\nvar i__4737__auto___80069 = (0);\nwhile(true){\nif((i__4737__auto___80069 < len__4736__auto___80068)){\nargs__4742__auto__.push((arguments[i__4737__auto___80069]));\n\nvar G__80070 = (i__4737__auto___80069 + (1));\ni__4737__auto___80069 = G__80070;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((1) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((1)),(0),null)):null);\nreturn rams_ui.util.get_value.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4743__auto__);\n});\n\n(rams_ui.util.get_value.cljs$core$IFn$_invoke$arity$variadic = (function (id,p__79893){\nvar map__79895 = p__79893;\nvar map__79895__$1 = (((((!((map__79895 == null))))?(((((map__79895.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79895.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79895):map__79895);\nvar persistent_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79895__$1,new cljs.core.Keyword(null,\"persistent?\",\"persistent?\",-945121801));\nvar model = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79895__$1,new cljs.core.Keyword(null,\"model\",\"model\",331153215));\nif(cljs.core.truth_(model)){\nreturn cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(model),((cljs.core.vector_QMARK_(id))?id:new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [id], null))));\n} else {\nreturn re_frame.core.subscribe.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui|get-value\",\"rams4ui|get-value\",234567166),id,persistent_QMARK_], null));\n}\n}));\n\n(rams_ui.util.get_value.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(rams_ui.util.get_value.cljs$lang$applyTo = (function (seq79888){\nvar G__79889 = cljs.core.first(seq79888);\nvar seq79888__$1 = cljs.core.next(seq79888);\nvar self__4723__auto__ = this;\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__79889,seq79888__$1);\n}));\n\n/**\n * Helper function that sets the error of an id in the current state. id can be either keyword/string/number/array. Note that if id is for example an array [:form :input] then\n *   ```clojure\n *   (set-error [:form :input] \"an error\") ;; will set the error message\n *   (set-error [:form :input] true) ;; will set the error note\n *   ```\n *   Note that this function takes two optional parameters that behave as follows:\n * \n *   - **persistent?**: identifies that the value will carry over from one page to the next\n *   - **model**: is an optional atom or reagent atom that is a hash map. The id is saved in this hashmap under the key :errors. Note that if this is used the id will not be saved in the global db and will neither be persistent nor will it be saved from one page to the next. Also note that this model should have been passed to set-value\n */\nrams_ui.util.set_error = (function rams_ui$util$set_error(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___80073 = arguments.length;\nvar i__4737__auto___80074 = (0);\nwhile(true){\nif((i__4737__auto___80074 < len__4736__auto___80073)){\nargs__4742__auto__.push((arguments[i__4737__auto___80074]));\n\nvar G__80075 = (i__4737__auto___80074 + (1));\ni__4737__auto___80074 = G__80075;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((2) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((2)),(0),null)):null);\nreturn rams_ui.util.set_error.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4743__auto__);\n});\n\n(rams_ui.util.set_error.cljs$core$IFn$_invoke$arity$variadic = (function (id,value,p__79917){\nvar map__79918 = p__79917;\nvar map__79918__$1 = (((((!((map__79918 == null))))?(((((map__79918.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79918.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79918):map__79918);\nvar persistent_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79918__$1,new cljs.core.Keyword(null,\"persistent?\",\"persistent?\",-945121801));\nvar model = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79918__$1,new cljs.core.Keyword(null,\"model\",\"model\",331153215));\nif(cljs.core.truth_(model)){\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(model,cljs.core.assoc_in,((cljs.core.vector_QMARK_(id))?cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"errors\",\"errors\",-908790718)], null),id):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"errors\",\"errors\",-908790718),id], null)),value);\n} else {\nreturn re_frame.core.dispatch(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui|set-error\",\"rams4ui|set-error\",-264385733),id,value,persistent_QMARK_], null));\n}\n}));\n\n(rams_ui.util.set_error.cljs$lang$maxFixedArity = (2));\n\n/** @this {Function} */\n(rams_ui.util.set_error.cljs$lang$applyTo = (function (seq79908){\nvar G__79909 = cljs.core.first(seq79908);\nvar seq79908__$1 = cljs.core.next(seq79908);\nvar G__79910 = cljs.core.first(seq79908__$1);\nvar seq79908__$2 = cljs.core.next(seq79908__$1);\nvar self__4723__auto__ = this;\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__79909,G__79910,seq79908__$2);\n}));\n\n/**\n * Helper function that get a subscription the error of an id in the page state. id can be either keyword/string/number/array. Note that if id is for example an array [:form :input] then\n *   ```clojure\n *   (get-error [:form :input]) ;; will get the error of this one form item\n *   (get-error :form) ;; will get a hashmap that will at least be {:input \"test\"} for example\n *   ```\n * \n *   As a reminder since the return is a subscription it is critical to dreference it when using it. Also note that this will cause a reneder if the value of the id changes\n *   ```clojure\n *   (let [var (get-error [:form :input])]\n *  (print @var) ;; will return the error\n *  (print var) ;; will return a reference atom that can not be used directly\n *   )\n * \n *   Note that this function takes two optional parameters that behave as follows:\n * \n *   - **persistent?**: identifies that the value will carry over from one page to the next\n *   - **model**: is an optional atom or reagent atom that is a hash map. The id will should be in this hashmap under the key :errors. Note that if this is used the id will not be saved in the global db and will neither be persistent nor will it be saved from one page to the next. Also note that this model should have been passed to set-error\n *   ```\n */\nrams_ui.util.get_error = (function rams_ui$util$get_error(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___80078 = arguments.length;\nvar i__4737__auto___80079 = (0);\nwhile(true){\nif((i__4737__auto___80079 < len__4736__auto___80078)){\nargs__4742__auto__.push((arguments[i__4737__auto___80079]));\n\nvar G__80080 = (i__4737__auto___80079 + (1));\ni__4737__auto___80079 = G__80080;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((1) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((1)),(0),null)):null);\nreturn rams_ui.util.get_error.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4743__auto__);\n});\n\n(rams_ui.util.get_error.cljs$core$IFn$_invoke$arity$variadic = (function (id,p__79931){\nvar map__79932 = p__79931;\nvar map__79932__$1 = (((((!((map__79932 == null))))?(((((map__79932.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79932.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79932):map__79932);\nvar persistent_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79932__$1,new cljs.core.Keyword(null,\"persistent?\",\"persistent?\",-945121801));\nvar model = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79932__$1,new cljs.core.Keyword(null,\"model\",\"model\",331153215));\nif(cljs.core.truth_(model)){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(model),((cljs.core.vector_QMARK_(id))?cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"errors\",\"errors\",-908790718)], null),id):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"erros\",\"erros\",1162912104),id], null)));\n} else {\nreturn re_frame.core.subscribe.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui|get-error\",\"rams4ui|get-error\",-805104615),id,persistent_QMARK_], null));\n}\n}));\n\n(rams_ui.util.get_error.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(rams_ui.util.get_error.cljs$lang$applyTo = (function (seq79929){\nvar G__79930 = cljs.core.first(seq79929);\nvar seq79929__$1 = cljs.core.next(seq79929);\nvar self__4723__auto__ = this;\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__79930,seq79929__$1);\n}));\n\n/**\n * Helper function that sets the loading of an id in the current state. id can be either keyword/string/number/array. Note that if id is for example an array [:form :input] then\n *   ```clojure\n *   (set-error [:form :input] false) ;; will set the loading on\n *   (set-error [:form :input] true) ;; will hide the loading\n *   ```\n *   Note that this function takes two optional parameters that behave as follows:\n * \n *   - **persistent?**: identifies that the value will carry over from one page to the next\n *   - **model**: is an optional atom or reagent atom that is a hash map. The id is saved in this hashmap under the key :errors. Note that if this is used the id will not be saved in the global db and will neither be persistent nor will it be saved from one page to the next. Also note that this model should have been passed to set-value\n */\nrams_ui.util.set_loading = (function rams_ui$util$set_loading(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___80083 = arguments.length;\nvar i__4737__auto___80084 = (0);\nwhile(true){\nif((i__4737__auto___80084 < len__4736__auto___80083)){\nargs__4742__auto__.push((arguments[i__4737__auto___80084]));\n\nvar G__80085 = (i__4737__auto___80084 + (1));\ni__4737__auto___80084 = G__80085;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((2) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((2)),(0),null)):null);\nreturn rams_ui.util.set_loading.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4743__auto__);\n});\n\n(rams_ui.util.set_loading.cljs$core$IFn$_invoke$arity$variadic = (function (id,value,p__79941){\nvar map__79942 = p__79941;\nvar map__79942__$1 = (((((!((map__79942 == null))))?(((((map__79942.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79942.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79942):map__79942);\nvar persistent_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79942__$1,new cljs.core.Keyword(null,\"persistent?\",\"persistent?\",-945121801));\nvar model = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79942__$1,new cljs.core.Keyword(null,\"model\",\"model\",331153215));\nif(cljs.core.truth_(model)){\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(model,cljs.core.assoc_in,((cljs.core.vector_QMARK_(id))?cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"loading\",\"loading\",-737050189)], null),id):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"loading\",\"loading\",-737050189),id], null)),value);\n} else {\nreturn re_frame.core.dispatch(new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui|set-loading\",\"rams4ui|set-loading\",1633832745),id,value,persistent_QMARK_], null));\n}\n}));\n\n(rams_ui.util.set_loading.cljs$lang$maxFixedArity = (2));\n\n/** @this {Function} */\n(rams_ui.util.set_loading.cljs$lang$applyTo = (function (seq79938){\nvar G__79939 = cljs.core.first(seq79938);\nvar seq79938__$1 = cljs.core.next(seq79938);\nvar G__79940 = cljs.core.first(seq79938__$1);\nvar seq79938__$2 = cljs.core.next(seq79938__$1);\nvar self__4723__auto__ = this;\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__79939,G__79940,seq79938__$2);\n}));\n\n/**\n * Helper function that get a subscription the loading of an id in the page state. id can be either keyword/string/number/array. Note that if id is for example an array [:form :input] then\n *   ```clojure\n *   (get-error [:form :input]) ;; will get the error of this one form item\n *   (get-error :form) ;; will get a hashmap that will at least be {:input \"test\"} for example\n *   ```\n * \n *   As a reminder since the return is a subscription it is critical to dreference it when using it. Also note that this will cause a reneder if the value of the id changes\n *   ```clojure\n *   (let [var (get-error [:form :input])]\n *  (print @var) ;; will return the error\n *  (print var) ;; will return a reference atom that can not be used directly\n *   )\n * \n *   Note that this function takes two optional parameters that behave as follows:\n * \n *   - **persistent?**: identifies that the value will carry over from one page to the next\n *   - **model**: is an optional atom or reagent atom that is a hash map. The id will should be in this hashmap under the key :errors. Note that if this is used the id will not be saved in the global db and will neither be persistent nor will it be saved from one page to the next. Also note that this model should have been passed to set-error\n *   ```\n */\nrams_ui.util.get_loading = (function rams_ui$util$get_loading(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___80086 = arguments.length;\nvar i__4737__auto___80087 = (0);\nwhile(true){\nif((i__4737__auto___80087 < len__4736__auto___80086)){\nargs__4742__auto__.push((arguments[i__4737__auto___80087]));\n\nvar G__80088 = (i__4737__auto___80087 + (1));\ni__4737__auto___80087 = G__80088;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((1) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((1)),(0),null)):null);\nreturn rams_ui.util.get_loading.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4743__auto__);\n});\n\n(rams_ui.util.get_loading.cljs$core$IFn$_invoke$arity$variadic = (function (id,p__79954){\nvar map__79955 = p__79954;\nvar map__79955__$1 = (((((!((map__79955 == null))))?(((((map__79955.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__79955.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__79955):map__79955);\nvar persistent_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79955__$1,new cljs.core.Keyword(null,\"persistent?\",\"persistent?\",-945121801));\nvar model = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__79955__$1,new cljs.core.Keyword(null,\"model\",\"model\",331153215));\nif(cljs.core.truth_(model)){\nreturn cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(model),((cljs.core.vector_QMARK_(id))?cljs.core.concat.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"loading\",\"loading\",-737050189)], null),id):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"loading\",\"loading\",-737050189),id], null)));\n} else {\nreturn re_frame.core.subscribe.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"rams4ui|get-loading\",\"rams4ui|get-loading\",341070759),id,persistent_QMARK_], null));\n}\n}));\n\n(rams_ui.util.get_loading.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(rams_ui.util.get_loading.cljs$lang$applyTo = (function (seq79952){\nvar G__79953 = cljs.core.first(seq79952);\nvar seq79952__$1 = cljs.core.next(seq79952);\nvar self__4723__auto__ = this;\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__79953,seq79952__$1);\n}));\n\n/**\n * Helper function that gets a uuid string\n */\nrams_ui.util.gen_uuid = (function rams_ui$util$gen_uuid(){\nreturn cljs_uuid_utils.core.uuid_string(cljs_uuid_utils.core.make_random_uuid());\n});\n/**\n * allows to dissociate a nested key from a given hash map\n */\nrams_ui.util.dissoc_in = (function rams_ui$util$dissoc_in(m,p__79957){\nvar vec__79958 = p__79957;\nvar seq__79959 = cljs.core.seq(vec__79958);\nvar first__79960 = cljs.core.first(seq__79959);\nvar seq__79959__$1 = cljs.core.next(seq__79959);\nvar k = first__79960;\nvar ks = seq__79959__$1;\nif(cljs.core.not(ks)){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(m,k);\n} else {\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,k,(function (){var G__79961 = (m.cljs$core$IFn$_invoke$arity$1 ? m.cljs$core$IFn$_invoke$arity$1(k) : m.call(null,k));\nvar G__79962 = ks;\nreturn (rams_ui.util.dissoc_in.cljs$core$IFn$_invoke$arity$2 ? rams_ui.util.dissoc_in.cljs$core$IFn$_invoke$arity$2(G__79961,G__79962) : rams_ui.util.dissoc_in.call(null,G__79961,G__79962));\n})());\n}\n});\n/**\n * Returns a lazy sequence of the elements of coll, removing any elements that\n *   return duplicate values when passed to a function f.\n * \n *   - **f**: identifies the function that will be used for distinct. Remember that this can be even keyword since that is considered a function\n *   - **coll**: the list of elements that will be considered for checking distinct\n */\nrams_ui.util.distinct_by = (function rams_ui$util$distinct_by(f,coll){\nvar step = (function rams_ui$util$distinct_by_$_step(xs,seen){\nreturn (new cljs.core.LazySeq(null,(function (){\nreturn (function (p__79963,seen__$1){\nwhile(true){\nvar vec__79964 = p__79963;\nvar x = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__79964,(0),null);\nvar xs__$1 = vec__79964;\nvar temp__5735__auto__ = cljs.core.seq(xs__$1);\nif(temp__5735__auto__){\nvar s = temp__5735__auto__;\nvar fx = (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null,x));\nif(cljs.core.contains_QMARK_(seen__$1,fx)){\nvar G__80091 = cljs.core.rest(s);\nvar G__80092 = seen__$1;\np__79963 = G__80091;\nseen__$1 = G__80092;\ncontinue;\n} else {\nreturn cljs.core.cons(x,rams_ui$util$distinct_by_$_step(cljs.core.rest(s),cljs.core.conj.cljs$core$IFn$_invoke$arity$2(seen__$1,fx)));\n}\n} else {\nreturn null;\n}\nbreak;\n}\n})(xs,seen);\n}),null,null));\n});\nreturn step(coll,cljs.core.PersistentHashSet.EMPTY);\n});\n(window.onpopstate = (function (evt){\nvar pages = rams_ui.util.get_history();\nvar steps = (function (){var items = cljs.core.reverse(cljs.core.butlast(cljs.core.deref(pages)));\nvar counter = (0);\nvar done_QMARK_ = false;\nwhile(true){\nif(((done_QMARK_) || (cljs.core.empty_QMARK_(items)))){\nreturn counter;\n} else {\nvar item = cljs.core.first(items);\nvar G__80093 = cljs.core.rest(items);\nvar G__80094 = (counter + (1));\nvar G__80095 = ((cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"url\",\"url\",276297046).cljs$core$IFn$_invoke$arity$1(item),document.location.pathname)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1(evt.state),cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1(cljs.core.clj__GT_js(new cljs.core.Keyword(null,\"params\",\"params\",710516235).cljs$core$IFn$_invoke$arity$1(item))))));\nitems = G__80093;\ncounter = G__80094;\ndone_QMARK_ = G__80095;\ncontinue;\n}\nbreak;\n}\n})();\nevt.preventDefault();\n\nreturn rams_ui.util.go_back.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([steps], 0));\n}));\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","rams_ui/util.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",17],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint","~$clojure.spec.alpha","~$cljs.spec.alpha","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index","~$clojure.spec.gen.alpha","~$cljs.spec.gen.alpha"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$rams-ui.util","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs-uuid-utils.core","^Q","~$uuid-utils","^Q","~$re-frame.core","^S","~$cljs.core","^T","~$goog","^U"],"~:seen",["^J",["~:require"]],"~:uses",["^ ","~$dispatch","^S","~$subscribe","^S","~$reg-event-db","^S","~$reg-sub","^S"],"~:require-macros",["^ ","^T","^T"],"~:form",["~#list",["~$ns","^L",["^13",["^W",["^Q","~:as","^R"],["^S","~:refer",["^Y","^Z","^[","^10"]]]]]],"~:flags",["^ ","^W",["^J",[]]],"~:js-deps",["^ "],"~:deps",["^U","^T","^Q","^S"]],"^N","^L","~:resource-id",["~:shadow.build.classpath/resource","rams_ui/util.cljs"],"~:compiled-at",1622535565236,"~:resource-name","rams_ui/util.cljs","~:warnings",[],"~:source","(ns rams-ui.util\n  (:require [cljs-uuid-utils.core :as uuid-utils]\n            [re-frame.core :refer [dispatch subscribe reg-event-db\n                                   reg-sub]]))\n\n\n(let [page-render-data (atom {})]\n\n  (defn ^:no-doc check-if-id-rendered [id]\n    (when (.-isDev js/window)\n      (when (contains? @page-render-data id)\n        (dispatch [:set-debug \"pre-rendered\" {:id id}]))))\n\n  (defn rendering-id\n    \"Helper function that is called in any component that you wish to have its state saved into the current page data structure. It will raise an alarm when in development mode that the same id has been used\"\n    [id]\n    (check-if-id-rendered id)\n    (swap! page-render-data assoc id true))\n\n\n  (defn ^:no-doc reset-page-render []\n    (reset! page-render-data {})))\n\n\n(defn set-db-value\n  \"Helper function that should only be used inside reg-event-db/reg-event-fx to set the value of component defined by an id. It returns the modified db and should be the output of the reg-event-db or the :db value of the reg-event-fx.\n\n  - **db**: the db is what is given to the reg-event-db as the app-db state\n  - **id**: is the id of the value we wish to change. It is critical here to only change values of ids you know as some elements require a particular hash map to work\n  - **value**: is the value that we wish the id to have from now on\n  - **persistent?**: is an optional boolean that indicates whether the id is supposed to be persistent or not. This is only valuable if the id belongs to a component that supports \"\n  [db id value & {:keys [persistent?]}]\n  (let [found-in (if persistent?\n                    [:rams4ui :persistent-state]\n                    [:rams4ui :current-state])]\n    (assoc-in db (if (vector? id)\n                   (concat found-in id)\n                   (conj found-in id))\n              value)))\n\n\n(defn get-db-value\n  \"Helper function that should only be used inside reg-event-db/reg-event-fx to retrive the value of component defined by an id. It is most helpful as it does not require us to know the exact keys that are needed in the app-db of hashmap\n\n  - **db**: the db is what is given to the reg-event-db as the app-db state\n  - **id**: is the id of the value we wish to change. It is critical here to only change values of ids you know as some elements require a particular hash map to work\n  - **persistent?**: is an optional boolean that indicates whether the id is supposed to be persistent or not. This is only valuable if the id belongs to a component that supports persistent?\"\n  [db id  & {:keys [persistent?]}]\n  (let [found-in (if persistent?\n                    [:rams4ui :persistent-state]\n                    [:rams4ui :current-state])]\n    (get-in db (if (vector? id)\n                 (concat found-in id)\n                 (conj found-in id)))))\n\n\n(defn set-db-error\n  \"Helper function that should only be used inside reg-event-db/reg-event-fx to set the error of component defined by an id. It returns the modified db and should be the output of the reg-event-db or the :db value of the reg-event-fx.\n\n  - **db**: the db is what is given to the reg-event-db as the app-db state\n  - **id**: is the id of the value we wish to change. It is critical here to only change values of ids you know as some elements require a particular hash map to work\n  - **value**: is the value that we wish the id to have from now on\n  - **persistent?**: is an optional boolean that indicates whether the id is supposed to be persistent or not. This is only valuable if the id belongs to a component that supports \"\n  [db id value & {:keys [persistent?]}]\n  (let [found-in (if persistent?\n                    [:rams4ui :persistent-errors]\n                    [:rams4ui :current-errors])]\n    (assoc-in db (if (vector? id)\n                   (concat found-in id)\n                   (conj found-in id))\n              value)))\n\n\n(defn get-db-error\n  \"Helper function that should only be used inside reg-event-db/reg-event-fx to retrive the error of component defined by an id. It is most helpful as it does not require us to know the exact keys that are needed in the app-db of hashmap\n\n  - **db**: the db is what is given to the reg-event-db as the app-db state\n  - **id**: is the id of the value we wish to change. It is critical here to only change values of ids you know as some elements require a particular hash map to work\n  - **persistent?**: is an optional boolean that indicates whether the id is supposed to be persistent or not. This is only valuable if the id belongs to a component that supports persistent?\"\n  [db id  & {:keys [persistent?]}]\n  (let [found-in (if persistent?\n                    [:rams4ui :persistent-errors]\n                    [:rams4ui :current-errors])]\n    (get-in db (if (vector? id)\n                 (concat found-in id)\n                 (conj found-in id)))))\n\n\n(reg-event-db\n :set-debug\n (fn [db [event action params]]\n   (print \"[WARNING] Action: \" action \" |  | Params: \" params)\n   db))\n\n(reg-event-db\n :rams4ui|set-value\n (fn [db [event item-id value persistent?]]\n   (let [found-in (if persistent?\n                    [:rams4ui :persistent-state]\n                    [:rams4ui :current-state])]\n     (assoc-in db (if (vector? item-id)\n                    (concat found-in item-id)\n                    (conj found-in item-id))\n               value))))\n\n(reg-event-db\n :rams4ui|set-error\n (fn [db [event item-id value persistent?]]\n   (let [found-in (if persistent?\n                    [:rams4ui :persistent-errors]\n                    [:rams4ui :current-errors])]\n     (assoc-in db (if (vector? item-id)\n                    (concat found-in item-id)\n                    (conj found-in item-id))\n               value))))\n\n(reg-event-db\n :rams4ui|set-loading\n (fn [db [event item-id value persistent?]]\n   (let [found-in (if persistent?\n                    [:rams4ui :persistent-loading]\n                    [:rams4ui :current-loading])]\n     (assoc-in db (if (vector? item-id)\n                    (concat found-in item-id)\n                    (conj found-in item-id))\n               value))))\n\n\n(reg-sub\n :rams4ui|get-value\n (fn [db [event item-id persistent?]]\n   (let [found-in (if persistent?\n                    [:rams4ui :persistent-state]\n                    [:rams4ui :current-state])]\n     (get-in db (if (vector? item-id)\n                  (concat found-in item-id)\n                  (conj found-in item-id))))))\n\n(reg-sub\n :rams4ui|get-error\n (fn [db [event item-id persistent?]]\n   (let [found-in (if persistent?\n                    [:rams4ui :persistent-errors]\n                    [:rams4ui :current-errors])]\n     (get-in db (if (vector? item-id)\n                  (concat found-in item-id)\n                  (conj found-in item-id))))))\n\n(reg-sub\n :rams4ui|get-loading\n (fn [db [event item-id persistent?]]\n   (let [found-in (if persistent?\n                    [:rams4ui :persistent-loading]\n                    [:rams4ui :current-loading])]\n     (get-in db (if (vector? item-id)\n                  (concat found-in item-id)\n                  (conj found-in item-id))))))\n\n(reg-sub\n :rams4ui|get-current-url\n (fn [db [_]]\n   (get-in db [:rams4ui :current-url])))\n\n(reg-sub\n :rams4ui|get-current-params\n (fn [db [_]]\n   (get-in db [:rams4ui :current-params])))\n\n(reg-sub\n :rams4ui|get-historical-pages\n (fn [db [_]]\n   (get-in db [:rams4ui :history-pages])))\n\n\n(reg-event-db\n :rams4ui|set-new-url\n (fn [db [_ params clear-history?]]\n   (let [old-states (get-in db [:rams4ui :history-pages])\n         old-states-len (count old-states)\n         take-counter (if clear-history?\n                        0\n                        (loop [items (reverse old-states)\n                               counter old-states-len\n                               done false]\n                          (if (or done (empty? items))\n                            (if (empty? items)\n                              (count old-states)\n                              counter)\n                            (let [item (first items)]\n                              (recur (rest items)\n                                     (dec counter)\n                                     (and (= (:url params) (:url item))\n                                          (= (:params params) (:params item))))))))\n         went-back? (and (> take-counter 0)\n                         (< take-counter old-states-len))\n         last-state (when (> take-counter 0)\n                      (nth old-states (dec take-counter)))]\n     (.pushState js/history (clj->js (:params params))\n                 (:label params) (:url params))\n     (-> db\n         (assoc-in [:rams4ui :current-errors] (if went-back?\n                                               (:erros last-state)\n                                               (:errors params)))\n         (assoc-in [:rams4ui :current-state] (if went-back?\n                                               (:state last-state)\n                                               (:state params)))\n         (assoc-in [:rams4ui :current-params] (:params params))\n         (assoc-in [:rams4ui :current-url] (:url params))\n         (assoc-in [:rams4ui :history-pages]\n                   (concat (when last-state\n                             (take (dec take-counter) old-states))\n                           (when (and last-state\n                                      (= old-states-len take-counter))\n                             [(assoc last-state\n                                     :errors (get-in db [:rams4ui :current-errors])\n                                     :state (get-in db [:rams4ui :current-state]))])\n                           [(assoc params :label (if (:label params)\n                                                   (:label params)\n                                                   (:label last-state))\n                                   :errors (if went-back?\n                                             (:errors last-state)\n                                             (:errors params))\n                                   :state (if went-back?\n                                            (:state last-state)\n                                            (:state params)))]))))))\n\n(reg-event-db\n :rams4ui|go-back\n (fn [db [_ steps]]\n   (let [keep-states (take (- (count (get-in db [:rams4ui :history-pages]))\n                              steps)\n                           (get-in db [:rams4ui :history-pages]))\n         last-state (last keep-states)]\n     (if (or (empty? keep-states)\n             (get-in db [:rams4ui :used-back?]))\n       (assoc-in db [:rams4ui :used-back?] false)\n       (do\n         (.go js/history (* -1 steps))\n         (-> db\n             (assoc-in [:rams4ui :used-back?] true)\n             (assoc-in [:rams4ui :current-errors] (:errors last-state))\n             (assoc-in [:rams4ui :current-state] (:state last-state))\n             (assoc-in [:rams4ui :current-params] (:params last-state))\n             (assoc-in [:rams4ui :current-url] (:url last-state))\n             (assoc-in [:rams4ui :history-pages] keep-states)))))))\n\n\n(defn go-back\n  \"Helper function to go back to previous page. If given no arguments it will go back to the previous page otherwise if given a number it will go back those number of steps.\"\n  [& [steps _]]\n  (dispatch [:rams4ui|go-back (if steps steps 1)]))\n\n\n\n(defn open-url\n  \"Helper function to open a url. This adds the new url to the history state of the browser. It takes the following arguments:\n\n  - **url**: the relative url needed to open the page in question\n  - **label**: a required label that will appear in the breadcrumb. Note that if the breadcrumb is not part of the system then this is optional\n  - **params**: an optional hashmap of any parameters to be passed\n  - **state**: an optional hashmap indicating the state of the page to be loaded\n  - **clear-history?**: an optional parameter to indicate whether we should clear the breadcrumb or not\"\n  [url & {:keys [label params state clear-history?]}]\n  (dispatch [:rams4ui|set-new-url {:url url\n                                   :params params\n                                   :label label\n                                   :state state}\n             clear-history?]))\n\n\n\n(defn get-history []\n  \"Helper function that get a subscription to the array of historical pages that have been loaded. It should be noted that this list will include as the last entry the current page if opened through an open-url.\n\nBecause of the above it is recommended that in case the login page requires that a new template be loaded that the first page always be a loader page that then calls **open-url** this way the first page will also be part of the history\"\n  (subscribe [:rams4ui|get-historical-pages]))\n\n(defn get-url []\n  \"Helper function that get a subscription to the current url that is loaded. \"\n  (subscribe [:rams4ui|get-current-url]))\n\n(defn get-params []\n  \"Helper function that get a subscription to the hashmap of current page params\"\n  (subscribe [:rams4ui|get-current-params]))\n\n(defn set-value\n  \"Helper function that sets the value of an id in the current state. id can be either keyword/string/number/array. Note that if id is for example an array [:form :input] then\n  ```clojure\n  (get-value [:form :input]) ;; will get the value of this one form\n  (get-value :form) ;; will get a hashmap that will at least be {:input \\\"test\\\"} for example\n  ```\n  Note that this function takes two optional parameters that behave as follows:\n\n  - **persistent?**: identifies that the value will carry over from one page to the next\n  - **model**: is an optional atom or reagent atom that is a hash map where the id is saved. Note that if this is used the id will not be saved in the global db and will neither be persistent nor will it be saved from one page to the next. Also note that this model should have been passed to set-value\"\n  [id value & {:keys [persistent? model]}]\n  (if model\n    (swap! model assoc-in\n           (if (vector? id)\n             id\n             [id])\n           value)\n    (dispatch [:rams4ui|set-value id value persistent?])))\n\n\n(defn get-value\n  \"Helper function that get a subscription the value of an id in the page state. id can be either keyword/string/number/array. Note that if id is for example an array [:form :input] then\n  ```clojure\n  (get-value [:form :input]) ;; will get the value of this one form\n  (get-value :form) ;; will get a hashmap that will at least be {:input \\\"test\\\"} for example\n  ```\n\n  As a reminder since the return is a subscription it is critical to dreference it when using it. Also note that this will cause a reneder if the value of the id changes\n  ```clojure\n  (let [var (get-value [:form :input])]\n    (print @var) ;; will return the actual value\n    (print var) ;; will return a reference atom that can not be used directly\n  )\n\n  Note that this function takes two optional parameters that behave as follows:\n\n  - **persistent?**: identifies that the value will carry over from one page to the next\n  - **model**: is an optional atom or reagent atom that is a hash map where the id is saved. Note that if this is used the id will not be saved in the global db and will neither be persistent nor will it be saved from one page to the next. Also note that this model should have been passed to set-value\n  ```\"\n  [id & {:keys [persistent? model]}]\n  (if model\n    (atom (get-in @model (if (vector? id)\n                           id\n                           [id])))\n    (subscribe [:rams4ui|get-value id persistent?])))\n\n(defn set-error\n  \"Helper function that sets the error of an id in the current state. id can be either keyword/string/number/array. Note that if id is for example an array [:form :input] then\n  ```clojure\n  (set-error [:form :input] \\\"an error\\\") ;; will set the error message\n  (set-error [:form :input] true) ;; will set the error note\n  ```\n  Note that this function takes two optional parameters that behave as follows:\n\n  - **persistent?**: identifies that the value will carry over from one page to the next\n  - **model**: is an optional atom or reagent atom that is a hash map. The id is saved in this hashmap under the key :errors. Note that if this is used the id will not be saved in the global db and will neither be persistent nor will it be saved from one page to the next. Also note that this model should have been passed to set-value\"\n  [id value & {:keys [persistent? model]}]\n  (if model\n    (swap! model assoc-in\n           (if (vector? id)\n             (concat [:errors] id)\n             [:errors id])\n           value)\n    (dispatch [:rams4ui|set-error id value persistent?])))\n\n\n(defn get-error\n  \"Helper function that get a subscription the error of an id in the page state. id can be either keyword/string/number/array. Note that if id is for example an array [:form :input] then\n  ```clojure\n  (get-error [:form :input]) ;; will get the error of this one form item\n  (get-error :form) ;; will get a hashmap that will at least be {:input \\\"test\\\"} for example\n  ```\n\n  As a reminder since the return is a subscription it is critical to dreference it when using it. Also note that this will cause a reneder if the value of the id changes\n  ```clojure\n  (let [var (get-error [:form :input])]\n    (print @var) ;; will return the error\n    (print var) ;; will return a reference atom that can not be used directly\n  )\n\n  Note that this function takes two optional parameters that behave as follows:\n\n  - **persistent?**: identifies that the value will carry over from one page to the next\n  - **model**: is an optional atom or reagent atom that is a hash map. The id will should be in this hashmap under the key :errors. Note that if this is used the id will not be saved in the global db and will neither be persistent nor will it be saved from one page to the next. Also note that this model should have been passed to set-error\n  ```\"\n  [id & {:keys [persistent? model]}]\n  (if model\n    (get-in @model (if (vector? id)\n                     (concat [:errors] id)\n                     [:erros id]))\n    (subscribe [:rams4ui|get-error id persistent?])))\n\n(defn set-loading\n  \"Helper function that sets the loading of an id in the current state. id can be either keyword/string/number/array. Note that if id is for example an array [:form :input] then\n  ```clojure\n  (set-error [:form :input] false) ;; will set the loading on\n  (set-error [:form :input] true) ;; will hide the loading\n  ```\n  Note that this function takes two optional parameters that behave as follows:\n\n  - **persistent?**: identifies that the value will carry over from one page to the next\n  - **model**: is an optional atom or reagent atom that is a hash map. The id is saved in this hashmap under the key :errors. Note that if this is used the id will not be saved in the global db and will neither be persistent nor will it be saved from one page to the next. Also note that this model should have been passed to set-value\"\n  [id value & {:keys [persistent? model]}]\n  (if model\n    (swap! model assoc-in\n           (if (vector? id)\n             (concat [:loading] id)\n             [:loading id])\n           value)\n    (dispatch [:rams4ui|set-loading id value persistent?])))\n\n\n(defn get-loading\n  \"Helper function that get a subscription the loading of an id in the page state. id can be either keyword/string/number/array. Note that if id is for example an array [:form :input] then\n  ```clojure\n  (get-error [:form :input]) ;; will get the error of this one form item\n  (get-error :form) ;; will get a hashmap that will at least be {:input \\\"test\\\"} for example\n  ```\n\n  As a reminder since the return is a subscription it is critical to dreference it when using it. Also note that this will cause a reneder if the value of the id changes\n  ```clojure\n  (let [var (get-error [:form :input])]\n    (print @var) ;; will return the error\n    (print var) ;; will return a reference atom that can not be used directly\n  )\n\n  Note that this function takes two optional parameters that behave as follows:\n\n  - **persistent?**: identifies that the value will carry over from one page to the next\n  - **model**: is an optional atom or reagent atom that is a hash map. The id will should be in this hashmap under the key :errors. Note that if this is used the id will not be saved in the global db and will neither be persistent nor will it be saved from one page to the next. Also note that this model should have been passed to set-error\n  ```\"\n  [id & {:keys [persistent? model]}]\n  (if model\n    (get-in @model (if (vector? id)\n                     (concat [:loading] id)\n                     [:loading id]))\n    (subscribe [:rams4ui|get-loading id persistent?])))\n\n\n\n(defn gen-uuid\n  \"Helper function that gets a uuid string\"\n  []\n  (uuid-utils/uuid-string (uuid-utils/make-random-uuid)))\n\n(defn dissoc-in\n  \"allows to dissociate a nested key from a given hash map\"\n  [m [k & ks]]\n  (if-not ks\n    (dissoc m k)\n    (assoc m k (dissoc-in (m k) ks))))\n\n(defn distinct-by\n  \"Returns a lazy sequence of the elements of coll, removing any elements that\n  return duplicate values when passed to a function f.\n\n  - **f**: identifies the function that will be used for distinct. Remember that this can be even keyword since that is considered a function\n  - **coll**: the list of elements that will be considered for checking distinct\"\n  ([f coll]\n   (let [step (fn step [xs seen]\n                (lazy-seq\n                 ((fn [[x :as xs] seen]\n                    (when-let [s (seq xs)]\n                      (let [fx (f x)]\n                        (if (contains? seen fx)\n                          (recur (rest s) seen)\n                          (cons x (step (rest s) (conj seen fx)))))))\n                  xs seen)))]\n     (step coll #{}))))\n\n\n(set! (.-onpopstate js/window)\n      (fn [evt]\n        (let [pages (get-history)\n              steps (loop [items (reverse (butlast @pages))\n                           counter 0\n                           done? false]\n                      (if (or done? (empty? items))\n                        counter\n                        (let [item (first items)]\n                          (recur (rest items)\n                                 (inc counter)\n                                 (and (= (:url item) (.-pathname\n                                                      (.-location js/document)))\n                                      (= (js->clj (.-state evt))\n                                         (js->clj\n                                          (clj->js (:params item)))))))))]\n          (.preventDefault evt)\n          (go-back steps))))\n","~:reader-features",["^J",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["page-render-data","cljs.core.atom","rams-ui.util/check-if-id-rendered","id","js/window","cljs.core/deref","cljs.core/contains?","re-frame.core/dispatch","rams-ui.util/rendering-id","cljs.core.swap_BANG_","cljs.core/assoc","rams-ui.util/reset-page-render","cljs.core/reset!","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","rams-ui.util/set-db-value","p__79658","map__79659","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","seq79654","G__79655","cljs.core/first","cljs.core/next","G__79656","G__79657","self__4723__auto__","db","value","persistent?","found-in","cljs.core/assoc-in","cljs.core/vector?","cljs.core.concat","cljs.core.conj","rams-ui.util/get-db-value","p__79674","map__79675","seq79663","G__79664","G__79665","cljs.core.get_in","rams-ui.util/set-db-error","p__79709","map__79710","seq79697","G__79698","G__79699","G__79700","rams-ui.util/get-db-error","p__79728","map__79729","seq79713","G__79714","G__79715","re_frame.core.reg_event_db","p__79731","vec__79732","cljs.core.nth","event","action","params","cljs.core.print","p__79735","vec__79736","item-id","p__79740","vec__79741","p__79744","vec__79745","re_frame.core.reg_sub","p__79748","vec__79749","p__79752","vec__79753","p__79761","vec__79762","p__79771","vec__79772","_","p__79775","vec__79781","p__79785","vec__79786","p__79792","vec__79793","clear-history?","old-states","old-states-len","cljs.core/count","take-counter","items","cljs.core/reverse","counter","done","cljs.core/empty?","item","cljs.core/rest","cljs.core._EQ_","went-back?","last-state","js/history","cljs.core/clj->js","cljs.core.take","and__4115__auto__","cljs.core.assoc","p__79806","vec__79807","steps","keep-states","cljs.core/last","or__4126__auto__","rams-ui.util/go-back","p__79845","vec__79846","seq79825","self__4724__auto__","cljs.core/seq","rams-ui.util/open-url","p__79863","map__79864","seq79852","G__79854","url","label","state","rams-ui.util/get-history","re_frame.core.subscribe","rams-ui.util/get-url","rams-ui.util/get-params","rams-ui.util/set-value","p__79885","map__79886","seq79882","G__79883","G__79884","model","rams-ui.util/get-value","p__79893","map__79895","seq79888","G__79889","rams-ui.util/set-error","p__79917","map__79918","seq79908","G__79909","G__79910","rams-ui.util/get-error","p__79931","map__79932","seq79929","G__79930","rams-ui.util/set-loading","p__79941","map__79942","seq79938","G__79939","G__79940","rams-ui.util/get-loading","p__79954","map__79955","seq79952","G__79953","rams-ui.util/gen-uuid","cljs-uuid-utils.core/uuid-string","cljs-uuid-utils.core/make-random-uuid","p__79957","vec__79958","seq__79959","first__79960","rams-ui.util/dissoc-in","m","k","ks","cljs.core/not","cljs.core.dissoc","G__79961","G__79962","rams-ui.util/distinct-by","f","coll","step","xs","seen","cljs.core/LazySeq","p__79963","vec__79964","x","temp__5735__auto__","s","fx","cljs.core/cons","evt","pages","cljs.core/butlast","done?","js/document","cljs.core.js__GT_clj","rams_ui.util.go_back"]],"~:used-vars",["^J",["~$rams-ui.util/get-history","~$cljs.core/vector?","~$cljs.core/=","~$rams-ui.util/set-db-value","~$re-frame.core/dispatch","~$cljs.core/deref","~$cljs.core/seq","~$cljs.core/take","~$cljs.core/dissoc","~$cljs.core/atom","~$rams-ui.util/set-loading","~$cljs.core/concat","~$cljs.core/print","~$rams-ui.util/set-db-error","~$rams-ui.util/get-db-error","~$rams-ui.util/get-loading","~$re-frame.core/reg-event-db","~$rams-ui.util/gen-uuid","~$re-frame.core/subscribe","~$cljs.core/contains?","~$cljs.core/reset!","~$cljs.core/conj","~$rams-ui.util/check-if-id-rendered","~$rams-ui.util/go-back","~$rams-ui.util/get-error","~$rams-ui.util/get-url","~$cljs.core/get-in","~$cljs.core/swap!","~$cljs.core/clj->js","~$rams-ui.util/reset-page-render","~$rams-ui.util/get-params","~$rams-ui.util/get-value","~$cljs.core/not","~$re-frame.core/reg-sub","~$cljs-uuid-utils.core/make-random-uuid","~$cljs.core/assoc","~$rams-ui.util/get-db-value","~$cljs.core/assoc-in","~$cljs-uuid-utils.core/uuid-string","~$js/history","~$rams-ui.util/set-value","~$rams-ui.util/distinct-by","~$rams-ui.util/rendering-id","~$js/window","~$rams-ui.util/dissoc-in","~$rams-ui.util/open-url","~$rams-ui.util/set-error"]]],"~:cache-keys",["~#cmap",[["^1;","reagent/impl/batching.cljs"],["71172e9be671755156730f86af647b7c667093fa","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^J",[]],"~:deps-syms",["^U","^T","~$reagent.debug","~$reagent.impl.util"]]],["^1;","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","~$goog.dom.HtmlElement"]]],["^1;","goog/labs/useragent/platform.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","~$goog.labs.userAgent.util","~$goog.string"]]],["^1;","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","~$goog.array","~$goog.asserts"]]],["^1;","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U"]]],["^1;","goog/events/eventtype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","~$goog.events.BrowserFeature","~$goog.userAgent"]]],["^1;","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^2U","^2S","~$goog.object","~$goog.string.internal"]]],["^1;","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^2V","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^2Z"]]],["^1;","re_frame/loggers.cljc"],["0e1666916193eaabc7012c4a18450a0d00336095","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^T","~$clojure.set"]]],["^1;","cljs_uuid_utils/core.cljs"],["7afda15f1a7cefdfb65f633937bd53ed5e367bd5","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^T","~$clojure.string"]]],["^1;","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^2V"]]],["~:shadow.build.npm/resource","node_modules/prop-types/checkPropTypes.js"],["d2b3d9e8fa8186b8aeddfc91d01d70689433d1f4","39149bb2f5bbdb878453e592f8d1e15a126e08f5","3180f5f58c360a2e36c5ff354213b3ff22f43d1b","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["~$shadow.js","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"]]],["^1;","reagent/impl/util.cljs"],["71172e9be671755156730f86af647b7c667093fa","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^T","^36","~$clojure.walk","^2Y","^2P"]]],["^1;","goog/useragent/useragent.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine","~$goog.labs.userAgent.platform","^2S","~$goog.reflect","^2T"]]],["^1;","re_frame/router.cljc"],["0e1666916193eaabc7012c4a18450a0d00336095","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^T","~$re-frame.events","~$re-frame.interop","~$re-frame.loggers","~$re-frame.trace"]]],["^1;","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U"]]],["^1;","goog/events/events.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^2V","~$goog.debug.entryPointRegistry","~$goog.events.BrowserEvent","^2W","~$goog.events.Listenable","~$goog.events.ListenerMap"]]],["^1;","re_frame/registrar.cljc"],["0e1666916193eaabc7012c4a18450a0d00336095","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^T","^3@","^3A","~$re-frame.settings"]]],["^1;","goog/events/browserfeature.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^2X"]]],["^1;","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U"]]],["^1;","reagent/ratom.cljs"],["71172e9be671755156730f86af647b7c667093fa","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^T","^2Q","^2P","~$reagent.impl.batching","^35","^2Y"]]],["^1;","re_frame/interop.cljs"],["0e1666916193eaabc7012c4a18450a0d00336095","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^T","~$goog.async.nextTick","~$goog.events","~$reagent.core","~$reagent.ratom"]]],["^1;","goog/disposable/disposable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","~$goog.disposable.IDisposable"]]],["^1;","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U"]]],["^37","node_modules/react/index.js"],["d2b3d9e8fa8186b8aeddfc91d01d70689433d1f4","39149bb2f5bbdb878453e592f8d1e15a126e08f5","a69a7f3d4a4636bf9035bc53c05b2d99a7b8af7f","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^38","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"]]],["^1;","shadow/js.js"],["e789e354d6afe7fd62e5f7505a5a195575db182b","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U"]]],["^1;","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U"]]],["^1;","reagent/impl/template.cljs"],["71172e9be671755156730f86af647b7c667093fa","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^T","^C","^36","^2Q","~$reagent.impl.component","^3H","~$reagent.impl.input","~$reagent.impl.protocols","^3L","^2P","^2Y"]]],["^1;","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^2V"]]],"~:SHADOW-TIMESTAMP",[1619013417000,1619013417000,1615476662000],["^37","node_modules/react/cjs/react.development.js"],["d2b3d9e8fa8186b8aeddfc91d01d70689433d1f4","39149bb2f5bbdb878453e592f8d1e15a126e08f5","0c9d0acaa1ab1e24333c71607d0fa0609193e7d7","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^38","~$module$node_modules$object_assign$index","~$module$node_modules$prop_types$checkPropTypes"]]],["^1;","re_frame/events.cljc"],["0e1666916193eaabc7012c4a18450a0d00336095","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^T","~$re-frame.db","~$re-frame.utils","^3@","~$re-frame.registrar","^3A","~$re-frame.interceptor","^3B"]]],["^1;","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^2V","^3>"]]],["^1;","goog/events/listener.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","~$goog.events.ListenableKey"]]],["^1;","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^2V","~$goog.html.trustedtypes","^31","^32","^33","^34"]]],["^1;","goog/events/listenermap.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^2U","~$goog.events.Listener","^2Y"]]],["^1;","goog/events/eventid.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U"]]],["^1;","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U"]]],["^1;","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U"]]],["^1;","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^2U","^2V","~$goog.html.SafeUrl","^33","^34","^2Z"]]],["^1;","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^2V","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^41","^30","~$goog.html.uncheckedconversions","^33","^2Z"]]],["^1;","reagent/impl/component.cljs"],["71172e9be671755156730f86af647b7c667093fa","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^T","^2Y","^C","^2Q","^3H","^3R","^3L","^2P"]]],["^1;","clojure/walk.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^T"]]],["^1;","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^1;","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^2U","^2V","~$goog.dom.TagName","~$goog.dom.tags","^45","^46","~$goog.html.SafeStyleSheet","^41","^30","^3[","^31","^32","^3;","^2Y","^33","^34","^2Z"]]],["^1;","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^2Y"]]],["^1;","goog/math/size.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U"]]],["^1;","goog/labs/useragent/engine.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^2U","^2S","^2T"]]],["^1;","re_frame/settings.cljc"],["0e1666916193eaabc7012c4a18450a0d00336095","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^T","^3@","^3A"]]],["^1;","goog/dom/dom.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^2U","^2V","~$goog.dom.BrowserFeature","~$goog.dom.NodeType","^4:","~$goog.dom.safe","^44","^47","~$goog.math.Coordinate","~$goog.math.Size","^2Y","^2T","~$goog.string.Unicode","^2X"]]],["^1;","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","~$goog.debug.Error","^4>"]]],["^1;","reagent/impl/protocols.cljs"],["71172e9be671755156730f86af647b7c667093fa","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^T"]]],["^1;","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^2U","^2V","^2T","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^1;","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U"]]],["^37","node_modules/object-assign/index.js"],["d2b3d9e8fa8186b8aeddfc91d01d70689433d1f4","39149bb2f5bbdb878453e592f8d1e15a126e08f5","519ffd5a4c91b67302cc9947b794966d629860cd","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^38"]]],["^1;","rams_ui/util.cljs"],["b25bbd080649ebc3bb107c536af186296837233d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^T","^Q","^S"]]],["^1;","re_frame/db.cljc"],["0e1666916193eaabc7012c4a18450a0d00336095","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^T","^3@"]]],["^1;","goog/disposable/idisposable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U"]]],["^1;","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U"]]],["^1;","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",[]]],["^1;","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^2U","^2Y"]]],["^1;","clojure/string.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^T","^2T","~$goog.string.StringBuffer"]]],["^1;","re_frame/cofx.cljc"],["0e1666916193eaabc7012c4a18450a0d00336095","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^T","^3V","^3Y","^3X","^3A"]]],["^37","node_modules/react/cjs/react.production.min.js"],["d2b3d9e8fa8186b8aeddfc91d01d70689433d1f4","39149bb2f5bbdb878453e592f8d1e15a126e08f5","a25ef7d1b1992294ca65e96d70e1be7f70977b13","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^38","^3T"]]],["^1;","goog/debug/entrypointregistry.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^2V"]]],["^1;","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^4?","^47","^33","^2Z"]]],["^1;","re_frame/interceptor.cljc"],["0e1666916193eaabc7012c4a18450a0d00336095","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^T","^3A","^3@","^3B","^35"]]],["^1;","clojure/data.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^T","^35"]]],["^1;","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U"]]],["^1;","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^2Z"]]],["^1;","reagent/core.cljs"],["71172e9be671755156730f86af647b7c667093fa","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^T","^C","~$reagent.impl.template","^3P","^2Q","^3H","^3R","^3L","^2P"]]],["^1;","goog/debug/debug.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^2U","~$goog.debug.errorcontext","^2X"]]],["^1;","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U"]]],["^1;","goog/math/coordinate.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","~$goog.math"]]],["^1;","re_frame/std_interceptors.cljc"],["0e1666916193eaabc7012c4a18450a0d00336095","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^T","^3Y","^3A","^3G","^3V","~$clojure.data","~$re-frame.cofx","^3W","^3B"]]],["^1;","goog/debug/errorcontext.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U"]]],["^1;","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^2U","^2V","^43","^4L"]]],["^1;","goog/async/nexttick.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^3C","~$goog.dom","^4:","^4?","^43","^44","^30","^3;","^3<","^33"]]],["^1;","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^2V","^44","^45","^46","^4<","^41","^30","^33","^2Z"]]],["^1;","re_frame/utils.cljc"],["0e1666916193eaabc7012c4a18450a0d00336095","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^T","^3A"]]],["^1;","re_frame/fx.cljc"],["0e1666916193eaabc7012c4a18450a0d00336095","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^T","~$re-frame.router","^3V","^3Y","^3@","^3?","^3X","^3A","^3B"]]],["^37","node_modules/prop-types/lib/ReactPropTypesSecret.js"],["d2b3d9e8fa8186b8aeddfc91d01d70689433d1f4","39149bb2f5bbdb878453e592f8d1e15a126e08f5","4eec230c5b56ef580ea9c3e7ae6358ba1f8bdbec","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^38"]]],["^1;","reagent/impl/input.cljs"],["71172e9be671755156730f86af647b7c667093fa","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^T","^3P","^3H","^3R"]]],["^1;","goog/events/event.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","~$goog.Disposable","~$goog.events.EventId"]]],["^1;","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U"]]],["^1;","cljs/core.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","~$goog.math.Long","~$goog.math.Integer","^2T","^2Y","^2U","~$goog.Uri","^4I"]]],["^1;","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^2V","^3[","^33","^34"]]],["^1;","reagent/debug.cljs"],["71172e9be671755156730f86af647b7c667093fa","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^T"]]],["^1;","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^2U","^2V","^46","^2Y","^33","^34","^2Z"]]],["^1;","goog/events/browserevent.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","~$goog.debug","^2W","~$goog.events.Event","~$goog.events.EventType","^3>","^2X"]]],["^1;","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^3>"]]],["^1;","goog/dom/browserfeature.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^2X"]]],["^1;","clojure/set.cljs"],["9f9729dbbf9b814c83dc189977b447d2ae92b6cd","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^T"]]],["^1;","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^2U","^2V","^2T"]]],["^1;","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^2V","^34"]]],["^1;","goog/events/listenable.js"],["6025affb7181cd40418600864f58eed1ea80055d","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^4R"]]],["^1;","re_frame/trace.cljc"],["0e1666916193eaabc7012c4a18450a0d00336095","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^T","^3@","^3A","^43"]]],["^1;","re_frame/subs.cljc"],["0e1666916193eaabc7012c4a18450a0d00336095","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^T","^3V","^3@","^3A","^3W","^3X","^3B"]]],["^1;","re_frame/core.cljc"],["0e1666916193eaabc7012c4a18450a0d00336095","^2L",["^ ","^2M",null,"^2N",["^J",[]],"^2O",["^U","^T","^3?","~$re-frame.subs","^3@","^3V","~$re-frame.fx","^4N","^4P","^3G","^3A","^3X","^3Y","~$re-frame.std-interceptors","^3W","^35"]]]]],"~:clj-info",["^ ","jar:file:/home/zeinab/.m2/repository/reagent/reagent/1.0.0-alpha2/reagent-1.0.0-alpha2.jar!/reagent/interop.clj",1617273363000,"jar:file:/home/zeinab/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1612959675000,"jar:file:/home/zeinab/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1612959675000,"jar:file:/home/zeinab/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/analyzer.cljc",1615476662000,"jar:file:/home/zeinab/.m2/repository/binaryage/devtools/1.0.2/devtools-1.0.2.jar!/devtools/defaults.clj",1615476712000,"jar:file:/home/zeinab/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1614164416000,"jar:file:/home/zeinab/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64.clj",1615476662000,"jar:file:/home/zeinab/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1614164416000,"jar:file:/home/zeinab/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1612959675000,"jar:file:/home/zeinab/.m2/repository/re-frame/re-frame/1.1.1/re-frame-1.1.1.jar!/re_frame/interop.clj",1619000320000,"jar:file:/home/zeinab/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1612959675000,"jar:file:/home/zeinab/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/util.cljc",1615476662000,"jar:file:/home/zeinab/.m2/repository/net/cgrand/macrovich/0.2.1/macrovich-0.2.1.jar!/net/cgrand/macrovich.cljc",1614579236000,"jar:file:/home/zeinab/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/compiler.cljc",1615476662000,"jar:file:/home/zeinab/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/js_deps.cljc",1615476662000,"jar:file:/home/zeinab/.m2/repository/reagent/reagent/1.0.0-alpha2/reagent-1.0.0-alpha2.jar!/reagent/debug.clj",1617273363000,"jar:file:/home/zeinab/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1614164416000,"jar:file:/home/zeinab/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map.clj",1615476662000,"jar:file:/home/zeinab/.m2/repository/reagent/reagent/1.0.0-alpha2/reagent-1.0.0-alpha2.jar!/reagent/core.clj",1617273363000,"jar:file:/home/zeinab/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/env.cljc",1615476662000,"jar:file:/home/zeinab/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1612959676000,"jar:file:/home/zeinab/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1614164416000,"jar:file:/home/zeinab/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1614164416000,"jar:file:/home/zeinab/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/core.cljc",1615476662000,"jar:file:/home/zeinab/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1614164416000,"jar:file:/home/zeinab/.m2/repository/re-frame/re-frame/1.1.1/re-frame-1.1.1.jar!/re_frame/trace.cljc",1619000320000,"jar:file:/home/zeinab/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1614164416000,"jar:file:/home/zeinab/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1612959675000,"jar:file:/home/zeinab/.m2/repository/reagent/reagent/1.0.0-alpha2/reagent-1.0.0-alpha2.jar!/reagent/ratom.clj",1617273363000,"jar:file:/home/zeinab/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/source_map/base64_vlq.clj",1615476662000,"jar:file:/home/zeinab/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/externs.clj",1615476662000,"jar:file:/home/zeinab/.m2/repository/org/clojure/clojurescript/1.10.773/clojurescript-1.10.773.jar!/cljs/tagged_literals.cljc",1615476662000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","rams_ui/util.cljs","^7",1,"^8",5,"^9",1,"^:",17],"^;",["^ ","^<","^=","^>","^?","^@","^A","^B","^C","^D","^E","^F","^G"],"^H",null,"^I",["^J",[]],"~:shadow/js-access-properties",["^J",["isDev"]],"^K","^L","^O",null,"^P",["^ ","^Q","^Q","^R","^Q","^S","^S","^T","^T","^U","^U"],"^V",["^J",["^W"]],"~:shadow/js-access-global",["^J",["window","document","history"]],"^X",["^ ","^Y","^S","^Z","^S","^[","^S","^10","^S"],"~:defs",["^ ","~$get-loading",["^ ","~:protocol-inline",null,"^5",["^ ","^6","rams_ui/util.cljs","^7",398,"^8",7,"^9",398,"^:",18,"~:arglists",["^13",["~$quote",["^13",[["~$id","~$&",["^ ","~:keys",["~$persistent?","~$model"]]]]]]],"~:doc","Helper function that get a subscription the loading of an id in the page state. id can be either keyword/string/number/array. Note that if id is for example an array [:form :input] then\n  ```clojure\n  (get-error [:form :input]) ;; will get the error of this one form item\n  (get-error :form) ;; will get a hashmap that will at least be {:input \"test\"} for example\n  ```\n\n  As a reminder since the return is a subscription it is critical to dreference it when using it. Also note that this will cause a reneder if the value of the id changes\n  ```clojure\n  (let [var (get-error [:form :input])]\n    (print @var) ;; will return the error\n    (print var) ;; will return a reference atom that can not be used directly\n  )\n\n  Note that this function takes two optional parameters that behave as follows:\n\n  - **persistent?**: identifies that the value will carry over from one page to the next\n  - **model**: is an optional atom or reagent atom that is a hash map. The id will should be in this hashmap under the key :errors. Note that if this is used the id will not be saved in the global db and will neither be persistent nor will it be saved from one page to the next. Also note that this model should have been passed to set-error\n  ```","~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",1,"~:max-fixed-arity",1,"~:method-params",[["^13",["^5Y",["^ ","^5Z",["^5[","^60"]]]]],"^5W",["^13",[["^5Y","~$&",["^ ","^5Z",["^5[","^60"]]]]],"~:arglists-meta",["^13",[null]]]],"^K","^1V","^6","rams_ui/util.cljs","^:",18,"^62",["^ ","^63",true,"^64",1,"^65",1,"^66",[["^13",["^5Y",["^ ","^5Z",["^5[","^60"]]]]],"^5W",["^13",[["^5Y","~$&",["^ ","^5Z",["^5[","^60"]]]]],"^67",["^13",[null]]],"^66",[["^13",["^5Y",["^ ","^5Z",["^5[","^60"]]]]],"~:protocol-impl",null,"^64",1,"^67",["^13",[null]],"^8",1,"^63",true,"~:methods",[["^ ","^64",1,"^63",true,"~:tag",["^J",[null,"~$any"]]]],"^7",398,"~:ret-tag","^6;","^9",398,"^65",1,"~:fn-var",true,"^5W",["^13",[["^5Y","~$&",["^ ","^5Z",["^5[","^60"]]]]],"^61","Helper function that get a subscription the loading of an id in the page state. id can be either keyword/string/number/array. Note that if id is for example an array [:form :input] then\n  ```clojure\n  (get-error [:form :input]) ;; will get the error of this one form item\n  (get-error :form) ;; will get a hashmap that will at least be {:input \"test\"} for example\n  ```\n\n  As a reminder since the return is a subscription it is critical to dreference it when using it. Also note that this will cause a reneder if the value of the id changes\n  ```clojure\n  (let [var (get-error [:form :input])]\n    (print @var) ;; will return the error\n    (print var) ;; will return a reference atom that can not be used directly\n  )\n\n  Note that this function takes two optional parameters that behave as follows:\n\n  - **persistent?**: identifies that the value will carry over from one page to the next\n  - **model**: is an optional atom or reagent atom that is a hash map. The id will should be in this hashmap under the key :errors. Note that if this is used the id will not be saved in the global db and will neither be persistent nor will it be saved from one page to the next. Also note that this model should have been passed to set-error\n  ```"],"~$set-db-value",["^ ","^5V",null,"^5",["^ ","^6","rams_ui/util.cljs","^7",25,"^8",7,"^9",25,"^:",19,"^5W",["^13",["^5X",["^13",[["~$db","^5Y","~$value","~$&",["^ ","^5Z",["^5["]]]]]]],"^61","Helper function that should only be used inside reg-event-db/reg-event-fx to set the value of component defined by an id. It returns the modified db and should be the output of the reg-event-db or the :db value of the reg-event-fx.\n\n  - **db**: the db is what is given to the reg-event-db as the app-db state\n  - **id**: is the id of the value we wish to change. It is critical here to only change values of ids you know as some elements require a particular hash map to work\n  - **value**: is the value that we wish the id to have from now on\n  - **persistent?**: is an optional boolean that indicates whether the id is supposed to be persistent or not. This is only valuable if the id belongs to a component that supports ","^62",["^ ","^63",true,"^64",3,"^65",3,"^66",[["^13",["^6?","^5Y","^6@",["^ ","^5Z",["^5["]]]]],"^5W",["^13",[["^6?","^5Y","^6@","~$&",["^ ","^5Z",["^5["]]]]],"^67",["^13",[null]]]],"^K","^1J","^6","rams_ui/util.cljs","^:",19,"^62",["^ ","^63",true,"^64",3,"^65",3,"^66",[["^13",["^6?","^5Y","^6@",["^ ","^5Z",["^5["]]]]],"^5W",["^13",[["^6?","^5Y","^6@","~$&",["^ ","^5Z",["^5["]]]]],"^67",["^13",[null]]],"^66",[["^13",["^6?","^5Y","^6@",["^ ","^5Z",["^5["]]]]],"^68",null,"^64",3,"^67",["^13",[null]],"^8",1,"^63",true,"^69",[["^ ","^64",3,"^63",true,"^6:",["^J",["~$clj","^6;"]]]],"^7",25,"^6<","^6;","^9",25,"^65",3,"^6=",true,"^5W",["^13",[["^6?","^5Y","^6@","~$&",["^ ","^5Z",["^5["]]]]],"^61","Helper function that should only be used inside reg-event-db/reg-event-fx to set the value of component defined by an id. It returns the modified db and should be the output of the reg-event-db or the :db value of the reg-event-fx.\n\n  - **db**: the db is what is given to the reg-event-db as the app-db state\n  - **id**: is the id of the value we wish to change. It is critical here to only change values of ids you know as some elements require a particular hash map to work\n  - **value**: is the value that we wish the id to have from now on\n  - **persistent?**: is an optional boolean that indicates whether the id is supposed to be persistent or not. This is only valuable if the id belongs to a component that supports "],"~$dissoc-in",["^ ","^5V",null,"^5",["^ ","^6","rams_ui/util.cljs","^7",431,"^8",7,"^9",431,"^:",16,"^5W",["^13",["^5X",["^13",[["~$m",["~$k","~$&","~$ks"]]]]]],"^61","allows to dissociate a nested key from a given hash map"],"^K","^2G","^6","rams_ui/util.cljs","^:",16,"^66",["^13",[["~$m","~$p__79957"]]],"^68",null,"^67",["^13",[null,null]],"^8",1,"^63",false,"^7",431,"^6<",["^J",["^6A","^6;","~$clj-nil"]],"^9",431,"^65",2,"^6=",true,"^5W",["^13",["^5X",["^13",[["~$m",["~$k","~$&","^6C"]]]]]],"^61","allows to dissociate a nested key from a given hash map"],"~$open-url",["^ ","^5V",null,"^5",["^ ","^6","rams_ui/util.cljs","^7",255,"^8",7,"^9",255,"^:",15,"^5W",["^13",["^5X",["^13",[["~$url","~$&",["^ ","^5Z",["~$label","~$params","~$state","~$clear-history?"]]]]]]],"^61","Helper function to open a url. This adds the new url to the history state of the browser. It takes the following arguments:\n\n  - **url**: the relative url needed to open the page in question\n  - **label**: a required label that will appear in the breadcrumb. Note that if the breadcrumb is not part of the system then this is optional\n  - **params**: an optional hashmap of any parameters to be passed\n  - **state**: an optional hashmap indicating the state of the page to be loaded\n  - **clear-history?**: an optional parameter to indicate whether we should clear the breadcrumb or not","^62",["^ ","^63",true,"^64",1,"^65",1,"^66",[["^13",["^6G",["^ ","^5Z",["^6H","^6I","^6J","^6K"]]]]],"^5W",["^13",[["^6G","~$&",["^ ","^5Z",["^6H","^6I","^6J","^6K"]]]]],"^67",["^13",[null]]]],"^K","^2H","^6","rams_ui/util.cljs","^:",15,"^62",["^ ","^63",true,"^64",1,"^65",1,"^66",[["^13",["^6G",["^ ","^5Z",["^6H","^6I","^6J","^6K"]]]]],"^5W",["^13",[["^6G","~$&",["^ ","^5Z",["^6H","^6I","^6J","^6K"]]]]],"^67",["^13",[null]]],"^66",[["^13",["^6G",["^ ","^5Z",["^6H","^6I","^6J","^6K"]]]]],"^68",null,"^64",1,"^67",["^13",[null]],"^8",1,"^63",true,"^69",[["^ ","^64",1,"^63",true,"^6:","^6E"]],"^7",255,"^6<","^6;","^9",255,"^65",1,"^6=",true,"^5W",["^13",[["^6G","~$&",["^ ","^5Z",["^6H","^6I","^6J","^6K"]]]]],"^61","Helper function to open a url. This adds the new url to the history state of the browser. It takes the following arguments:\n\n  - **url**: the relative url needed to open the page in question\n  - **label**: a required label that will appear in the breadcrumb. Note that if the breadcrumb is not part of the system then this is optional\n  - **params**: an optional hashmap of any parameters to be passed\n  - **state**: an optional hashmap indicating the state of the page to be loaded\n  - **clear-history?**: an optional parameter to indicate whether we should clear the breadcrumb or not"],"~$set-db-error",["^ ","^5V",null,"^5",["^ ","^6","rams_ui/util.cljs","^7",57,"^8",7,"^9",57,"^:",19,"^5W",["^13",["^5X",["^13",[["^6?","^5Y","^6@","~$&",["^ ","^5Z",["^5["]]]]]]],"^61","Helper function that should only be used inside reg-event-db/reg-event-fx to set the error of component defined by an id. It returns the modified db and should be the output of the reg-event-db or the :db value of the reg-event-fx.\n\n  - **db**: the db is what is given to the reg-event-db as the app-db state\n  - **id**: is the id of the value we wish to change. It is critical here to only change values of ids you know as some elements require a particular hash map to work\n  - **value**: is the value that we wish the id to have from now on\n  - **persistent?**: is an optional boolean that indicates whether the id is supposed to be persistent or not. This is only valuable if the id belongs to a component that supports ","^62",["^ ","^63",true,"^64",3,"^65",3,"^66",[["^13",["^6?","^5Y","^6@",["^ ","^5Z",["^5["]]]]],"^5W",["^13",[["^6?","^5Y","^6@","~$&",["^ ","^5Z",["^5["]]]]],"^67",["^13",[null]]]],"^K","^1T","^6","rams_ui/util.cljs","^:",19,"^62",["^ ","^63",true,"^64",3,"^65",3,"^66",[["^13",["^6?","^5Y","^6@",["^ ","^5Z",["^5["]]]]],"^5W",["^13",[["^6?","^5Y","^6@","~$&",["^ ","^5Z",["^5["]]]]],"^67",["^13",[null]]],"^66",[["^13",["^6?","^5Y","^6@",["^ ","^5Z",["^5["]]]]],"^68",null,"^64",3,"^67",["^13",[null]],"^8",1,"^63",true,"^69",[["^ ","^64",3,"^63",true,"^6:",["^J",["^6A","^6;"]]]],"^7",57,"^6<","^6;","^9",57,"^65",3,"^6=",true,"^5W",["^13",[["^6?","^5Y","^6@","~$&",["^ ","^5Z",["^5["]]]]],"^61","Helper function that should only be used inside reg-event-db/reg-event-fx to set the error of component defined by an id. It returns the modified db and should be the output of the reg-event-db or the :db value of the reg-event-fx.\n\n  - **db**: the db is what is given to the reg-event-db as the app-db state\n  - **id**: is the id of the value we wish to change. It is critical here to only change values of ids you know as some elements require a particular hash map to work\n  - **value**: is the value that we wish the id to have from now on\n  - **persistent?**: is an optional boolean that indicates whether the id is supposed to be persistent or not. This is only valuable if the id belongs to a component that supports "],"~$get-history",["^ ","^5V",null,"^5",["^ ","^6","rams_ui/util.cljs","^7",272,"^8",7,"^9",272,"^:",18,"^5W",["^13",["^5X",["^13",[[]]]]]],"^K","^1G","^6","rams_ui/util.cljs","^:",18,"^66",["^13",[[]]],"^68",null,"^67",["^13",[null,null]],"^8",1,"^63",false,"^7",272,"^6<",["^J",[null,"^6;"]],"^9",272,"^65",0,"^6=",true,"^5W",["^13",["^5X",["^13",[[]]]]]],"~$distinct-by",["^ ","^5V",null,"^5",["^ ","^6","rams_ui/util.cljs","^7",438,"^8",7,"^9",438,"^:",18,"^5W",["^13",["^5X",["^13",[["~$f","~$coll"]]]]],"^61","Returns a lazy sequence of the elements of coll, removing any elements that\n  return duplicate values when passed to a function f.\n\n  - **f**: identifies the function that will be used for distinct. Remember that this can be even keyword since that is considered a function\n  - **coll**: the list of elements that will be considered for checking distinct"],"^K","^2D","^6","rams_ui/util.cljs","^:",18,"^66",["^13",[["~$f","^6O"]]],"^68",null,"^67",["^13",[null,null]],"^8",1,"^63",false,"^7",438,"^6<","~$cljs.core/LazySeq","^9",438,"^65",2,"^6=",true,"^5W",["^13",["^5X",["^13",[["~$f","^6O"]]]]],"^61","Returns a lazy sequence of the elements of coll, removing any elements that\n  return duplicate values when passed to a function f.\n\n  - **f**: identifies the function that will be used for distinct. Remember that this can be even keyword since that is considered a function\n  - **coll**: the list of elements that will be considered for checking distinct"],"~$gen-uuid",["^ ","^5V",null,"^5",["^ ","^6","rams_ui/util.cljs","^7",426,"^8",7,"^9",426,"^:",15,"^5W",["^13",["^5X",["^13",[[]]]]],"^61","Helper function that gets a uuid string"],"^K","^1X","^6","rams_ui/util.cljs","^:",15,"^66",["^13",[[]]],"^68",null,"^67",["^13",[null,null]],"^8",1,"^63",false,"^7",426,"^6<","~$string","^9",426,"^65",0,"^6=",true,"^5W",["^13",["^5X",["^13",[[]]]]],"^61","Helper function that gets a uuid string"],"~$get-error",["^ ","^5V",null,"^5",["^ ","^6","rams_ui/util.cljs","^7",352,"^8",7,"^9",352,"^:",16,"^5W",["^13",["^5X",["^13",[["^5Y","~$&",["^ ","^5Z",["^5[","^60"]]]]]]],"^61","Helper function that get a subscription the error of an id in the page state. id can be either keyword/string/number/array. Note that if id is for example an array [:form :input] then\n  ```clojure\n  (get-error [:form :input]) ;; will get the error of this one form item\n  (get-error :form) ;; will get a hashmap that will at least be {:input \"test\"} for example\n  ```\n\n  As a reminder since the return is a subscription it is critical to dreference it when using it. Also note that this will cause a reneder if the value of the id changes\n  ```clojure\n  (let [var (get-error [:form :input])]\n    (print @var) ;; will return the error\n    (print var) ;; will return a reference atom that can not be used directly\n  )\n\n  Note that this function takes two optional parameters that behave as follows:\n\n  - **persistent?**: identifies that the value will carry over from one page to the next\n  - **model**: is an optional atom or reagent atom that is a hash map. The id will should be in this hashmap under the key :errors. Note that if this is used the id will not be saved in the global db and will neither be persistent nor will it be saved from one page to the next. Also note that this model should have been passed to set-error\n  ```","^62",["^ ","^63",true,"^64",1,"^65",1,"^66",[["^13",["^5Y",["^ ","^5Z",["^5[","^60"]]]]],"^5W",["^13",[["^5Y","~$&",["^ ","^5Z",["^5[","^60"]]]]],"^67",["^13",[null]]]],"^K","^23","^6","rams_ui/util.cljs","^:",16,"^62",["^ ","^63",true,"^64",1,"^65",1,"^66",[["^13",["^5Y",["^ ","^5Z",["^5[","^60"]]]]],"^5W",["^13",[["^5Y","~$&",["^ ","^5Z",["^5[","^60"]]]]],"^67",["^13",[null]]],"^66",[["^13",["^5Y",["^ ","^5Z",["^5[","^60"]]]]],"^68",null,"^64",1,"^67",["^13",[null]],"^8",1,"^63",true,"^69",[["^ ","^64",1,"^63",true,"^6:",["^J",[null,"^6;"]]]],"^7",352,"^6<","^6;","^9",352,"^65",1,"^6=",true,"^5W",["^13",[["^5Y","~$&",["^ ","^5Z",["^5[","^60"]]]]],"^61","Helper function that get a subscription the error of an id in the page state. id can be either keyword/string/number/array. Note that if id is for example an array [:form :input] then\n  ```clojure\n  (get-error [:form :input]) ;; will get the error of this one form item\n  (get-error :form) ;; will get a hashmap that will at least be {:input \"test\"} for example\n  ```\n\n  As a reminder since the return is a subscription it is critical to dreference it when using it. Also note that this will cause a reneder if the value of the id changes\n  ```clojure\n  (let [var (get-error [:form :input])]\n    (print @var) ;; will return the error\n    (print var) ;; will return a reference atom that can not be used directly\n  )\n\n  Note that this function takes two optional parameters that behave as follows:\n\n  - **persistent?**: identifies that the value will carry over from one page to the next\n  - **model**: is an optional atom or reagent atom that is a hash map. The id will should be in this hashmap under the key :errors. Note that if this is used the id will not be saved in the global db and will neither be persistent nor will it be saved from one page to the next. Also note that this model should have been passed to set-error\n  ```"],"~$check-if-id-rendered",["^ ","~:no-doc",true,"^5V",null,"^5",["^ ","^6","rams_ui/util.cljs","^7",9,"^8",18,"^9",9,"^:",38,"^6U",true,"^5W",["^13",["^5X",["^13",[["^5Y"]]]]]],"^K","^21","^6","rams_ui/util.cljs","^:",38,"^66",["^13",[["^5Y"]]],"^68",null,"^67",["^13",[null,null]],"^8",3,"^63",false,"^7",9,"^6<","^6E","^9",9,"^65",1,"^6=",true,"^5W",["^13",["^5X",["^13",[["^5Y"]]]]]],"~$get-url",["^ ","^5V",null,"^5",["^ ","^6","rams_ui/util.cljs","^7",278,"^8",7,"^9",278,"^:",14,"^5W",["^13",["^5X",["^13",[[]]]]]],"^K","^24","^6","rams_ui/util.cljs","^:",14,"^66",["^13",[[]]],"^68",null,"^67",["^13",[null,null]],"^8",1,"^63",false,"^7",278,"^6<",["^J",[null,"^6;"]],"^9",278,"^65",0,"^6=",true,"^5W",["^13",["^5X",["^13",[[]]]]]],"~$set-loading",["^ ","^5V",null,"^5",["^ ","^6","rams_ui/util.cljs","^7",378,"^8",7,"^9",378,"^:",18,"^5W",["^13",["^5X",["^13",[["^5Y","^6@","~$&",["^ ","^5Z",["^5[","^60"]]]]]]],"^61","Helper function that sets the loading of an id in the current state. id can be either keyword/string/number/array. Note that if id is for example an array [:form :input] then\n  ```clojure\n  (set-error [:form :input] false) ;; will set the loading on\n  (set-error [:form :input] true) ;; will hide the loading\n  ```\n  Note that this function takes two optional parameters that behave as follows:\n\n  - **persistent?**: identifies that the value will carry over from one page to the next\n  - **model**: is an optional atom or reagent atom that is a hash map. The id is saved in this hashmap under the key :errors. Note that if this is used the id will not be saved in the global db and will neither be persistent nor will it be saved from one page to the next. Also note that this model should have been passed to set-value","^62",["^ ","^63",true,"^64",2,"^65",2,"^66",[["^13",["^5Y","^6@",["^ ","^5Z",["^5[","^60"]]]]],"^5W",["^13",[["^5Y","^6@","~$&",["^ ","^5Z",["^5[","^60"]]]]],"^67",["^13",[null]]]],"^K","^1Q","^6","rams_ui/util.cljs","^:",18,"^62",["^ ","^63",true,"^64",2,"^65",2,"^66",[["^13",["^5Y","^6@",["^ ","^5Z",["^5[","^60"]]]]],"^5W",["^13",[["^5Y","^6@","~$&",["^ ","^5Z",["^5[","^60"]]]]],"^67",["^13",[null]]],"^66",[["^13",["^5Y","^6@",["^ ","^5Z",["^5[","^60"]]]]],"^68",null,"^64",2,"^67",["^13",[null]],"^8",1,"^63",true,"^69",[["^ ","^64",2,"^63",true,"^6:",["^J",[null,"^6;","^6E"]]]],"^7",378,"^6<","^6;","^9",378,"^65",2,"^6=",true,"^5W",["^13",[["^5Y","^6@","~$&",["^ ","^5Z",["^5[","^60"]]]]],"^61","Helper function that sets the loading of an id in the current state. id can be either keyword/string/number/array. Note that if id is for example an array [:form :input] then\n  ```clojure\n  (set-error [:form :input] false) ;; will set the loading on\n  (set-error [:form :input] true) ;; will hide the loading\n  ```\n  Note that this function takes two optional parameters that behave as follows:\n\n  - **persistent?**: identifies that the value will carry over from one page to the next\n  - **model**: is an optional atom or reagent atom that is a hash map. The id is saved in this hashmap under the key :errors. Note that if this is used the id will not be saved in the global db and will neither be persistent nor will it be saved from one page to the next. Also note that this model should have been passed to set-value"],"~$go-back",["^ ","^5V",null,"^5",["^ ","^6","rams_ui/util.cljs","^7",248,"^8",7,"^9",248,"^:",14,"^5W",["^13",["^5X",["^13",[["~$&",["~$steps","~$_"]]]]]],"^61","Helper function to go back to previous page. If given no arguments it will go back to the previous page otherwise if given a number it will go back those number of steps.","^62",["^ ","^63",true,"^64",0,"^65",0,"^66",[["^13",[["^6Y","~$_"]]]],"^5W",["^13",[["~$&",["^6Y","~$_"]]]],"^67",["^13",[null]]]],"^K","^22","^6","rams_ui/util.cljs","^:",14,"^62",["^ ","^63",true,"^64",0,"^65",0,"^66",[["^13",[["^6Y","~$_"]]]],"^5W",["^13",[["~$&",["^6Y","~$_"]]]],"^67",["^13",[null]]],"^66",[["^13",[["^6Y","~$_"]]]],"^68",null,"^64",0,"^67",["^13",[null]],"^8",1,"^63",true,"^69",[["^ ","^64",0,"^63",true,"^6:","^6E"]],"^7",248,"^6<","^6;","^9",248,"^65",0,"^6=",true,"^5W",["^13",[["~$&",["^6Y","~$_"]]]],"^61","Helper function to go back to previous page. If given no arguments it will go back to the previous page otherwise if given a number it will go back those number of steps."],"~$get-value",["^ ","^5V",null,"^5",["^ ","^6","rams_ui/util.cljs","^7",306,"^8",7,"^9",306,"^:",16,"^5W",["^13",["^5X",["^13",[["^5Y","~$&",["^ ","^5Z",["^5[","^60"]]]]]]],"^61","Helper function that get a subscription the value of an id in the page state. id can be either keyword/string/number/array. Note that if id is for example an array [:form :input] then\n  ```clojure\n  (get-value [:form :input]) ;; will get the value of this one form\n  (get-value :form) ;; will get a hashmap that will at least be {:input \"test\"} for example\n  ```\n\n  As a reminder since the return is a subscription it is critical to dreference it when using it. Also note that this will cause a reneder if the value of the id changes\n  ```clojure\n  (let [var (get-value [:form :input])]\n    (print @var) ;; will return the actual value\n    (print var) ;; will return a reference atom that can not be used directly\n  )\n\n  Note that this function takes two optional parameters that behave as follows:\n\n  - **persistent?**: identifies that the value will carry over from one page to the next\n  - **model**: is an optional atom or reagent atom that is a hash map where the id is saved. Note that if this is used the id will not be saved in the global db and will neither be persistent nor will it be saved from one page to the next. Also note that this model should have been passed to set-value\n  ```","^62",["^ ","^63",true,"^64",1,"^65",1,"^66",[["^13",["^5Y",["^ ","^5Z",["^5[","^60"]]]]],"^5W",["^13",[["^5Y","~$&",["^ ","^5Z",["^5[","^60"]]]]],"^67",["^13",[null]]]],"^K","^2:","^6","rams_ui/util.cljs","^:",16,"^62",["^ ","^63",true,"^64",1,"^65",1,"^66",[["^13",["^5Y",["^ ","^5Z",["^5[","^60"]]]]],"^5W",["^13",[["^5Y","~$&",["^ ","^5Z",["^5[","^60"]]]]],"^67",["^13",[null]]],"^66",[["^13",["^5Y",["^ ","^5Z",["^5[","^60"]]]]],"^68",null,"^64",1,"^67",["^13",[null]],"^8",1,"^63",true,"^69",[["^ ","^64",1,"^63",true,"^6:",["^J",[null,"^6;","~$cljs.core/Atom"]]]],"^7",306,"^6<","^6;","^9",306,"^65",1,"^6=",true,"^5W",["^13",[["^5Y","~$&",["^ ","^5Z",["^5[","^60"]]]]],"^61","Helper function that get a subscription the value of an id in the page state. id can be either keyword/string/number/array. Note that if id is for example an array [:form :input] then\n  ```clojure\n  (get-value [:form :input]) ;; will get the value of this one form\n  (get-value :form) ;; will get a hashmap that will at least be {:input \"test\"} for example\n  ```\n\n  As a reminder since the return is a subscription it is critical to dreference it when using it. Also note that this will cause a reneder if the value of the id changes\n  ```clojure\n  (let [var (get-value [:form :input])]\n    (print @var) ;; will return the actual value\n    (print var) ;; will return a reference atom that can not be used directly\n  )\n\n  Note that this function takes two optional parameters that behave as follows:\n\n  - **persistent?**: identifies that the value will carry over from one page to the next\n  - **model**: is an optional atom or reagent atom that is a hash map where the id is saved. Note that if this is used the id will not be saved in the global db and will neither be persistent nor will it be saved from one page to the next. Also note that this model should have been passed to set-value\n  ```"],"~$get-params",["^ ","^5V",null,"^5",["^ ","^6","rams_ui/util.cljs","^7",282,"^8",7,"^9",282,"^:",17,"^5W",["^13",["^5X",["^13",[[]]]]]],"^K","^29","^6","rams_ui/util.cljs","^:",17,"^66",["^13",[[]]],"^68",null,"^67",["^13",[null,null]],"^8",1,"^63",false,"^7",282,"^6<",["^J",[null,"^6;"]],"^9",282,"^65",0,"^6=",true,"^5W",["^13",["^5X",["^13",[[]]]]]],"~$reset-page-render",["^ ","^6U",true,"^5V",null,"^5",["^ ","^6","rams_ui/util.cljs","^7",21,"^8",18,"^9",21,"^:",35,"^6U",true,"^5W",["^13",["^5X",["^13",[[]]]]]],"^K","^28","^6","rams_ui/util.cljs","^:",35,"^66",["^13",[[]]],"^68",null,"^67",["^13",[null,null]],"^8",3,"^63",false,"^7",21,"^6<",["^J",[null,"^6;"]],"^9",21,"^65",0,"^6=",true,"^5W",["^13",["^5X",["^13",[[]]]]]],"~$get-db-error",["^ ","^5V",null,"^5",["^ ","^6","rams_ui/util.cljs","^7",74,"^8",7,"^9",74,"^:",19,"^5W",["^13",["^5X",["^13",[["^6?","^5Y","~$&",["^ ","^5Z",["^5["]]]]]]],"^61","Helper function that should only be used inside reg-event-db/reg-event-fx to retrive the error of component defined by an id. It is most helpful as it does not require us to know the exact keys that are needed in the app-db of hashmap\n\n  - **db**: the db is what is given to the reg-event-db as the app-db state\n  - **id**: is the id of the value we wish to change. It is critical here to only change values of ids you know as some elements require a particular hash map to work\n  - **persistent?**: is an optional boolean that indicates whether the id is supposed to be persistent or not. This is only valuable if the id belongs to a component that supports persistent?","^62",["^ ","^63",true,"^64",2,"^65",2,"^66",[["^13",["^6?","^5Y",["^ ","^5Z",["^5["]]]]],"^5W",["^13",[["^6?","^5Y","~$&",["^ ","^5Z",["^5["]]]]],"^67",["^13",[null]]]],"^K","^1U","^6","rams_ui/util.cljs","^:",19,"^62",["^ ","^63",true,"^64",2,"^65",2,"^66",[["^13",["^6?","^5Y",["^ ","^5Z",["^5["]]]]],"^5W",["^13",[["^6?","^5Y","~$&",["^ ","^5Z",["^5["]]]]],"^67",["^13",[null]]],"^66",[["^13",["^6?","^5Y",["^ ","^5Z",["^5["]]]]],"^68",null,"^64",2,"^67",["^13",[null]],"^8",1,"^63",true,"^69",[["^ ","^64",2,"^63",true,"^6:",["^J",[null,"^6;"]]]],"^7",74,"^6<","^6;","^9",74,"^65",2,"^6=",true,"^5W",["^13",[["^6?","^5Y","~$&",["^ ","^5Z",["^5["]]]]],"^61","Helper function that should only be used inside reg-event-db/reg-event-fx to retrive the error of component defined by an id. It is most helpful as it does not require us to know the exact keys that are needed in the app-db of hashmap\n\n  - **db**: the db is what is given to the reg-event-db as the app-db state\n  - **id**: is the id of the value we wish to change. It is critical here to only change values of ids you know as some elements require a particular hash map to work\n  - **persistent?**: is an optional boolean that indicates whether the id is supposed to be persistent or not. This is only valuable if the id belongs to a component that supports persistent?"],"~$rendering-id",["^ ","^5V",null,"^5",["^ ","^6","rams_ui/util.cljs","^7",14,"^8",9,"^9",14,"^:",21,"^5W",["^13",["^5X",["^13",[["^5Y"]]]]],"^61","Helper function that is called in any component that you wish to have its state saved into the current page data structure. It will raise an alarm when in development mode that the same id has been used"],"^K","^2E","^6","rams_ui/util.cljs","^:",21,"^66",["^13",[["^5Y"]]],"^68",null,"^67",["^13",[null,null]],"^8",3,"^63",false,"^7",14,"^6<",["^J",[null,"^6;"]],"^9",14,"^65",1,"^6=",true,"^5W",["^13",["^5X",["^13",[["^5Y"]]]]],"^61","Helper function that is called in any component that you wish to have its state saved into the current page data structure. It will raise an alarm when in development mode that the same id has been used"],"~$set-error",["^ ","^5V",null,"^5",["^ ","^6","rams_ui/util.cljs","^7",332,"^8",7,"^9",332,"^:",16,"^5W",["^13",["^5X",["^13",[["^5Y","^6@","~$&",["^ ","^5Z",["^5[","^60"]]]]]]],"^61","Helper function that sets the error of an id in the current state. id can be either keyword/string/number/array. Note that if id is for example an array [:form :input] then\n  ```clojure\n  (set-error [:form :input] \"an error\") ;; will set the error message\n  (set-error [:form :input] true) ;; will set the error note\n  ```\n  Note that this function takes two optional parameters that behave as follows:\n\n  - **persistent?**: identifies that the value will carry over from one page to the next\n  - **model**: is an optional atom or reagent atom that is a hash map. The id is saved in this hashmap under the key :errors. Note that if this is used the id will not be saved in the global db and will neither be persistent nor will it be saved from one page to the next. Also note that this model should have been passed to set-value","^62",["^ ","^63",true,"^64",2,"^65",2,"^66",[["^13",["^5Y","^6@",["^ ","^5Z",["^5[","^60"]]]]],"^5W",["^13",[["^5Y","^6@","~$&",["^ ","^5Z",["^5[","^60"]]]]],"^67",["^13",[null]]]],"^K","^2I","^6","rams_ui/util.cljs","^:",16,"^62",["^ ","^63",true,"^64",2,"^65",2,"^66",[["^13",["^5Y","^6@",["^ ","^5Z",["^5[","^60"]]]]],"^5W",["^13",[["^5Y","^6@","~$&",["^ ","^5Z",["^5[","^60"]]]]],"^67",["^13",[null]]],"^66",[["^13",["^5Y","^6@",["^ ","^5Z",["^5[","^60"]]]]],"^68",null,"^64",2,"^67",["^13",[null]],"^8",1,"^63",true,"^69",[["^ ","^64",2,"^63",true,"^6:",["^J",[null,"^6;","^6E"]]]],"^7",332,"^6<","^6;","^9",332,"^65",2,"^6=",true,"^5W",["^13",[["^5Y","^6@","~$&",["^ ","^5Z",["^5[","^60"]]]]],"^61","Helper function that sets the error of an id in the current state. id can be either keyword/string/number/array. Note that if id is for example an array [:form :input] then\n  ```clojure\n  (set-error [:form :input] \"an error\") ;; will set the error message\n  (set-error [:form :input] true) ;; will set the error note\n  ```\n  Note that this function takes two optional parameters that behave as follows:\n\n  - **persistent?**: identifies that the value will carry over from one page to the next\n  - **model**: is an optional atom or reagent atom that is a hash map. The id is saved in this hashmap under the key :errors. Note that if this is used the id will not be saved in the global db and will neither be persistent nor will it be saved from one page to the next. Also note that this model should have been passed to set-value"],"~$get-db-value",["^ ","^5V",null,"^5",["^ ","^6","rams_ui/util.cljs","^7",42,"^8",7,"^9",42,"^:",19,"^5W",["^13",["^5X",["^13",[["^6?","^5Y","~$&",["^ ","^5Z",["^5["]]]]]]],"^61","Helper function that should only be used inside reg-event-db/reg-event-fx to retrive the value of component defined by an id. It is most helpful as it does not require us to know the exact keys that are needed in the app-db of hashmap\n\n  - **db**: the db is what is given to the reg-event-db as the app-db state\n  - **id**: is the id of the value we wish to change. It is critical here to only change values of ids you know as some elements require a particular hash map to work\n  - **persistent?**: is an optional boolean that indicates whether the id is supposed to be persistent or not. This is only valuable if the id belongs to a component that supports persistent?","^62",["^ ","^63",true,"^64",2,"^65",2,"^66",[["^13",["^6?","^5Y",["^ ","^5Z",["^5["]]]]],"^5W",["^13",[["^6?","^5Y","~$&",["^ ","^5Z",["^5["]]]]],"^67",["^13",[null]]]],"^K","^2?","^6","rams_ui/util.cljs","^:",19,"^62",["^ ","^63",true,"^64",2,"^65",2,"^66",[["^13",["^6?","^5Y",["^ ","^5Z",["^5["]]]]],"^5W",["^13",[["^6?","^5Y","~$&",["^ ","^5Z",["^5["]]]]],"^67",["^13",[null]]],"^66",[["^13",["^6?","^5Y",["^ ","^5Z",["^5["]]]]],"^68",null,"^64",2,"^67",["^13",[null]],"^8",1,"^63",true,"^69",[["^ ","^64",2,"^63",true,"^6:",["^J",[null,"^6;"]]]],"^7",42,"^6<","^6;","^9",42,"^65",2,"^6=",true,"^5W",["^13",[["^6?","^5Y","~$&",["^ ","^5Z",["^5["]]]]],"^61","Helper function that should only be used inside reg-event-db/reg-event-fx to retrive the value of component defined by an id. It is most helpful as it does not require us to know the exact keys that are needed in the app-db of hashmap\n\n  - **db**: the db is what is given to the reg-event-db as the app-db state\n  - **id**: is the id of the value we wish to change. It is critical here to only change values of ids you know as some elements require a particular hash map to work\n  - **persistent?**: is an optional boolean that indicates whether the id is supposed to be persistent or not. This is only valuable if the id belongs to a component that supports persistent?"],"~$set-value",["^ ","^5V",null,"^5",["^ ","^6","rams_ui/util.cljs","^7",286,"^8",7,"^9",286,"^:",16,"^5W",["^13",["^5X",["^13",[["^5Y","^6@","~$&",["^ ","^5Z",["^5[","^60"]]]]]]],"^61","Helper function that sets the value of an id in the current state. id can be either keyword/string/number/array. Note that if id is for example an array [:form :input] then\n  ```clojure\n  (get-value [:form :input]) ;; will get the value of this one form\n  (get-value :form) ;; will get a hashmap that will at least be {:input \"test\"} for example\n  ```\n  Note that this function takes two optional parameters that behave as follows:\n\n  - **persistent?**: identifies that the value will carry over from one page to the next\n  - **model**: is an optional atom or reagent atom that is a hash map where the id is saved. Note that if this is used the id will not be saved in the global db and will neither be persistent nor will it be saved from one page to the next. Also note that this model should have been passed to set-value","^62",["^ ","^63",true,"^64",2,"^65",2,"^66",[["^13",["^5Y","^6@",["^ ","^5Z",["^5[","^60"]]]]],"^5W",["^13",[["^5Y","^6@","~$&",["^ ","^5Z",["^5[","^60"]]]]],"^67",["^13",[null]]]],"^K","^2C","^6","rams_ui/util.cljs","^:",16,"^62",["^ ","^63",true,"^64",2,"^65",2,"^66",[["^13",["^5Y","^6@",["^ ","^5Z",["^5[","^60"]]]]],"^5W",["^13",[["^5Y","^6@","~$&",["^ ","^5Z",["^5[","^60"]]]]],"^67",["^13",[null]]],"^66",[["^13",["^5Y","^6@",["^ ","^5Z",["^5[","^60"]]]]],"^68",null,"^64",2,"^67",["^13",[null]],"^8",1,"^63",true,"^69",[["^ ","^64",2,"^63",true,"^6:",["^J",[null,"^6;","^6E"]]]],"^7",286,"^6<","^6;","^9",286,"^65",2,"^6=",true,"^5W",["^13",[["^5Y","^6@","~$&",["^ ","^5Z",["^5[","^60"]]]]],"^61","Helper function that sets the value of an id in the current state. id can be either keyword/string/number/array. Note that if id is for example an array [:form :input] then\n  ```clojure\n  (get-value [:form :input]) ;; will get the value of this one form\n  (get-value :form) ;; will get a hashmap that will at least be {:input \"test\"} for example\n  ```\n  Note that this function takes two optional parameters that behave as follows:\n\n  - **persistent?**: identifies that the value will carry over from one page to the next\n  - **model**: is an optional atom or reagent atom that is a hash map where the id is saved. Note that if this is used the id will not be saved in the global db and will neither be persistent nor will it be saved from one page to the next. Also note that this model should have been passed to set-value"]],"^11",["^ ","^T","^T"],"~:cljs.analyzer/constants",["^ ","^V",["^J",["~:errors","~:rams4ui|get-current-url","~:persistent-state","~:current-state","~:clear-history?","~:rams4ui|get-loading","~:erros","~:rams4ui|set-loading","~:rams4ui|go-back","~:params","~:persistent-loading","~:state","~:used-back?","~:rams4ui|get-current-params","~:history-pages","~:loading","~:rams4ui|set-value","~:label","~:id","~:current-loading","~:url","~:set-debug","~:rams4ui|get-historical-pages","~:persistent?","~:rams4ui|get-error","~:rams4ui|set-error","~:persistent-errors","~:rams4ui|set-new-url","~:current-params","~:rams4ui","~:rams4ui|get-value","~:current-errors","~:current-url","~:model"]],"~:order",["^7M","^7J","^7O","^7U","^7:","^7;","^7R","^7W","^7H","^7Q","^7?","^7B","^7K","^7V","^7P","^7=","^79","^7X","^7E","^7T","^7N","^7F","^7S","^7L","^7A","^7I","^7>","^78","^7C","^7@","^7D","^7<","^7Y","^7G"]],"^17",["^ ","^W",["^J",[]]],"^18",["^ "],"^19",["^U","^T","^Q","^S"]],"^N","^L","~:ns-specs",["^ "],"~:ns-spec-vars",["^J",[]],"~:compiler-options",["^2K",[["^81","~:static-fns"],true,["^81","~:shadow-tweaks"],null,["^81","~:source-map-inline"],null,["^81","~:elide-asserts"],false,["^81","~:optimize-constants"],null,["^81","^1>"],null,["^81","~:external-config"],null,["^81","~:tooling-config"],null,["^81","~:emit-constants"],null,["^81","~:load-tests"],null,["^81","~:form-size-threshold"],null,["^81","~:data-readers"],null,["^81","~:infer-externs"],"~:auto",["^81","^1@"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^81","~:fn-invoke-direct"],null,["^81","~:source-map"],"/dev/null"]]]