{"version":3,"sources":["cljs_uuid_utils/core.cljs"],"mappings":";AAmBA;;;;;;;;;;;;;AAAA,AAAMA,AAYHC;AAZH,AAaE,AAAK,AAAQA;;AAGf;;;;;;;;;;;;;AAAA,AAAMC;AAAN,AAaE,AAAA;AAAA,AAAwB,AAAA,AAAW,AAAA,AAAK,AAAA,AAAG,AAAU,AAAAC;;AAArD;AAAA,AACc,AAAA,AAAW,AAAA,AAACC;;AAD1B;AAAA,AAEc,AAAA,AAAY,AAAA,AAAY,AAAA,AAAa,AAAA,AAACA;;AAFpD,AAGE,AAAAC,AAAA,AAAM,AAACC,AAAY,AAAA,AAAA,AAAA,AAAA,AAACC,AACA,AAACC,AACD,AAAA,AAACC,AAAaC,AACd,AAAA,AAACD,AAAaC,AACd,AAACC,AAAG,AAAA,AAACF,AAAaC,AAClB,AAAA,AAACD,AAAcC;;AAGvC;;;;;;;;;;;AAAA,AAAME;AAAN,AAWE,AAAA;AAAA,AAAc,AAAA,AAAW,AAAA,AAACR;;AAA1B;AAAA,AACc,AAAA,AAAY,AAAA,AAAY,AAAA,AAAa,AAAA,AAACA;;AADpD,AAEE,AAAAC,AAAA,AAAM,AAACC,AAAY,AAAA,AAAA,AAAA,AAAA,AAACC,AACA,AAAA,AAACE,AAAaC,AACd,AAAA,AAACD,AAAaC,AACd,AAAA,AAACD,AAAaC,AACd,AAACC,AAAG,AAAA,AAACF,AAAaC,AAClB,AAAA,AAACD,AAAcC;;AAGvC,AAAeG,AACb,AAAA,AAAMC;AAAN,AAAuB,AAACC,AAAW,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAC7BD,AAAEA,AAAEA,AAAEA,AAAEA,AAAEA,AAAEA,AAAEA,AAAMA,AAAEA,AAAEA,AAAEA,AAAMA,AAAEA,AAAEA,AAAEA,AAAMA,AAAEA,AAAEA,AAAEA,AAAMA,AAAEA,AAAEA,AAAEA,AAAEA,AAAEA,AAAEA,AAAEA,AAAEA,AAAEA,AAAEA,AAAEA;;AAGtF;;;;;;;;;;;;;;;;AAAA,AAAME,AAeHC;AAfH,AAgBE,AAAMC,AAAe,AAAA,AAAA,AAAA,AACE,AAACC,AAAE,AAACC,AAAKH,AAAYZ,AAAgB,AAACL,AAAYiB,AAClD,AAASA,AAAYA;;AAF5C,AAIE,AAAMC;AAAN,AAAqB,AAACG,AAAQR,AAAWK;;AAAzC;;;AAMJ;;;;;;;;;;;;;;;AAAA,AAAMI,AAcHL;AAdH,AAeE,AAAAM,AAAgB,AAACP,AAAYC;AAA7B,AAAA,AAAAM;AAAA,AAAA,AAAAA,AAAWC;AAAX,AACE,AAAI,AAACL,AAAE,AAACC,AAAKH,AAAYZ;AACvBY;;AACA,AAAAZ,AAAA,AAAOmB;;;AAHX","names":["cljs-uuid-utils.core/uuid-string","a-uuid","cljs-uuid-utils.core/make-random-squuid","js/Date","cljs.core/rand-int","cljs.core/UUID","clojure.string.join","cljs.core.concat","top-32-bits","cljs.core.repeatedly","f","g","cljs-uuid-utils.core/make-random-uuid","cljs-uuid-utils.core/uuid-regex","x","cljs.core/re-pattern","cljs-uuid-utils.core/valid-uuid?","maybe-uuid","maybe-uuid-str","cljs.core._EQ_","cljs.core/type","cljs.core/re-find","cljs-uuid-utils.core/make-uuid-from","temp__5735__auto__","uuid"],"sourcesContent":[";; Copyright (c) Frank Siebenlist. All rights reserved.\n;; The use and distribution terms for this software are covered by the\n;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;; which can be found in the file COPYING at the root of this distribution.\n;; By using this software in any fashion, you are agreeing to be bound by\n;; the terms of this license.\n;; You must not remove this notice, or any other, from this software.\n\n(ns cljs-uuid-utils.core\n  \"ClojureScript micro-library with an implementation of a type 4, random UUID generator compatible with RFC-4122 and cljs.core/UUID (make-random-uuid), a getter function to obtain the uuid string representation from a UUID-instance (uuid-string), a uuid-string conformance validating predicate (valid-uuid?), and a UUID factory from uuid-string with conformance validation (make-uuid-from).\"\n  (:require [clojure.string :as string]))\n\n;; see https://gist.github.com/4159427 for some background\n\n\n;; Future UUID-implementations may chose a different internal representation of the UUID-instance\n;; The trivial uuid-string function hides those UUID-internals.\n;; Further motivation for uuid-string are related to interop thru json or with existing databases.\n\n(defn uuid-string\n  \"(uuid-string a-uuid)  =>  uuid-str\n  Arguments and Values:\n  a-uuid --- a cljs.core/UUID instance.\n  uuid-str --- returns a string representation of the UUID instance\n  Description:\n  Returns the string representation of the UUID instance in the format of,\n  \\\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\\\" similarly to java.util.UUID/toString.\n  Note that this is different from cljs.core/UUID's EDN string-format.\n  Examples:\n  (def u (make-random-uuid))  =>  #uuid \\\"305e764d-b451-47ae-a90d-5db782ac1f2e\\\"\n  (uuid-string u) => \\\"305e764d-b451-47ae-a90d-5db782ac1f2e\\\"\"\n  [a-uuid]\n  (str (.-uuid a-uuid)))\n\n\n(defn make-random-squuid\n  \"(make-random-squuid)  =>  new-uuid\n  Arguments and Values:\n  new-squuid --- new type 4 (pseudo randomly generated) cljs.core/UUID instance.\n  Description:\n  Returns pseudo randomly generated, semi-sequential SQUUID. \n  See http://docs.datomic.com/clojure/#datomic.api/squuid\n  Returns a UUID where the most significant 32 bits are the current time since epoch in seconds.\n  like: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx as per http://www.ietf.org/rfc/rfc4122.txt.\n  Examples:\n  (make-random-squuid)  =>  #uuid \\\"305e764d-b451-47ae-a90d-5db782ac1f2e\\\"\n  (type (make-random-squuid)) => cljs.core/UUID\"\n  []\n  (letfn [(top-32-bits [] (.toString (int (/ (.getTime (js/Date.)) 1000)) 16))\n          (f [] (.toString (rand-int 16) 16))\n          (g [] (.toString  (bit-or 0x8 (bit-and 0x3 (rand-int 15))) 16))]\n    (UUID.(string/join (concat \n                        (top-32-bits) \"-\"\n                        (repeatedly 4 f) \"-4\"\n                        (repeatedly 3 f) \"-\"\n                        (g) (repeatedly 3 f) \"-\"\n                        (repeatedly 12 f))) nil)))\n\n\n(defn make-random-uuid\n  \"(make-random-uuid)  =>  new-uuid\n  Arguments and Values:\n  new-uuid --- new type 4 (pseudo randomly generated) cljs.core/UUID instance.\n  Description:\n  Returns pseudo randomly generated UUID,\n  like: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx as per http://www.ietf.org/rfc/rfc4122.txt.\n  Examples:\n  (make-random-uuid)  =>  #uuid \\\"305e764d-b451-47ae-a90d-5db782ac1f2e\\\"\n  (type (make-random-uuid)) => cljs.core/UUID\"\n  []\n  (letfn [(f [] (.toString (rand-int 16) 16))\n          (g [] (.toString  (bit-or 0x8 (bit-and 0x3 (rand-int 15))) 16))]\n    (UUID.(string/join (concat \n                        (repeatedly 8 f) \"-\"\n                        (repeatedly 4 f) \"-4\"\n                        (repeatedly 3 f) \"-\"\n                        (g) (repeatedly 3 f) \"-\"\n                        (repeatedly 12 f))) nil)))\n\n\n(def ^:private uuid-regex \n  (let [x \"[0-9a-fA-F]\"] (re-pattern (str \n    \"^\" x x x x x x x x \"-\" x x x x \"-\" x x x x \"-\" x x x x \"-\" x x x x x x x x x x x x \"$\"))))\n\n\n(defn valid-uuid?\n  \"(valid-uuid? maybe-uuid)  =>  truthy-falsy\n  Arguments and Values:\n  maybe-uuid --- string or UUID-instance that may represent a conformant UUID.\n  truthy-falsy --- Returns either the conforming UUID-string (truthy) or nil (falsy).\n  Description:\n  Predicate to test whether a string representation conforms to a\n  \\\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\\\" format where each x is a hexadecimal character.\n  Input can be a maybe-uuid string or a cljs.core/UUID instance.\n  Note that the current \\\"cljs.core/UUID.\\\" constructor does not check for any conformance.\n  Examples:\n  (valid-uuid? \\\"NO-WAY\\\")  =>  nil\n  (valid-uuid? \\\"4d7332e7-e4c6-4ca5-af91-86336c825e25\\\")  => \\\"4d7332e7-e4c6-4ca5-af91-86336c825e25\\\"\n  (valid-uuid? (UUID. \\\"4d7332e7-e4c6-4ca5-af91-86336c825e25\\\"))  => \\\"4d7332e7-e4c6-4ca5-af91-86336c825e25\\\"\n  (valid-uuid? (UUID. \\\"YES-WAY\\\"))  => nil\"\n  [maybe-uuid]\n  (let [maybe-uuid-str (cond \n                         (= (type maybe-uuid) cljs.core/UUID) (uuid-string maybe-uuid)\n                         (string? maybe-uuid) maybe-uuid\n                         :true false)]\n    (when maybe-uuid-str (re-find uuid-regex maybe-uuid-str))))\n\n\n;; java equivalent \"java.util.UUID/fromString\" throws: IllegalArgumentException Invalid UUID string: ffa2a001-9eec-4224-a64d  java.util.UUID.fromString\n;; make-uuid-from should probably throw an exception also instead of silently returning nil...\n\n(defn make-uuid-from\n  \"(make-uuid-from maybe-uuid maybe-uuid)  =>  uuid-or-nil\n  Arguments and Values:\n  maybe-uuid --- string or UUID-instance that may represent a conformant UUID.\n  uuid-or-nil --- Returns either a cljs.core/UUID instance or nil.\n  Description:\n  Returns a cljs.core/UUID instance for a conformant UUID-string representation, or nil.\n  Input can be a string or a cljs.core/UUID instance.\n  Note that if the input UUID-instance is not valid, nil is returned.\n  Examples:\n  (make-uuid-from \\\"NO-WAY\\\")  =>  nil\n  (make-uuid-from \\\"4d7332e7-e4c6-4ca5-af91-86336c825e25\\\")  => #uuid \\\"4d7332e7-e4c6-4ca5-af91-86336c825e25\\\"\n  (make-uuid-from (UUID. \\\"4d7332e7-e4c6-4ca5-af91-86336c825e25\\\"))  => #uuid \\\"4d7332e7-e4c6-4ca5-af91-86336c825e25\\\"\n  (make-uuid-from (UUID. \\\"YES-WAY\\\"))  => nil\"\n  [maybe-uuid]\n  (when-let [uuid (valid-uuid? maybe-uuid)]\n    (if (= (type maybe-uuid) cljs.core/UUID)\n      maybe-uuid\n      (UUID. uuid nil))))\n"]}