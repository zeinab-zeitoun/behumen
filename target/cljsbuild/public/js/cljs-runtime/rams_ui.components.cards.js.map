{"version":3,"sources":["rams_ui/components/cards.cljs"],"mappings":"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","names":["rams-ui.components.cards/use-styles","reagent_material_ui.styles.make_styles","theme","G__80589","G__80590","fexpr__80588","cljs.core.get_in","inner-text","reagent.core.atom","rams-ui.components.cards/set-text","key","value","cljs.core.swap_BANG_","cljs.core/assoc","p__80591","map__80592","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","rams-ui.components.cards/card-helper","id","header","actions","image","ref","icon-type","content","extra","config","expanded","rams-ui.util/get-value","styles","cljs.core/fn?","reagent-material-ui.core.card/card","reagent-material-ui.core.card-header/card-header","cljs.core.merge","reagent.core.as_element","reagent-material-ui.core.card-media/card-media","reagent-material-ui.core.card-content/card-content","or__4126__auto__","reagent-material-ui.core.card-actions/card-actions","cljs.core/deref","temp-button","reagent-material-ui.core.icon-button/icon-button","clojure.string.join","cljs.core.concat","rams-ui.util/set-value","cljs.core/not","G__80594","cljs.core/Keyword","reagent-material-ui.icons.expand-more-sharp/expand-more-sharp","reagent-material-ui.icons.expand-more-outlined/expand-more-outlined","reagent-material-ui.icons.expand-more-rounded/expand-more-rounded","reagent-material-ui.icons.expand-more-two-tone/expand-more-two-tone","reagent-material-ui.icons.expand-more/expand-more","reagent-material-ui.core.tooltip/tooltip","reagent-material-ui.core.collapse/collapse","var_args","G__80596","rams-ui.components.cards/card","js/Error","p__80597","map__80598","p__80600","map__80601","uuid","rams-ui.util/gen-uuid","rams-ui.util/rendering-id","cljs.core.assoc","extra-content"],"sourcesContent":["(ns rams-ui.components.cards\n  (:require [reagent.core :as r]\n            [re-frame.core :refer [dispatch subscribe]]\n            [clojure.string :as cstr]\n            [rams-ui.util :refer [gen-uuid rendering-id set-value get-value]]\n            [reagent-material-ui.styles :refer [make-styles]]\n            [reagent-material-ui.core.tooltip :refer [tooltip]]\n            [reagent-material-ui.core.card :as ccards]\n            [reagent-material-ui.core.icon-button :refer [icon-button]]\n            [reagent-material-ui.core.card-content :refer [card-content]]\n            [reagent-material-ui.core.card-actions :refer [card-actions]]\n            [reagent-material-ui.core.collapse :refer [collapse]]\n            [reagent-material-ui.core.card-header :refer [card-header]]\n            [reagent-material-ui.core.card-media :refer [card-media]]\n            [reagent-material-ui.icons.expand-more :refer [expand-more]]\n            [reagent-material-ui.icons.expand-more-outlined :refer [expand-more-outlined]]\n            [reagent-material-ui.icons.expand-more-rounded :refer [expand-more-rounded]]\n            [reagent-material-ui.icons.expand-more-two-tone :refer [expand-more-two-tone]]\n            [reagent-material-ui.icons.expand-more-sharp :refer [expand-more-sharp]]))\n\n(def use-styles (make-styles (fn [theme]\n                               {:expand {:transform \"rotate(0deg)\"\n                                         :margin-left \"auto\"\n                                         :transition ((:create (:transitions theme))\n                                                      \"transform\"\n                                                      #js{:duration (get-in theme [:transitions :duration :shortest])})}\n                                :expand-open {:transform \"rotate(180deg)\"}})))\n\n(let [inner-text (r/atom {:show-more \"show more\"})]\n\n  (defn set-text\n    \"Helper function that sets the text of hardcoded texts\n\n    - **key**: Keyword indicating the text to use Options are:\n       - **:show-more**: tooltip text of the expand/collapse button\n    - **vlaue**: Text to show\"\n    [key value]\n    (swap! inner-text assoc key value))\n\n\n  (defn- ^:no-doc card-helper\n    [{:keys [id header actions image ref\n             icon-type content extra] :as config}]\n    (let [expanded (get-value id)\n          styles (use-styles)]\n      (when (fn? ref)\n        (ref id))\n      [ccards/card {:classes (:classes config)\n                    :raised (:raised config)}\n       (when header\n         [card-header (merge header\n                             (when (:action header)\n                               {:action (r/as-element (:action header))})\n                             (when (:title header)\n                               {:title (r/as-element (:title header))})\n                             (when (:subheader header)\n                               {:subheader (r/as-element (:subheader header))})\n                             (when (:avatar header)\n                               {:avatar (r/as-element (:avatar header))}))])\n       (when image\n         [card-media {:classes  (:classes image)\n                      :image (:src image)\n                      :title (:title image)}])\n       [card-content content]\n       (when (or actions extra)\n         [card-actions {:disable-spacing true}\n          (when actions\n            actions)\n          (when extra\n            (let [temp-button [icon-button {:className (cstr/join \" \"\n                                                                  (concat [(:expand styles)]\n                                                                          (when @expanded\n                                                                            [(:expand-open styles)])))\n                                            :on-click #(set-value id (not @expanded))\n                                            :aria-expanded @expanded\n                                            :aria-label (:show-more @inner-text)}\n                               [(case icon-type\n                                  :sharp expand-more-sharp\n                                  :outline expand-more-outlined\n                                  :rounded expand-more-rounded\n                                  :two-tone expand-more-two-tone\n                                  expand-more)]]]\n              (if (:show-more @inner-text)\n                [tooltip {:title (:show-more @inner-text)}\n                 temp-button]\n                temp-button)))])\n       (when extra\n         [collapse {:in @expanded\n                    :timeout \"auto\"\n                    :unmount-on-exit true}\n          [card-content extra]])])))\n\n(defn card\n  \"creates a material ui card without the need to have to write a lot of code for the headers actions and even collapse.\n\n  - **config**: is a hash map of the tabs component. The hashmap takes arguments as defined in [material-ui](https://material-ui.com/api/card/). The hash map includes several keys that are extra on the original set\n      - **:id**: is an optional keyword/string/number/array that uniquely identifies the tab. Once given it would allow for two very important functions:\n           - Changing the whether the card is expanded or not through dispatching :set-page-item with the given id and any value other nil would mean the card is expanded\n           - Allowing the state of the card (expanded or not) to persist when using back or breadcrumb\n       - **:ref**: is an optional function that takes one argument which is the id of the element. This is useful in case you want to get the id of the item without having to provide one\n      - **:header**: is an optional hashmap describing the top of the header. It must fill the criteria of [card-header|https://material-ui.com/api/card-header/]\n      - **:actions**: is an optional array that contains an array of components that will appear in the bottom of the card. Usually it is an array of icon buttons\n      - **:image**: is an optional image hashmap identifying an image that will be drawn at the top of the card but below the header. It is made of\n          - **:title**: optional title of the image\n          - **:src**: required url of the image to be drawn\n          - **:classes**: array of classes to be given to the image \n      - **:img-title**: is an optional title that will be put on the image if an **:img-src** provided.\n      - **:icon-type**: an optional parameter that will indicate the styling of the collapse/expand icon in case **extra-content** is given. Options are :rounded | :outlined | :two-tone | :sharp | :filled. Default is :filled  \n  - **content**: React component that is the value of the card\n  - **extra-content**: React component that is the value of the extra content of the card that will appear if expanded. If this extra argument is given then automatically an expand icon button is added to the list of actions and drawn. By default the extra content is collapsed\"\n  ([content]\n   (let [uuid (gen-uuid)]\n     (rendering-id uuid)\n     [card-helper {:id uuid :content content}]))\n  ([{:keys [id header actions image] :as config}\n       content]\n      (let [uuid (if id id (gen-uuid))]\n        (rendering-id uuid)\n        [card-helper (assoc config :id uuid\n                                :content content)]))\n  ([{:keys [id header actions image] :as config}\n    content extra-content]\n   (let [uuid (if id id (gen-uuid))]\n     (rendering-id uuid)\n     [card-helper (assoc config :id uuid\n                         :content content\n                         :extra extra-content)])))\n"]}