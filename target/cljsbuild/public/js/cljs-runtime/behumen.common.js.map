{"version":3,"sources":["behumen/common.cljc"],"mappings":"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","names":["behumen.common/uploaded-url-path","behumen.common/+success+","behumen.common/+warning+","behumen.common/+error+","behumen.common/+roles-module+","behumen.common/+permission-read+","behumen.common/+permission-write+","behumen.common/+permission-delete+","behumen.common/get-server-name","behumen.common/get-base-url","behumen.common/urls","behumen.common/get-url","id","behumen.common/url-encode","string","G__66318","js/encodeURIComponent","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","behumen.common/generate-url","seq66319","G__66320","cljs.core/first","cljs.core/next","self__4723__auto__","args","coded-url","cljs.core/empty?","new-args","cljs.core.into","iter__4529__auto__","s__66322","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__66324","cljs.core/chunk-buffer","i__66323","vec__66325","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__66321","cljs.core/chunk-rest","vec__66328","cljs.core/cons","cljs.core/rest","k","v","cljs.core/Keyword","cljs.core/name","search-query","items","out","cljs.core._EQ_","vec__66334","key-name","cljs.core/re-find","cljs.core/re-pattern","url","clojure.string/replace","cljs.core.apply","cljs.core/str","cljs.core.interpose","cljs.core/keys","cljs.core.subs","behumen.common/get-absolute-url","seq66337","G__66338","behumen.common.generate_url","behumen.common/get-ws-url","seq66339","G__66340","behumen.common/get-image-link","link","behumen.common/get-absolute-image-link","cljs.core/chunk-first"],"sourcesContent":["(ns behumen.common\n  (:require #?(:clj [behumen.config :refer [env]]))\n  #?(:clj (:import [java.net URLEncoder])))\n\n(def uploaded-url-path \"/uploaded/\")\n\n(def +success+ \"success\")\n(def +warning+ \"warning\")\n(def +error+ \"error\")\n\n(def +roles-module+ \"roles\")\n\n(def +permission-read+ \"read\")\n(def +permission-write+ \"write\")\n(def +permission-delete+ \"delete\")\n\n(defn get-server-name []\n  #?(:clj (str (if (env :server-name)\n                 (env :server-name) \"localhost\")\n               (when (env :port)\n                 (str \":\" (env :port))))\n     :cljs \"localhost:3000\"))\n\n(defn get-base-url []\n  (str #?(:clj (if (:dev env) \"http://\" \"https://\")\n          :cljs \"https://\")\n       (get-server-name)))\n\n(def urls {:user-verify \"/verification/:code\"\n           :user-change-password \"/change-password/:code\"\n           :change-my-password \"/api/v1/private/user/change-password\"\n           :login \"/api/v1/public/user/login\"\n           :reset-password \"/api/v1/public/user/reset\"\n           :roles-view \"/api/v1/private/roles/view\"\n           :user-permissions-view \"/api/v1/private/permissions/user-view\"\n           :user-permissions-save \"/api/v1/private/permissions/user-save\"\n           :logout \"/api/v1/private/user/logout\"\n           :save-email \"/api/v1/private/user/save-email\"})\n\n(defn get-url [id]\n  (id urls))\n\n(defn url-encode\n  [string]\n  #?(:clj\n     (some-> string str (URLEncoder/encode \"UTF-8\") (.replace \"+\" \"%20\"))\n     :cljs\n     (some-> string str (js/encodeURIComponent) (.replace \"+\" \"%20\"))))\n\n(defn generate-url [id & args]\n  (let [coded-url (id urls)]\n    (if coded-url\n      (if (or (empty? args)\n              (empty? (first args)))\n        coded-url\n        (let [new-args (into {} (for [[k v] (first args)]\n                                  [(str \":\" (if (keyword?  k)\n                                              (name k)\n                                              k)\n                                        \"/\")\n                                   (str  v \"/\")]))\n              search-query (loop [items (first args)\n                                  out \"\"]\n                             (if (empty? items)\n                               (if (= out \"\") out (str \"?\" out))\n                               (recur (rest items)\n                                      (let [[k v] (first items)\n                                            key-name (if (keyword? k) (name k) k)]\n                                        (if (re-find (re-pattern (str \":\" key-name \"/\"))\n                                                     (str coded-url \"/\"))\n                                          out\n                                          (str (if (= out \"\") out (str out \"&\"))\n                                               key-name \"=\"\n                                               (url-encode (str v))))))))\n              url  (clojure.string/replace\n                    (str coded-url \"/\")\n                    (re-pattern\n                     (apply str\n                            (interpose \"|\" (keys new-args))))\n                    new-args)]\n          (str (subs url 0 (- (count url) 1)) search-query))))))\n\n(defn get-absolute-url [id & args]\n  (str (get-base-url) (generate-url id (first args))))\n\n(defn get-ws-url [id & args]\n  (str \"ws://\" (get-server-name)\n       (generate-url id (first args))))\n\n(defn get-image-link [link]\n  (str uploaded-url-path link))\n\n(defn get-absolute-image-link [link]\n  (str (get-base-url) uploaded-url-path\n       link))\n"]}