{
"version":3,
"file":"goog.module.modulemanager.js",
"lineCount":551,
"mappings":"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",
"sources":["goog/module/modulemanager.js"],
"sourcesContent":["// Copyright 2008 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview A default implementation for managing JavaScript code modules.\n * @enhanceable\n *\n */\n\ngoog.provide('goog.module.ModuleManager');\ngoog.provide('goog.module.ModuleManager.CallbackType');\ngoog.provide('goog.module.ModuleManager.FailureType');\n\ngoog.require('goog.array');\ngoog.require('goog.asserts');\ngoog.require('goog.async.Deferred');\ngoog.require('goog.debug.Trace');\ngoog.require('goog.disposable.IDisposable');\ngoog.require('goog.disposeAll');\ngoog.require('goog.loader.AbstractModuleManager');\ngoog.require('goog.loader.activeModuleManager');\ngoog.require('goog.log');\n/** @suppress {extraRequire} */\ngoog.require('goog.module');\ngoog.require('goog.module.ModuleInfo');\ngoog.require('goog.module.ModuleLoadCallback');\ngoog.require('goog.object');\n\n\n/**\n * The ModuleManager keeps track of all modules in the environment.\n * Since modules may not have their code loaded, we must keep track of them.\n * @constructor\n * @extends {goog.loader.AbstractModuleManager}\n * @implements {goog.disposable.IDisposable}\n * @struct\n */\ngoog.module.ModuleManager = function() {\n  goog.module.ModuleManager.base(this, 'constructor');\n\n  /**\n   * A mapping from module id to ModuleInfo object.\n   * @protected {!Object<string, !goog.module.ModuleInfo>}\n   */\n  this.moduleInfoMap = {};\n\n  // TODO (malteubl): Switch this to a reentrant design.\n  /**\n   * The ids of the currently loading modules. If batch mode is disabled, then\n   * this array will never contain more than one element at a time.\n   * @type {!Array<string>}\n   * @private\n   */\n  this.loadingModuleIds_ = [];\n\n  /**\n   * The requested ids of the currently loading modules. This does not include\n   * module dependencies that may also be loading.\n   * @type {!Array<string>}\n   * @private\n   */\n  this.requestedLoadingModuleIds_ = [];\n\n  // TODO(user): Make these and other arrays that are used as sets be\n  // actual sets.\n  /**\n   * All module ids that have ever been requested. In concurrent loading these\n   * are the ones to subtract from future requests.\n   * @type {!Array<string>}\n   * @private\n   */\n  this.requestedModuleIds_ = [];\n\n  /**\n   * A queue of the ids of requested but not-yet-loaded modules. The zero\n   * position is the front of the queue. This is a 2-D array to group modules\n   * together with other modules that should be batch loaded with them, if\n   * batch loading is enabled.\n   * @type {!Array<!Array<string>>}\n   * @private\n   */\n  this.requestedModuleIdsQueue_ = [];\n\n  /**\n   * The ids of the currently loading modules which have been initiated by user\n   * actions.\n   * @type {!Array<string>}\n   * @private\n   */\n  this.userInitiatedLoadingModuleIds_ = [];\n\n  /**\n   * A map of callback types to the functions to call for the specified\n   * callback type.\n   * @type {!Object<!goog.loader.AbstractModuleManager.CallbackType,\n   *     !Array<!Function>>}\n   * @private\n   */\n  this.callbackMap_ = {};\n\n  /**\n   * Module info for the base module (the one that contains the module\n   * manager code), which we set as the loading module so one can\n   * register initialization callbacks in the base module.\n   *\n   * The base module is considered loaded when #setAllModuleInfo is called or\n   * #setModuleContext is called, whichever comes first.\n   *\n   * @type {!goog.module.ModuleInfo}\n   * @private\n   */\n  this.baseModuleInfo_ = new goog.module.ModuleInfo([], '');\n\n  /**\n   * The module that is currently loading, or null if not loading anything.\n   * @type {?goog.module.ModuleInfo}\n   * @private\n   */\n  this.currentlyLoadingModule_ = this.baseModuleInfo_;\n\n  /**\n   * The id of the last requested initial module. When it loaded\n   * the deferred in `this.initialModulesLoaded_` resolves.\n   * @private {?string}\n   */\n  this.lastInitialModuleId_ = null;\n\n  /**\n   * Deferred for when all initial modules have loaded. We currently block\n   * sending additional module requests until this deferred resolves. In a\n   * future optimization it may be possible to use the initial modules as\n   * seeds for the module loader \"requested module ids\" and start making new\n   * requests even sooner.\n   * @private {!goog.async.Deferred}\n   */\n  this.initialModulesLoaded_ = new goog.async.Deferred();\n\n  /**\n   * A logger.\n   * @private {?goog.log.Logger}\n   */\n  this.logger_ = goog.log.getLogger('goog.module.ModuleManager');\n\n  /**\n   * Whether the batch mode (i.e. the loading of multiple modules with just one\n   * request) has been enabled.\n   * @private {boolean}\n   */\n  this.batchModeEnabled_ = false;\n\n  /**\n   * Whether the module requests may be sent out of order.\n   * @private {boolean}\n   */\n  this.concurrentLoadingEnabled_ = false;\n\n  // TODO(user): Remove tracer.\n  /**\n   * Tracer that measures how long it takes to load a module.\n   * @private {?number}\n   */\n  this.loadTracer_ = null;\n\n  /**\n   * The number of consecutive failures that have happened upon module load\n   * requests.\n   * @private {number}\n   */\n  this.consecutiveFailures_ = 0;\n\n  /**\n   * Determines if the module manager was just active before the processing of\n   * the last data.\n   * @private {boolean}\n   */\n  this.lastActive_ = false;\n\n  /**\n   * Determines if the module manager was just user active before the processing\n   * of the last data. The module manager is user active if any of the\n   * user-initiated modules are loading or queued up to load.\n   * @private {boolean}\n   */\n  this.userLastActive_ = false;\n\n  /**\n   * @private {boolean}\n   */\n  this.isDisposed_ = false;\n};\ngoog.inherits(goog.module.ModuleManager, goog.loader.AbstractModuleManager);\n\n\n/**\n * The type of callbacks that can be registered with the module manager,.\n * @enum {string}\n */\ngoog.module.ModuleManager.CallbackType =\n    goog.loader.AbstractModuleManager.CallbackType;\n\n\n/**\n * The possible reasons for a module load failure callback being fired.\n * @enum {number}\n */\ngoog.module.ModuleManager.FailureType =\n    goog.loader.AbstractModuleManager.FailureType;\n\n\n/**\n * A non-HTTP status code indicating a corruption in loaded module.\n * This should be used by a ModuleLoader as a replacement for the HTTP code\n * given to the error handler function to indicated that the module was\n * corrupted.\n * This will set the forceReload flag on the loadModules method when retrying\n * module loading.\n * @type {number}\n */\ngoog.module.ModuleManager.CORRUPT_RESPONSE_STATUS_CODE =\n    goog.loader.AbstractModuleManager.CORRUPT_RESPONSE_STATUS_CODE;\n\n\n/** @return {!goog.loader.AbstractModuleManager} */\ngoog.module.ModuleManager.getInstance = function() {\n  return goog.loader.activeModuleManager.get();\n};\n\n\n/** @override */\ngoog.module.ModuleManager.prototype.setBatchModeEnabled = function(enabled) {\n  this.batchModeEnabled_ = enabled;\n};\n\n\n/** @override */\ngoog.module.ModuleManager.prototype.setConcurrentLoadingEnabled = function(\n    enabled) {\n  this.concurrentLoadingEnabled_ = enabled;\n};\n\n\n/** @override */\ngoog.module.ModuleManager.prototype.setAllModuleInfo = function(infoMap) {\n  for (var id in infoMap) {\n    this.moduleInfoMap[id] = new goog.module.ModuleInfo(infoMap[id], id);\n  }\n  if (!this.initialModulesLoaded_.hasFired()) {\n    this.initialModulesLoaded_.callback();\n  }\n  this.maybeFinishBaseLoad_();\n};\n\n\n/** @override */\ngoog.module.ModuleManager.prototype.setAllModuleInfoString = function(\n    opt_info, opt_loadingModuleIds) {\n  // Check for legacy direct-from-prototype usage.\n  if (!(this instanceof goog.module.ModuleManager)) {\n    this.setAllModuleInfoString(opt_info, opt_loadingModuleIds);\n    return;\n  }\n  if (typeof (opt_info) !== 'string') {\n    // The call to this method is generated in two steps, the argument is added\n    // after some of the compilation passes.  This means that the initial code\n    // doesn't have any arguments and causes compiler errors.  We make it\n    // optional to satisfy this constraint.\n    return;\n  }\n\n  var modules = opt_info.split('/');\n  var moduleIds = [];\n\n  // Split the string into the infoMap of id->deps\n  for (var i = 0; i < modules.length; i++) {\n    var parts = modules[i].split(':');\n    var id = parts[0];\n    var deps;\n    if (parts[1]) {\n      deps = parts[1].split(',');\n      for (var j = 0; j < deps.length; j++) {\n        var index = parseInt(deps[j], 36);\n        goog.asserts.assert(\n            moduleIds[index], 'No module @ %s, dep of %s @ %s', index, id, i);\n        deps[j] = moduleIds[index];\n      }\n    } else {\n      deps = [];\n    }\n    moduleIds.push(id);\n    this.moduleInfoMap[id] = new goog.module.ModuleInfo(deps, id);\n  }\n  if (opt_loadingModuleIds && opt_loadingModuleIds.length) {\n    goog.array.extend(this.loadingModuleIds_, opt_loadingModuleIds);\n    // The last module in the list of initial modules. When it has loaded all\n    // initial modules have loaded.\n    this.lastInitialModuleId_ =\n        /** @type {?string}  */ (goog.array.peek(opt_loadingModuleIds));\n  } else {\n    if (!this.initialModulesLoaded_.hasFired()) {\n      this.initialModulesLoaded_.callback();\n    }\n  }\n  this.maybeFinishBaseLoad_();\n};\n\n\n/** @override */\ngoog.module.ModuleManager.prototype.getModuleInfo = function(id) {\n  return this.moduleInfoMap[id];\n};\n\n\n/** @override */\ngoog.module.ModuleManager.prototype.setModuleTrustedUris = function(\n    moduleUriMap) {\n  for (var id in moduleUriMap) {\n    this.moduleInfoMap[id].setTrustedUris(moduleUriMap[id]);\n  }\n};\n\n\n/** @override */\ngoog.module.ModuleManager.prototype.setModuleContext = function(context) {\n  goog.module.ModuleManager.base(this, 'setModuleContext', context);\n  this.maybeFinishBaseLoad_();\n};\n\n\n/** @override */\ngoog.module.ModuleManager.prototype.isActive = function() {\n  return this.loadingModuleIds_.length > 0;\n};\n\n\n/** @override */\ngoog.module.ModuleManager.prototype.isUserActive = function() {\n  return this.userInitiatedLoadingModuleIds_.length > 0;\n};\n\n\n/**\n * Dispatches an ACTIVE or IDLE event if necessary.\n * @private\n */\ngoog.module.ModuleManager.prototype.dispatchActiveIdleChangeIfNeeded_ =\n    function() {\n  var lastActive = this.lastActive_;\n  var active = this.isActive();\n  if (active != lastActive) {\n    this.executeCallbacks_(\n        active ? goog.loader.AbstractModuleManager.CallbackType.ACTIVE :\n                 goog.loader.AbstractModuleManager.CallbackType.IDLE);\n\n    // Flip the last active value.\n    this.lastActive_ = active;\n  }\n\n  // Check if the module manager is user active i.e., there are user initiated\n  // modules being loaded or queued up to be loaded.\n  var userLastActive = this.userLastActive_;\n  var userActive = this.isUserActive();\n  if (userActive != userLastActive) {\n    this.executeCallbacks_(\n        userActive ?\n            goog.loader.AbstractModuleManager.CallbackType.USER_ACTIVE :\n            goog.loader.AbstractModuleManager.CallbackType.USER_IDLE);\n\n    // Flip the last user active value.\n    this.userLastActive_ = userActive;\n  }\n};\n\n\n/** @override */\ngoog.module.ModuleManager.prototype.preloadModule = function(id, opt_timeout) {\n  var d = new goog.async.Deferred();\n  window.setTimeout(\n      goog.bind(this.addLoadModule_, this, id, d), opt_timeout || 0);\n  return d;\n};\n\n\n/** @override */\ngoog.module.ModuleManager.prototype.prefetchModule = function(id) {\n  var moduleInfo = this.getModuleInfo(id);\n  if (moduleInfo.isLoaded() || this.isModuleLoading(id)) {\n    throw new Error('Module load already requested: ' + id);\n  } else if (this.batchModeEnabled_) {\n    throw new Error('Modules prefetching is not supported in batch mode');\n  } else {\n    var idWithDeps = this.getNotYetLoadedTransitiveDepIds_(id);\n    for (var i = 0; i < idWithDeps.length; i++) {\n      this.getLoader().prefetchModule(\n          idWithDeps[i], this.moduleInfoMap[idWithDeps[i]]);\n    }\n  }\n};\n\n\n/**\n * Loads a single module for use with a given deferred.\n *\n * @param {string} id The id of the module to load.\n * @param {!goog.async.Deferred} d A deferred object.\n * @private\n */\ngoog.module.ModuleManager.prototype.addLoadModule_ = function(id, d) {\n  var moduleInfo = this.getModuleInfo(id);\n  if (moduleInfo.isLoaded()) {\n    d.callback(this.getModuleContext());\n    return;\n  }\n\n  this.registerModuleLoadCallbacks_(id, moduleInfo, false, d);\n  if (!this.isModuleLoading(id)) {\n    this.loadModulesOrEnqueue_([id]);\n  }\n};\n\n\n/**\n * Loads a list of modules or, if some other module is currently being loaded,\n * appends the ids to the queue of requested module ids. Registers callbacks a\n * module that is currently loading and returns a fired deferred for a module\n * that is already loaded.\n *\n * @param {!Array<string>} ids The id of the module to load.\n * @param {boolean=} opt_userInitiated If the load is a result of a user action.\n * @return {!Object<string, !goog.async.Deferred>} A mapping from id (String)\n *     to deferred objects that will callback or errback when the load for that\n *     id is finished.\n * @private\n */\ngoog.module.ModuleManager.prototype.loadModulesOrEnqueueIfNotLoadedOrLoading_ =\n    function(ids, opt_userInitiated) {\n  var uniqueIds = [];\n  goog.array.removeDuplicates(ids, uniqueIds);\n  var idsToLoad = [];\n  var deferredMap = {};\n  for (var i = 0; i < uniqueIds.length; i++) {\n    var id = uniqueIds[i];\n    var moduleInfo = this.getModuleInfo(id);\n    if (!moduleInfo) {\n      throw new Error('Unknown module: ' + id);\n    }\n    var d = new goog.async.Deferred();\n    deferredMap[id] = d;\n    if (moduleInfo.isLoaded()) {\n      d.callback(this.getModuleContext());\n    } else {\n      this.registerModuleLoadCallbacks_(id, moduleInfo, !!opt_userInitiated, d);\n      if (!this.isModuleLoading(id)) {\n        idsToLoad.push(id);\n      }\n    }\n  }\n\n  // If there are ids to load, load them, otherwise, they are all loading or\n  // loaded.\n  if (idsToLoad.length > 0) {\n    this.loadModulesOrEnqueue_(idsToLoad);\n  }\n  return deferredMap;\n};\n\n\n/**\n * Registers the callbacks and handles logic if it is a user initiated module\n * load.\n *\n * @param {string} id The id of the module to possibly load.\n * @param {!goog.module.ModuleInfo} moduleInfo The module identifier for the\n *     given id.\n * @param {boolean} userInitiated If the load was user initiated.\n * @param {!goog.async.Deferred} d A deferred object.\n * @private\n */\ngoog.module.ModuleManager.prototype.registerModuleLoadCallbacks_ = function(\n    id, moduleInfo, userInitiated, d) {\n  moduleInfo.registerCallback(d.callback, d);\n  moduleInfo.registerErrback(function(err) {\n    d.errback(Error(err));\n  });\n  // If it's already loading, we don't have to do anything besides handle\n  // if it was user initiated\n  if (this.isModuleLoading(id)) {\n    if (userInitiated) {\n      goog.log.fine(\n          this.logger_, 'User initiated module already loading: ' + id);\n      this.addUserInitiatedLoadingModule_(id);\n      this.dispatchActiveIdleChangeIfNeeded_();\n    }\n  } else {\n    if (userInitiated) {\n      goog.log.fine(this.logger_, 'User initiated module load: ' + id);\n      this.addUserInitiatedLoadingModule_(id);\n    } else {\n      goog.log.fine(this.logger_, 'Initiating module load: ' + id);\n    }\n  }\n};\n\n\n/**\n * Initiates loading of a list of modules or, if a module is currently being\n * loaded, appends the modules to the queue of requested module ids.\n *\n * The caller should verify that the requested modules are not already loaded or\n * loading. {@link #loadModulesOrEnqueueIfNotLoadedOrLoading_} is a more lenient\n * alternative to this method.\n *\n * @param {!Array<string>} ids The ids of the modules to load.\n * @private\n */\ngoog.module.ModuleManager.prototype.loadModulesOrEnqueue_ = function(ids) {\n  // With concurrent loading we always just send off the request.\n  if (this.concurrentLoadingEnabled_) {\n    // For now we wait for initial modules to have downloaded as this puts the\n    // loader in a good state for calculating the needed deps of additional\n    // loads.\n    // TODO(user): Make this wait unnecessary.\n    this.initialModulesLoaded_.addCallback(\n        goog.bind(this.loadModules_, this, ids));\n  } else {\n    if (goog.array.isEmpty(this.loadingModuleIds_)) {\n      this.loadModules_(ids);\n    } else {\n      this.requestedModuleIdsQueue_.push(ids);\n      this.dispatchActiveIdleChangeIfNeeded_();\n    }\n  }\n};\n\n\n/**\n * Gets the amount of delay to wait before sending a request for more modules.\n * If a certain module request fails, we backoff a little bit and try again.\n * @return {number} Delay, in ms.\n * @private\n */\ngoog.module.ModuleManager.prototype.getBackOff_ = function() {\n  // 5 seconds after one error, 20 seconds after 2.\n  return Math.pow(this.consecutiveFailures_, 2) * 5000;\n};\n\n\n/**\n * Loads a list of modules and any of their not-yet-loaded prerequisites.\n * If batch mode is enabled, the prerequisites will be loaded together with the\n * requested modules and all requested modules will be loaded at the same time.\n *\n * The caller should verify that the requested modules are not already loaded\n * and that no modules are currently loading before calling this method.\n *\n * @param {!Array<string>} ids The ids of the modules to load.\n * @param {boolean=} opt_isRetry If the load is a retry of a previous load\n *     attempt.\n * @param {boolean=} opt_forceReload Whether to bypass cache while loading the\n *     module.\n * @private\n */\ngoog.module.ModuleManager.prototype.loadModules_ = function(\n    ids, opt_isRetry, opt_forceReload) {\n  if (!opt_isRetry) {\n    this.consecutiveFailures_ = 0;\n  }\n\n  // Not all modules may be loaded immediately if batch mode is not enabled.\n  var idsToLoadImmediately = this.processModulesForLoad_(ids);\n\n  goog.log.fine(this.logger_, 'Loading module(s): ' + idsToLoadImmediately);\n\n  if (this.concurrentLoadingEnabled_) {\n    goog.array.extend(this.loadingModuleIds_, idsToLoadImmediately);\n  } else {\n    this.loadingModuleIds_ = idsToLoadImmediately;\n  }\n\n  if (this.batchModeEnabled_) {\n    this.requestedLoadingModuleIds_ = ids;\n  } else {\n    // If batch mode is disabled, we treat each dependency load as a separate\n    // load.\n    this.requestedLoadingModuleIds_ = goog.array.clone(idsToLoadImmediately);\n  }\n\n  // Dispatch an active/idle change if needed.\n  this.dispatchActiveIdleChangeIfNeeded_();\n\n  if (goog.array.isEmpty(idsToLoadImmediately)) {\n    // All requested modules and deps have been either loaded already or have\n    // already been requested.\n    return;\n  }\n\n  this.requestedModuleIds_.push.apply(\n      this.requestedModuleIds_, idsToLoadImmediately);\n\n  var loadFn = goog.bind(\n      this.getLoader().loadModules, goog.asserts.assert(this.getLoader()),\n      goog.array.clone(idsToLoadImmediately),\n      goog.asserts.assert(this.moduleInfoMap), null,\n      goog.bind(\n          this.handleLoadError_, this, this.requestedLoadingModuleIds_,\n          idsToLoadImmediately),\n      goog.bind(this.handleLoadTimeout_, this), !!opt_forceReload);\n\n  var delay = this.getBackOff_();\n  if (delay) {\n    window.setTimeout(loadFn, delay);\n  } else {\n    loadFn();\n  }\n};\n\n\n/**\n * Processes a list of module ids for loading. Checks if any of the modules are\n * already loaded and then gets transitive deps. Queues any necessary modules\n * if batch mode is not enabled. Returns the list of ids that should be loaded.\n *\n * @param {!Array<string>} ids The ids that need to be loaded.\n * @return {!Array<string>} The ids to load, including dependencies.\n * @throws {!Error} If the module is already loaded.\n * @private\n */\ngoog.module.ModuleManager.prototype.processModulesForLoad_ = function(ids) {\n  ids = goog.array.filter(ids, (id) => {\n    let moduleInfo = this.moduleInfoMap[id];\n    if (moduleInfo.isLoaded()) {\n      goog.global.setTimeout(\n          () => new Error('Module already loaded: ' + id), 0);\n      return false;\n    }\n    return true;\n  });\n\n  // Build a list of the ids of this module and any of its not-yet-loaded\n  // prerequisite modules in dependency order.\n  var idsWithDeps = [];\n  for (var i = 0; i < ids.length; i++) {\n    idsWithDeps =\n        idsWithDeps.concat(this.getNotYetLoadedTransitiveDepIds_(ids[i]));\n  }\n  goog.array.removeDuplicates(idsWithDeps);\n\n  if (!this.batchModeEnabled_ && idsWithDeps.length > 1) {\n    var idToLoad = idsWithDeps.shift();\n    goog.log.fine(\n        this.logger_, 'Must load ' + idToLoad + ' module before ' + ids);\n\n    // Insert the requested module id and any other not-yet-loaded prereqs\n    // that it has at the front of the queue.\n    var queuedModules = goog.array.map(idsWithDeps, function(id) {\n      return [id];\n    });\n    this.requestedModuleIdsQueue_ =\n        queuedModules.concat(this.requestedModuleIdsQueue_);\n    return [idToLoad];\n  } else {\n    return idsWithDeps;\n  }\n};\n\n\n/**\n * Builds a list of the ids of the not-yet-loaded modules that a particular\n * module transitively depends on, including itself.\n *\n * @param {string} id The id of a not-yet-loaded module.\n * @return {!Array<string>} An array of module ids in dependency order that's\n *     guaranteed to end with the provided module id.\n * @private\n */\ngoog.module.ModuleManager.prototype.getNotYetLoadedTransitiveDepIds_ = function(\n    id) {\n  var requestedModuleSet = goog.object.createSet(this.requestedModuleIds_);\n  // NOTE(user): We want the earliest occurrence of a module, not the first\n  // dependency we find. Therefore we strip duplicates at the end rather than\n  // during.  See the tests for concrete examples.\n  var ids = [];\n  if (!requestedModuleSet[id]) {\n    ids.push(id);\n  }\n  var depIdLookupList = [id];\n  // BFS by iterating through dependencies and enqueuing their respective\n  // dependencies into the lookup list.\n  for (var i = 0; i < depIdLookupList.length; i++) {\n    var depIds = this.getModuleInfo(depIdLookupList[i]).getDependencies();\n    for (var j = depIds.length - 1; j >= 0; j--) {\n      var depId = depIds[j];\n      if (!this.getModuleInfo(depId).isLoaded() && !requestedModuleSet[depId]) {\n        ids.push(depId);\n        depIdLookupList.push(depId);\n      }\n    }\n  }\n\n  // Leaf dependencies should come before others. Please refer to test cases for\n  // exact order.\n  ids.reverse();\n  goog.array.removeDuplicates(ids);\n  return ids;\n};\n\n\n/**\n * If we are still loading the base module, consider the load complete.\n * @private\n */\ngoog.module.ModuleManager.prototype.maybeFinishBaseLoad_ = function() {\n  if (this.currentlyLoadingModule_ == this.baseModuleInfo_) {\n    this.currentlyLoadingModule_ = null;\n    var error =\n        this.baseModuleInfo_.onLoad(goog.bind(this.getModuleContext, this));\n    if (error) {\n      this.dispatchModuleLoadFailed_(\n          goog.loader.AbstractModuleManager.FailureType.INIT_ERROR);\n    }\n\n    this.dispatchActiveIdleChangeIfNeeded_();\n  }\n};\n\n\n/** @override */\ngoog.module.ModuleManager.prototype.setLoaded = function() {\n  if (!this.currentlyLoadingModule_) {\n    goog.log.error(\n        this.logger_, 'setLoaded called while no module is actively loading');\n    return;\n  }\n\n  var id = this.currentlyLoadingModule_.getId();\n\n  if (this.isDisposed()) {\n    goog.log.warning(\n        this.logger_, 'Module loaded after module manager was disposed: ' + id);\n    return;\n  }\n\n  goog.log.fine(this.logger_, 'Module loaded: ' + id);\n\n  var error =\n      this.moduleInfoMap[id].onLoad(goog.bind(this.getModuleContext, this));\n  if (error) {\n    this.dispatchModuleLoadFailed_(\n        goog.loader.AbstractModuleManager.FailureType.INIT_ERROR);\n  }\n\n  // Remove the module id from the user initiated set if it existed there.\n  goog.array.remove(this.userInitiatedLoadingModuleIds_, id);\n\n  // Remove the module id from the loading modules if it exists there.\n  goog.array.remove(this.loadingModuleIds_, id);\n\n  if (goog.array.isEmpty(this.loadingModuleIds_)) {\n    // No more modules are currently being loaded (e.g. arriving later in the\n    // same HTTP response), so proceed to load the next module in the queue.\n    this.loadNextModules_();\n  }\n\n  if (this.lastInitialModuleId_ && id == this.lastInitialModuleId_) {\n    if (!this.initialModulesLoaded_.hasFired()) {\n      this.initialModulesLoaded_.callback();\n    }\n  }\n\n  // Dispatch an active/idle change if needed.\n  this.dispatchActiveIdleChangeIfNeeded_();\n\n  this.currentlyLoadingModule_ = null;\n  goog.debug.Trace.stopTracer(this.loadTracer_);\n};\n\n\n/** @override */\ngoog.module.ModuleManager.prototype.isModuleLoading = function(id) {\n  if (goog.array.contains(this.loadingModuleIds_, id)) {\n    return true;\n  }\n  for (var i = 0; i < this.requestedModuleIdsQueue_.length; i++) {\n    if (goog.array.contains(this.requestedModuleIdsQueue_[i], id)) {\n      return true;\n    }\n  }\n  return false;\n};\n\n\n/** @override */\ngoog.module.ModuleManager.prototype.execOnLoad = function(\n    moduleId, fn, opt_handler, opt_noLoad, opt_userInitiated,\n    opt_preferSynchronous) {\n  var moduleInfo = this.moduleInfoMap[moduleId];\n  var callbackWrapper;\n\n  if (moduleInfo.isLoaded()) {\n    goog.log.fine(this.logger_, moduleId + ' module already loaded');\n    // Call async so that code paths don't change between loaded and unloaded\n    // cases.\n    callbackWrapper = new goog.module.ModuleLoadCallback(fn, opt_handler);\n    if (opt_preferSynchronous) {\n      callbackWrapper.execute(this.getModuleContext());\n    } else {\n      window.setTimeout(goog.bind(callbackWrapper.execute, callbackWrapper), 0);\n    }\n  } else if (this.isModuleLoading(moduleId)) {\n    goog.log.fine(this.logger_, moduleId + ' module already loading');\n    callbackWrapper = moduleInfo.registerCallback(fn, opt_handler);\n    if (opt_userInitiated) {\n      goog.log.fine(\n          this.logger_, 'User initiated module already loading: ' + moduleId);\n      this.addUserInitiatedLoadingModule_(moduleId);\n      this.dispatchActiveIdleChangeIfNeeded_();\n    }\n  } else {\n    goog.log.fine(this.logger_, 'Registering callback for module: ' + moduleId);\n    callbackWrapper = moduleInfo.registerCallback(fn, opt_handler);\n    if (!opt_noLoad) {\n      if (opt_userInitiated) {\n        goog.log.fine(this.logger_, 'User initiated module load: ' + moduleId);\n        this.addUserInitiatedLoadingModule_(moduleId);\n      }\n      goog.log.fine(this.logger_, 'Initiating module load: ' + moduleId);\n      this.loadModulesOrEnqueue_([moduleId]);\n    }\n  }\n  return callbackWrapper;\n};\n\n\n/** @override */\ngoog.module.ModuleManager.prototype.load = function(\n    moduleId, opt_userInitiated) {\n  return this.loadModulesOrEnqueueIfNotLoadedOrLoading_(\n      [moduleId], opt_userInitiated)[moduleId];\n};\n\n\n/** @override */\ngoog.module.ModuleManager.prototype.loadMultiple = function(\n    moduleIds, opt_userInitiated) {\n  return this.loadModulesOrEnqueueIfNotLoadedOrLoading_(\n      moduleIds, opt_userInitiated);\n};\n\n\n/**\n * Ensures that the module with the given id is listed as a user-initiated\n * module that is being loaded. This method guarantees that a module will never\n * get listed more than once.\n * @param {string} id Identifier of the module.\n * @private\n */\ngoog.module.ModuleManager.prototype.addUserInitiatedLoadingModule_ = function(\n    id) {\n  if (!goog.array.contains(this.userInitiatedLoadingModuleIds_, id)) {\n    this.userInitiatedLoadingModuleIds_.push(id);\n  }\n};\n\n\n/** @override */\ngoog.module.ModuleManager.prototype.beforeLoadModuleCode = function(id) {\n  this.loadTracer_ =\n      goog.debug.Trace.startTracer('Module Load: ' + id, 'Module Load');\n  if (this.currentlyLoadingModule_) {\n    goog.log.error(\n        this.logger_,\n        'beforeLoadModuleCode called with module \"' + id + '\" while module \"' +\n            this.currentlyLoadingModule_.getId() + '\" is loading');\n  }\n  this.currentlyLoadingModule_ = this.getModuleInfo(id);\n};\n\n\n/** @override */\ngoog.module.ModuleManager.prototype.registerInitializationCallback = function(\n    fn, opt_handler) {\n  if (!this.currentlyLoadingModule_) {\n    goog.log.error(this.logger_, 'No module is currently loading');\n  } else {\n    this.currentlyLoadingModule_.registerEarlyCallback(fn, opt_handler);\n  }\n};\n\n\n/** @override */\ngoog.module.ModuleManager.prototype.registerLateInitializationCallback =\n    function(fn, opt_handler) {\n  if (!this.currentlyLoadingModule_) {\n    goog.log.error(this.logger_, 'No module is currently loading');\n  } else {\n    this.currentlyLoadingModule_.registerCallback(fn, opt_handler);\n  }\n};\n\n\n/** @override */\ngoog.module.ModuleManager.prototype.setModuleConstructor = function(fn) {\n  if (!this.currentlyLoadingModule_) {\n    goog.log.error(this.logger_, 'No module is currently loading');\n    return;\n  }\n  this.currentlyLoadingModule_.setModuleConstructor(fn);\n};\n\n\n/**\n * Handles a module load failure.\n *\n * @param {!Array<string>} requestedLoadingModuleIds Modules ids that were\n *     requested in failed request. Does not included calculated dependencies.\n * @param {!Array<string>} requestedModuleIdsWithDeps All module ids requested\n *     in the failed request including all dependencies.\n * @param {?number} status The error status.\n * @private\n */\ngoog.module.ModuleManager.prototype.handleLoadError_ = function(\n    requestedLoadingModuleIds, requestedModuleIdsWithDeps, status) {\n  this.consecutiveFailures_++;\n  // Module manager was not designed to be reentrant. Reinstate the instance\n  // var with actual value when request failed (Other requests may have\n  // started already.)\n  this.requestedLoadingModuleIds_ = requestedLoadingModuleIds;\n  // Pretend we never requested the failed modules.\n  goog.array.forEach(\n      requestedModuleIdsWithDeps,\n      goog.partial(goog.array.remove, this.requestedModuleIds_), this);\n\n  if (status == 401) {\n    // The user is not logged in. They've cleared their cookies or logged out\n    // from another window.\n    goog.log.info(this.logger_, 'Module loading unauthorized');\n    this.dispatchModuleLoadFailed_(\n        goog.loader.AbstractModuleManager.FailureType.UNAUTHORIZED);\n    // Drop any additional module requests.\n    this.requestedModuleIdsQueue_.length = 0;\n  } else if (status == 410) {\n    // The requested module js is old and not available.\n    this.requeueBatchOrDispatchFailure_(\n        goog.loader.AbstractModuleManager.FailureType.OLD_CODE_GONE);\n    this.loadNextModules_();\n  } else if (this.consecutiveFailures_ >= 3) {\n    goog.log.info(\n        this.logger_,\n        'Aborting after failure to load: ' + this.loadingModuleIds_);\n    this.requeueBatchOrDispatchFailure_(\n        goog.loader.AbstractModuleManager.FailureType.CONSECUTIVE_FAILURES);\n    this.loadNextModules_();\n  } else {\n    goog.log.info(\n        this.logger_,\n        'Retrying after failure to load: ' + this.loadingModuleIds_);\n    var forceReload = status ==\n        goog.loader.AbstractModuleManager.CORRUPT_RESPONSE_STATUS_CODE;\n    this.loadModules_(this.requestedLoadingModuleIds_, true, forceReload);\n  }\n};\n\n\n/**\n * Handles a module load timeout.\n * @private\n */\ngoog.module.ModuleManager.prototype.handleLoadTimeout_ = function() {\n  goog.log.info(\n      this.logger_, 'Aborting after timeout: ' + this.loadingModuleIds_);\n  this.requeueBatchOrDispatchFailure_(\n      goog.loader.AbstractModuleManager.FailureType.TIMEOUT);\n  this.loadNextModules_();\n};\n\n\n/**\n * Requeues batch loads that had more than one requested module\n * (i.e. modules that were not included as dependencies) as separate loads or\n * if there was only one requested module, fails that module with the received\n * cause.\n * @param {!goog.loader.AbstractModuleManager.FailureType} cause The reason for\n *     the failure.\n * @private\n */\ngoog.module.ModuleManager.prototype.requeueBatchOrDispatchFailure_ = function(\n    cause) {\n  // The load failed, so if there are more than one requested modules, then we\n  // need to retry each one as a separate load. Otherwise, if there is only one\n  // requested module, remove it and its dependencies from the queue.\n  if (this.requestedLoadingModuleIds_.length > 1) {\n    var queuedModules =\n        goog.array.map(this.requestedLoadingModuleIds_, function(id) {\n          return [id];\n        });\n    this.requestedModuleIdsQueue_ =\n        queuedModules.concat(this.requestedModuleIdsQueue_);\n  } else {\n    this.dispatchModuleLoadFailed_(cause);\n  }\n};\n\n\n/**\n * Handles when a module load failed.\n * @param {!goog.loader.AbstractModuleManager.FailureType} cause The reason for\n *     the failure.\n * @private\n */\ngoog.module.ModuleManager.prototype.dispatchModuleLoadFailed_ = function(\n    cause) {\n  var failedIds = this.requestedLoadingModuleIds_;\n  this.loadingModuleIds_.length = 0;\n  // If any pending modules depend on the id that failed,\n  // they need to be removed from the queue.\n  var idsToCancel = [];\n  for (var i = 0; i < this.requestedModuleIdsQueue_.length; i++) {\n    var dependentModules = goog.array.filter(\n        this.requestedModuleIdsQueue_[i],\n        /**\n         * Returns true if the requestedId has dependencies on the modules that\n         * just failed to load.\n         * @param {string} requestedId The module to check for dependencies.\n         * @return {boolean} True if the module depends on failed modules.\n         */\n        function(requestedId) {\n          var requestedDeps =\n              this.getNotYetLoadedTransitiveDepIds_(requestedId);\n          return goog.array.some(failedIds, function(id) {\n            return goog.array.contains(requestedDeps, id);\n          });\n        },\n        this);\n    goog.array.extend(idsToCancel, dependentModules);\n  }\n\n  // Also insert the ids that failed to load as ids to cancel.\n  for (var i = 0; i < failedIds.length; i++) {\n    goog.array.insert(idsToCancel, failedIds[i]);\n  }\n\n  // Remove ids to cancel from the queues.\n  for (var i = 0; i < idsToCancel.length; i++) {\n    for (var j = 0; j < this.requestedModuleIdsQueue_.length; j++) {\n      goog.array.remove(this.requestedModuleIdsQueue_[j], idsToCancel[i]);\n    }\n    goog.array.remove(this.userInitiatedLoadingModuleIds_, idsToCancel[i]);\n  }\n\n  // Call the functions for error notification.\n  var errorCallbacks =\n      this.callbackMap_[goog.loader.AbstractModuleManager.CallbackType.ERROR];\n  if (errorCallbacks) {\n    for (var i = 0; i < errorCallbacks.length; i++) {\n      var callback = errorCallbacks[i];\n      for (var j = 0; j < idsToCancel.length; j++) {\n        callback(\n            goog.loader.AbstractModuleManager.CallbackType.ERROR,\n            idsToCancel[j], cause);\n      }\n    }\n  }\n\n  // Call the errbacks on the module info.\n  for (var i = 0; i < failedIds.length; i++) {\n    if (this.moduleInfoMap[failedIds[i]]) {\n      this.moduleInfoMap[failedIds[i]].onError(cause);\n    }\n  }\n\n  // Clear the requested loading module ids.\n  this.requestedLoadingModuleIds_.length = 0;\n\n  this.dispatchActiveIdleChangeIfNeeded_();\n};\n\n\n/**\n * Loads the next modules on the queue.\n * @private\n */\ngoog.module.ModuleManager.prototype.loadNextModules_ = function() {\n  while (this.requestedModuleIdsQueue_.length) {\n    // Remove modules that are already loaded.\n    var nextIds =\n        goog.array.filter(this.requestedModuleIdsQueue_.shift(), function(id) {\n          return !this.getModuleInfo(id).isLoaded();\n        }, this);\n    if (nextIds.length > 0) {\n      this.loadModules_(nextIds);\n      return;\n    }\n  }\n\n  // Dispatch an active/idle change if needed.\n  this.dispatchActiveIdleChangeIfNeeded_();\n};\n\n\n/** @override */\ngoog.module.ModuleManager.prototype.registerCallback = function(types, fn) {\n  if (!goog.isArray(types)) {\n    types = [types];\n  }\n\n  for (var i = 0; i < types.length; i++) {\n    this.registerCallback_(types[i], fn);\n  }\n};\n\n\n/**\n * Register a callback for the specified callback type.\n * @param {!goog.loader.AbstractModuleManager.CallbackType} type The callback\n *     type.\n * @param {!Function} fn The callback function.\n * @private\n */\ngoog.module.ModuleManager.prototype.registerCallback_ = function(type, fn) {\n  var callbackMap = this.callbackMap_;\n  if (!callbackMap[type]) {\n    callbackMap[type] = [];\n  }\n  callbackMap[type].push(fn);\n};\n\n\n/**\n * Call the callback functions of the specified type.\n * @param {!goog.loader.AbstractModuleManager.CallbackType} type The callback\n *     type.\n * @private\n */\ngoog.module.ModuleManager.prototype.executeCallbacks_ = function(type) {\n  var callbacks = this.callbackMap_[type];\n  for (var i = 0; callbacks && i < callbacks.length; i++) {\n    callbacks[i](type);\n  }\n};\n\n\n/** @override */\ngoog.module.ModuleManager.prototype.dispose = function() {\n  // Dispose of each ModuleInfo object.\n  goog.disposeAll(\n      goog.object.getValues(this.moduleInfoMap), this.baseModuleInfo_);\n  this.moduleInfoMap = {};\n  this.loadingModuleIds_ = [];\n  this.requestedLoadingModuleIds_ = [];\n  this.userInitiatedLoadingModuleIds_ = [];\n  this.requestedModuleIdsQueue_ = [];\n  this.callbackMap_ = {};\n  this.isDisposed_ = true;\n};\n\n/** @override */\ngoog.module.ModuleManager.prototype.isDisposed = function() {\n  return this.isDisposed_;\n};\n\ngoog.loader.activeModuleManager.setDefault(function() {\n  return new goog.module.ModuleManager();\n});\n"],
"names":["goog","provide","require","module","ModuleManager","goog.module.ModuleManager","base","moduleInfoMap","loadingModuleIds_","requestedLoadingModuleIds_","requestedModuleIds_","requestedModuleIdsQueue_","userInitiatedLoadingModuleIds_","callbackMap_","baseModuleInfo_","ModuleInfo","currentlyLoadingModule_","lastInitialModuleId_","initialModulesLoaded_","async","Deferred","logger_","log","getLogger","batchModeEnabled_","concurrentLoadingEnabled_","loadTracer_","consecutiveFailures_","lastActive_","userLastActive_","isDisposed_","inherits","loader","AbstractModuleManager","CallbackType","FailureType","CORRUPT_RESPONSE_STATUS_CODE","getInstance","goog.module.ModuleManager.getInstance","activeModuleManager","get","prototype","setBatchModeEnabled","goog.module.ModuleManager.prototype.setBatchModeEnabled","enabled","setConcurrentLoadingEnabled","goog.module.ModuleManager.prototype.setConcurrentLoadingEnabled","setAllModuleInfo","goog.module.ModuleManager.prototype.setAllModuleInfo","infoMap","id","hasFired","callback","maybeFinishBaseLoad_","setAllModuleInfoString","goog.module.ModuleManager.prototype.setAllModuleInfoString","opt_info","opt_loadingModuleIds","modules","split","moduleIds","i","length","parts","deps","j","index","parseInt","asserts","assert","push","array","extend","peek","getModuleInfo","goog.module.ModuleManager.prototype.getModuleInfo","setModuleTrustedUris","goog.module.ModuleManager.prototype.setModuleTrustedUris","moduleUriMap","setTrustedUris","setModuleContext","goog.module.ModuleManager.prototype.setModuleContext","context","isActive","goog.module.ModuleManager.prototype.isActive","isUserActive","goog.module.ModuleManager.prototype.isUserActive","dispatchActiveIdleChangeIfNeeded_","goog.module.ModuleManager.prototype.dispatchActiveIdleChangeIfNeeded_","lastActive","active","executeCallbacks_","ACTIVE","IDLE","userLastActive","userActive","USER_ACTIVE","USER_IDLE","preloadModule","goog.module.ModuleManager.prototype.preloadModule","opt_timeout","d","window","setTimeout","bind","addLoadModule_","prefetchModule","goog.module.ModuleManager.prototype.prefetchModule","moduleInfo","isLoaded","isModuleLoading","Error","idWithDeps","getNotYetLoadedTransitiveDepIds_","getLoader","goog.module.ModuleManager.prototype.addLoadModule_","getModuleContext","registerModuleLoadCallbacks_","loadModulesOrEnqueue_","loadModulesOrEnqueueIfNotLoadedOrLoading_","goog.module.ModuleManager.prototype.loadModulesOrEnqueueIfNotLoadedOrLoading_","ids","opt_userInitiated","uniqueIds","removeDuplicates","idsToLoad","deferredMap","goog.module.ModuleManager.prototype.registerModuleLoadCallbacks_","userInitiated","registerCallback","registerErrback","err","errback","fine","addUserInitiatedLoadingModule_","goog.module.ModuleManager.prototype.loadModulesOrEnqueue_","addCallback","loadModules_","isEmpty","getBackOff_","goog.module.ModuleManager.prototype.getBackOff_","Math","pow","goog.module.ModuleManager.prototype.loadModules_","opt_isRetry","opt_forceReload","idsToLoadImmediately","processModulesForLoad_","clone","apply","loadFn","loadModules","handleLoadError_","handleLoadTimeout_","delay","goog.module.ModuleManager.prototype.processModulesForLoad_","filter","global","idsWithDeps","concat","idToLoad","shift","queuedModules","map","goog.module.ModuleManager.prototype.getNotYetLoadedTransitiveDepIds_","requestedModuleSet","object","createSet","depIdLookupList","depIds","getDependencies","depId","reverse","goog.module.ModuleManager.prototype.maybeFinishBaseLoad_","error","onLoad","dispatchModuleLoadFailed_","INIT_ERROR","setLoaded","goog.module.ModuleManager.prototype.setLoaded","getId","isDisposed","warning","remove","loadNextModules_","debug","Trace","stopTracer","goog.module.ModuleManager.prototype.isModuleLoading","contains","execOnLoad","goog.module.ModuleManager.prototype.execOnLoad","moduleId","fn","opt_handler","opt_noLoad","opt_preferSynchronous","callbackWrapper","ModuleLoadCallback","execute","load","goog.module.ModuleManager.prototype.load","loadMultiple","goog.module.ModuleManager.prototype.loadMultiple","goog.module.ModuleManager.prototype.addUserInitiatedLoadingModule_","beforeLoadModuleCode","goog.module.ModuleManager.prototype.beforeLoadModuleCode","startTracer","registerInitializationCallback","goog.module.ModuleManager.prototype.registerInitializationCallback","registerEarlyCallback","registerLateInitializationCallback","goog.module.ModuleManager.prototype.registerLateInitializationCallback","setModuleConstructor","goog.module.ModuleManager.prototype.setModuleConstructor","goog.module.ModuleManager.prototype.handleLoadError_","requestedLoadingModuleIds","requestedModuleIdsWithDeps","status","forEach","partial","info","UNAUTHORIZED","requeueBatchOrDispatchFailure_","OLD_CODE_GONE","CONSECUTIVE_FAILURES","forceReload","goog.module.ModuleManager.prototype.handleLoadTimeout_","TIMEOUT","goog.module.ModuleManager.prototype.requeueBatchOrDispatchFailure_","cause","goog.module.ModuleManager.prototype.dispatchModuleLoadFailed_","failedIds","idsToCancel","dependentModules","requestedId","requestedDeps","some","insert","errorCallbacks","ERROR","onError","goog.module.ModuleManager.prototype.loadNextModules_","nextIds","goog.module.ModuleManager.prototype.registerCallback","types","isArray","registerCallback_","goog.module.ModuleManager.prototype.registerCallback_","type","callbackMap","goog.module.ModuleManager.prototype.executeCallbacks_","callbacks","dispose","goog.module.ModuleManager.prototype.dispose","disposeAll","getValues","goog.module.ModuleManager.prototype.isDisposed","setDefault"]
}
