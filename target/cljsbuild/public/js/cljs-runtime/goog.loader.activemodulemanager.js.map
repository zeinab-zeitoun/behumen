{
"version":3,
"file":"goog.loader.activemodulemanager.js",
"lineCount":29,
"mappings":"AAkBA,IAAA,WAAA,CAAA,QAAA,CAAA,OAAA,CAAA;AAAA,cAAA;AAAAA,MAAAC,OAAA,CAAY,iCAAZ,CAAA;AACAD,MAAAC,OAAAC,uBAAA,EAAA;AAEA,QAAMC,wBAAwBH,IAAAI,QAAA,CAAa,mCAAb,CAA9B;AACA,QAAMC,UAAUL,IAAAI,QAAA,CAAa,cAAb,CAAhB;AAIA,MAAIE,gBAAgB,IAApB;AAGA,MAAIC,aAAa,IAAjB;AAMAC,UAASA,IAAG,EAAG;AACb,QAAI,CAACF,aAAL,IAAsBC,UAAtB;AACED,mBAAA,GAAgBC,UAAA,EAAhB;AADF;AAGAF,WAAAI,OAAA,CACIH,aADJ,IACqB,IADrB,EAC2B,0CAD3B,CAAA;AAEA,WAAOA,aAAP;AANa;AAefI,UAASA,IAAG,CAACC,gBAAD,CAAmB;AAC7BN,WAAAI,OAAA,CACIH,aADJ,IACqB,IADrB,EAC2B,yCAD3B,CAAA;AAEAA,iBAAA,GAAgBK,gBAAhB;AAH6B;AAW/BC,UAASA,WAAU,CAACC,EAAD,CAAK;AACtBN,cAAA,GAAaM,EAAb;AADsB;AAKxB,QAAMC,QAAQA,QAAQ,EAAG;AACvBR,iBAAA,GAAgB,IAAhB;AADuB,GAAzB;AAIAS,SAAA,GAAU,CACRP,GADQ,EAERE,GAFQ,EAGRE,UAHQ,EAIRE,KAJQ,CAAV;AApDA,SAAA,OAAA;AAAA,CAAA,CAAA;;",
"sources":["goog/loader/activemodulemanager.js"],
"sourcesContent":["// Copyright 2017 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview A singleton interface for managing JavaScript code modules.\n */\n\ngoog.module('goog.loader.activeModuleManager');\ngoog.module.declareLegacyNamespace();\n\nconst AbstractModuleManager = goog.require('goog.loader.AbstractModuleManager');\nconst asserts = goog.require('goog.asserts');\n\n\n/** @type {?AbstractModuleManager} */\nlet moduleManager = null;\n\n/** @type {?function(): !AbstractModuleManager} */\nlet getDefault = null;\n\n/**\n * Gets the active module manager, instantiating one if necessary.\n * @return {!AbstractModuleManager}\n */\nfunction get() {\n  if (!moduleManager && getDefault) {\n    moduleManager = getDefault();\n  }\n  asserts.assert(\n      moduleManager != null, 'The module manager has not yet been set.');\n  return moduleManager;\n}\n\n/**\n * Sets the active module manager. This should never be used to override an\n * existing manager.\n *\n * @param {!AbstractModuleManager} newModuleManager\n */\nfunction set(newModuleManager) {\n  asserts.assert(\n      moduleManager == null, 'The module manager cannot be redefined.');\n  moduleManager = newModuleManager;\n}\n\n/**\n * Stores a callback that will be used  to get an AbstractModuleManager instance\n * if set() is not called before the first get() call.\n * @param {function(): !AbstractModuleManager} fn\n */\nfunction setDefault(fn) {\n  getDefault = fn;\n}\n\n/** Test-only method for removing the active module manager. */\nconst reset = function() {\n  moduleManager = null;\n};\n\nexports = {\n  get,\n  set,\n  setDefault,\n  reset,\n};\n"],
"names":["goog","module","declareLegacyNamespace","AbstractModuleManager","require","asserts","moduleManager","getDefault","get","assert","set","newModuleManager","setDefault","fn","reset","exports"]
}
