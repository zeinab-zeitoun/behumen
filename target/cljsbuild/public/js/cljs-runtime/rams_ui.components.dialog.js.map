{"version":3,"sources":["rams_ui/components/dialog.cljs"],"mappings":"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","names":["p__69196","map__69197","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","rams-ui.components.dialog/modal","id","title","message","content","model","actions","width","allow-escape?","on-escape","on-close","persistent?","uuid","rams-ui.util/gen-uuid","state","rams_ui.util.get_value","rams-ui.util/rendering-id","p__69199","map__69200","show-dividers?","theme","reagent-material-ui.styles/use-theme","fullscreen","G__69203","fexpr__69202","js/module$node_modules$$material_ui$core$esm$useMediaQuery$index","fexpr__69204","reagent-material-ui.core.dialog/dialog","cljs.core/deref","cljs.core.merge","rams_ui.util.set_value","cljs.core/fn?","reagent-material-ui.core.dialog-title/dialog-title","reagent-material-ui.core.dialog-content/dialog-content","reagent-material-ui.core.dialog-content-text/dialog-content-text","reagent-material-ui.core.dialog-actions/dialog-actions","cljs.core.doall","iter__4529__auto__","s__69206","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__69208","cljs.core/chunk-buffer","i__69207","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__69205","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","action","reagent-material-ui.core.button/button","cljs.core/chunk-first"],"sourcesContent":["(ns rams-ui.components.dialog\n  (:require [reagent.core :as r]\n            [re-frame.core :refer [dispatch subscribe reg-event-db reg-sub]]\n            [clojure.string :as cstr]\n                        [reagent-material-ui.util :as mi-util]\n\n            [rams-ui.util :refer [gen-uuid rendering-id set-db-value\n                                  set-value get-value get-db-value\n                                  set-error get-error]]\n            [reagent-material-ui.styles :refer [make-styles with-styles use-theme]]\n            [reagent-material-ui.core.box :refer [box]]\n            [reagent-material-ui.core.button :refer [button]]\n            [\"@material-ui/core/useMediaQuery\" :as MuiuseMediaQuery]\n            [reagent-material-ui.core.dialog :refer [dialog]]\n            [reagent-material-ui.core.dialog-title :refer [dialog-title]]\n            [reagent-material-ui.core.dialog-actions :refer [dialog-actions]]\n            [reagent-material-ui.core.dialog-content :refer [dialog-content]]\n            [reagent-material-ui.core.dialog-content-text :refer [dialog-content-text]]))\n\n\n(defn modal\n  \"creates a material ui modal dialog. This dialog will only be opened if the id value is set to true. The function takes the following configuration keys. Note that the dialog will be full screen if the screen is on mobile.\n\n  - **:id**: is a required keyword/string/number/array that identifies the state of modal whether open or closed.\n  - **:title**: is an optional title of the dialog\n  - **:message**: is an optional text message that shows as the first part of the dialog content\n  - **:content**: is an optional React component to be drawn. This usually is a form or block of input fields\n  - **:width**: is an optional argument indicating the width of the modal The optional values are xs | sm | md | lg | xl. Default value is sm\n  - **:allow-escape?**: is an optional boolean indicating whether the modal can be hidden by clicking on the backdrop or typing Esc. Default is true\n  - **:on-escape**: is an optional function that will be called. Has no effect if **:allow-escape?** is false\n  - **:on-close**: is an optional function that will be called once the modal is to be closed\n  - **:actions**: is an optional array of hashmaps identifying the buttons at the footer of the dialog. Each hashmap should have a label key and an on-click key. Optionally they can have a color key which can be secondary | primary\n  - **:show-dividers?**: is an optional argument indicating if there should be a horizontal line between title content and footer.\n  - **persistent?**: identifies that the state of the odal will carry over from one page to the next\n  - **model**: an optional ratom to save the **id** in. Note that we dont recomend using this as it cant be saved from page to page\"\n  [{:keys [id title message content model\n           actions width allow-escape?\n           on-escape on-close persistent?]}]\n  (let [uuid (if id id (gen-uuid))\n        state (get-value uuid :model model\n                         :persistent? persistent?)]\n    (rendering-id uuid)\n    (fn [{:keys [title message content\n                 actions width allow-escape?\n                 on-escape on-close show-dividers?]\n          :or {allow-escape? true}}]\n      (let [theme (use-theme)\n            fullscreen ((.-default MuiuseMediaQuery)\n                        ((:down (:breakpoints theme)) \"sm\"))]\n        [dialog (merge {:open @state :max-width width\n                        :full-screen fullscreen\n                        :scroll \"paper\"}\n                       (when width\n                         {:max-width width\n                          :full-width true})\n                       (when on-close\n                         {:on-close on-close})\n                       (when allow-escape?\n                         (merge {:disableEscapeKeyDown false\n                                 :disableBackdropClick false}\n                                {:onBackdropClick (fn []\n                                                    (set-value uuid false :model model\n                                                               :persistent? persistent?)\n                                                    (when (fn? on-escape)\n                                                      (on-escape)))\n                                 :onEscapeKeyDown (fn []\n                                                    (set-value uuid false :model model\n                                                               :persistent? persistent?)\n                                                    (when (fn? on-escape)\n                                                      (on-escape)))})))\n         [dialog-title {} (when title title)]\n         [dialog-content {:dividers show-dividers?}\n          (when message\n            [dialog-content-text message])\n          content]\n         [dialog-actions\n          (doall\n           (for [action actions]\n             [button {:key (gen-uuid)\n                      :on-click (:on-click action)\n                      :color (if (:color action)\n                               (:color action)\n                               \"primary\")}\n              (:label action)]))]]))))\n"]}