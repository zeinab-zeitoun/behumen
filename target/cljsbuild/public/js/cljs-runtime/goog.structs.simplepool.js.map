{
"version":3,
"file":"goog.structs.simplepool.js",
"lineCount":69,
"mappings":"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",
"sources":["goog/structs/simplepool.js"],
"sourcesContent":["// Copyright 2007 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Datastructure: Pool.\n *\n *\n * A generic class for handling pools of objects that is more efficient than\n * goog.structs.Pool because it doesn't maintain a list of objects that are in\n * use. See constructor comment.\n */\n\n\ngoog.provide('goog.structs.SimplePool');\n\ngoog.require('goog.Disposable');\n\n\n\n/**\n * A generic pool class. Simpler and more efficient than goog.structs.Pool\n * because it doesn't maintain a list of objects that are in use. This class\n * has constant overhead and doesn't create any additional objects as part of\n * the pool management after construction time.\n *\n * IMPORTANT: If the objects being pooled are arrays or maps that can have\n * unlimited number of properties, they need to be cleaned before being\n * returned to the pool.\n *\n * Also note that {@see goog.object.clean} actually allocates an array to clean\n * the object passed to it, so simply using this function would defy the\n * purpose of using the pool.\n *\n * @param {number} initialCount Initial number of objects to populate the free\n *     pool at construction time.\n * @param {number} maxCount Maximum number of objects to keep in the free pool.\n * @constructor\n * @extends {goog.Disposable}\n * @template T\n */\ngoog.structs.SimplePool = function(initialCount, maxCount) {\n  goog.Disposable.call(this);\n\n  /**\n   * Function for overriding createObject. The avoids a common case requiring\n   * subclassing this class.\n   * @private {?Function}\n   */\n  this.createObjectFn_ = null;\n\n  /**\n   * Function for overriding disposeObject. The avoids a common case requiring\n   * subclassing this class.\n   * @private {?Function}\n   */\n  this.disposeObjectFn_ = null;\n\n  /**\n   * Maximum number of objects allowed\n   * @private {number}\n   */\n  this.maxCount_ = maxCount;\n\n  /**\n   * Queue used to store objects that are currently in the pool and available\n   * to be used.\n   * @private {Array<T>}\n   */\n  this.freeQueue_ = [];\n\n  this.createInitial_(initialCount);\n};\ngoog.inherits(goog.structs.SimplePool, goog.Disposable);\n\n\n/**\n * Sets the `createObject` function which is used for creating a new\n * object in the pool.\n * @param {Function} createObjectFn Create object function which returns the\n *     newly created object.\n */\ngoog.structs.SimplePool.prototype.setCreateObjectFn = function(createObjectFn) {\n  this.createObjectFn_ = createObjectFn;\n};\n\n\n/**\n * Sets the `disposeObject` function which is used for disposing of an\n * object in the pool.\n * @param {Function} disposeObjectFn Dispose object function which takes the\n *     object to dispose as a parameter.\n */\ngoog.structs.SimplePool.prototype.setDisposeObjectFn = function(\n    disposeObjectFn) {\n  this.disposeObjectFn_ = disposeObjectFn;\n};\n\n\n/**\n * Gets an unused object from the the pool, if there is one available,\n * otherwise creates a new one.\n * @return {T} An object from the pool or a new one if necessary.\n */\ngoog.structs.SimplePool.prototype.getObject = function() {\n  if (this.freeQueue_.length) {\n    return this.freeQueue_.pop();\n  }\n  return this.createObject();\n};\n\n\n/**\n * Returns an object to the pool so that it can be reused. If the pool is\n * already full, the object is disposed instead.\n * @param {T} obj The object to release.\n */\ngoog.structs.SimplePool.prototype.releaseObject = function(obj) {\n  if (this.freeQueue_.length < this.maxCount_) {\n    this.freeQueue_.push(obj);\n  } else {\n    this.disposeObject(obj);\n  }\n};\n\n\n/**\n * Populates the pool with initialCount objects.\n * @param {number} initialCount The number of objects to add to the pool.\n * @private\n */\ngoog.structs.SimplePool.prototype.createInitial_ = function(initialCount) {\n  if (initialCount > this.maxCount_) {\n    throw new Error(\n        '[goog.structs.SimplePool] Initial cannot be greater than max');\n  }\n  for (var i = 0; i < initialCount; i++) {\n    this.freeQueue_.push(this.createObject());\n  }\n};\n\n\n/**\n * Should be overridden by sub-classes to return an instance of the object type\n * that is expected in the pool.\n * @return {T} The created object.\n */\ngoog.structs.SimplePool.prototype.createObject = function() {\n  if (this.createObjectFn_) {\n    return this.createObjectFn_();\n  } else {\n    return {};\n  }\n};\n\n\n/**\n * Should be overrideen to dispose of an object. Default implementation is to\n * remove all of the object's members, which should render it useless. Calls the\n *  object's dispose method, if available.\n * @param {T} obj The object to dispose.\n */\ngoog.structs.SimplePool.prototype.disposeObject = function(obj) {\n  if (this.disposeObjectFn_) {\n    this.disposeObjectFn_(obj);\n  } else if (goog.isObject(obj)) {\n    if (goog.isFunction(obj.dispose)) {\n      obj.dispose();\n    } else {\n      for (var i in obj) {\n        delete obj[i];\n      }\n    }\n  }\n};\n\n\n/**\n * Disposes of the pool and all objects currently held in the pool.\n * @override\n * @protected\n */\ngoog.structs.SimplePool.prototype.disposeInternal = function() {\n  goog.structs.SimplePool.superClass_.disposeInternal.call(this);\n  // Call disposeObject on each object held by the pool.\n  var freeQueue = this.freeQueue_;\n  while (freeQueue.length) {\n    this.disposeObject(freeQueue.pop());\n  }\n  delete this.freeQueue_;\n};\n"],
"names":["goog","provide","require","structs","SimplePool","goog.structs.SimplePool","initialCount","maxCount","Disposable","call","createObjectFn_","disposeObjectFn_","maxCount_","freeQueue_","createInitial_","inherits","prototype","setCreateObjectFn","goog.structs.SimplePool.prototype.setCreateObjectFn","createObjectFn","setDisposeObjectFn","goog.structs.SimplePool.prototype.setDisposeObjectFn","disposeObjectFn","getObject","goog.structs.SimplePool.prototype.getObject","length","pop","createObject","releaseObject","goog.structs.SimplePool.prototype.releaseObject","obj","push","disposeObject","goog.structs.SimplePool.prototype.createInitial_","Error","i","goog.structs.SimplePool.prototype.createObject","goog.structs.SimplePool.prototype.disposeObject","isObject","isFunction","dispose","disposeInternal","goog.structs.SimplePool.prototype.disposeInternal","superClass_","freeQueue"]
}
