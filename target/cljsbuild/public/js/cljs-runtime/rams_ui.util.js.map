{"version":3,"sources":["rams_ui/util.cljs"],"mappings":";AAMA,AAAMA,AAAiB,AAAA,AAACC;AAAxB,AAEE,AAAA,AAAeC,AAAsBC;AAArC,AACE,AAAM,AAASC;AAAf,AACE,AAAM,AAAA,AAAAC,AAACC,AAAWN,AAAiBG;AAAnC,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAACI,AAAyCJ;;AAD5C;;;AADF;;;;AAIF;;;AAAA,AAAMK,AAEHL;AAFH,AAGE,AAACD,AAAqBC;;AACtB,AAAA,AAACM,AAAMT,AAAiBU,AAAMP;;;AAGhC,AAAA,AAAeQ;AAAf,AACE,AAAA,AAACC,AAAOZ;;AAGZ,AAAA;;;;;;;;AAAA,AAAAa,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAMD,AAOHc,AAAG9B,AAAG+B;AAPT,AAAA,AAAAb,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAOyBc;AAPzB,AAQE,AAAMC,AAAS,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAID;AAAnB,AAGE,AAACE,AAASJ,AAAG,AAAI,AAACK,AAAQnC,AACX,AAACoC,AAAOH,AAASjC,AACjB,AAACqC,AAAKJ,AAASjC,AACpB+B;;;AAdd,AAAA,AAAA,AAAMf;;AAAN;AAAA,AAAA,AAAA,AAAAO,AAAMP;AAAN,AAAA,AAAAQ,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAAI,AAAA,AAAAF,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAAK,AAAA,AAAAH,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAM,AAAA;AAAA,AAAA,AAAAA,AAAAL,AAAAG,AAAAC,AAAAL;;;AAAA,AAiBA,AAAA;;;;;;;AAAA,AAAAb,AAAM4B;AAAN,AAAA,AAAA3B,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA2B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAxB;;;AAAA,AAAA,AAAA,AAAA,AAAAyB,AAAMD,AAMHR,AAAG9B;AANN,AAAA,AAAAwC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArB,AAAA,AAAAqB,AAAA,AAAA,AAAA,AAAA,AAAApB,AAAAC,AAAAmB,AAAAA;AAAA,AAAAlB,AAAAkB,AAAA,AAMoBR;AANpB,AAOE,AAAMC,AAAS,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAID;AAAnB,AAGE,AAACY,AAAOd,AAAG,AAAI,AAACK,AAAQnC,AACX,AAACoC,AAAOH,AAASjC,AACjB,AAACqC,AAAKJ,AAASjC;;;AAZhC,AAAA,AAAA,AAAMsC;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAAjB,AAAAgB;AAAAA,AAAA,AAAAf,AAAAe;AAAAE,AAAA,AAAAlB,AAAAgB;AAAAA,AAAA,AAAAf,AAAAe;AAAA,AAAA,AAAAZ,AAAA;AAAA,AAAA,AAAAA,AAAAa,AAAAC,AAAAF;;;AAAA,AAeA,AAAA;;;;;;;;AAAA,AAAA/B,AAAMmC;AAAN,AAAA,AAAAlC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAkC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA/B;;;AAAA,AAAA,AAAA,AAAA,AAAAgC,AAAMD,AAOHf,AAAG9B,AAAG+B;AAPT,AAAA,AAAAgB,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA5B,AAAA,AAAA4B,AAAA,AAAA,AAAA,AAAA,AAAA3B,AAAAC,AAAA0B,AAAAA;AAAA,AAAAzB,AAAAyB,AAAA,AAOyBf;AAPzB,AAQE,AAAMC,AAAS,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAID;AAAnB,AAGE,AAACE,AAASJ,AAAG,AAAI,AAACK,AAAQnC,AACX,AAACoC,AAAOH,AAASjC,AACjB,AAACqC,AAAKJ,AAASjC,AACpB+B;;;AAdd,AAAA,AAAA,AAAMc;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAAxB,AAAAuB;AAAAA,AAAA,AAAAtB,AAAAsB;AAAAE,AAAA,AAAAzB,AAAAuB;AAAAA,AAAA,AAAAtB,AAAAsB;AAAAG,AAAA,AAAA1B,AAAAuB;AAAAA,AAAA,AAAAtB,AAAAsB;AAAA,AAAA,AAAAnB,AAAA;AAAA,AAAA,AAAAA,AAAAoB,AAAAC,AAAAC,AAAAH;;;AAAA,AAiBA,AAAA;;;;;;;AAAA,AAAAtC,AAAM0C;AAAN,AAAA,AAAAzC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAyC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAtC;;;AAAA,AAAA,AAAA,AAAA,AAAAuC,AAAMD,AAMHtB,AAAG9B;AANN,AAAA,AAAAsD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAnC,AAAA,AAAAmC,AAAA,AAAA,AAAA,AAAA,AAAAlC,AAAAC,AAAAiC,AAAAA;AAAA,AAAAhC,AAAAgC,AAAA,AAMoBtB;AANpB,AAOE,AAAMC,AAAS,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAID;AAAnB,AAGE,AAACY,AAAOd,AAAG,AAAI,AAACK,AAAQnC,AACX,AAACoC,AAAOH,AAASjC,AACjB,AAACqC,AAAKJ,AAASjC;;;AAZhC,AAAA,AAAA,AAAMoD;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAA/B,AAAA8B;AAAAA,AAAA,AAAA7B,AAAA6B;AAAAE,AAAA,AAAAhC,AAAA8B;AAAAA,AAAA,AAAA7B,AAAA6B;AAAA,AAAA,AAAA1B,AAAA;AAAA,AAAA,AAAAA,AAAA2B,AAAAC,AAAAF;;;AAAA,AAeA,AAAA,AAACG,AAEA,AAAAC,AAAK7B;AAAL,AAAA,AAAA8B,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAASE;AAAT,AAAAD,AAAAD,AAAA,AAAA,AAAeG;AAAf,AAAAF,AAAAD,AAAA,AAAA,AAAsBI;AAAtB,AACE,AAAA,AAAA,AAACC,AAA2BF,AAAwBC;;AACpDlC;;AAEH,AAAA,AAAC4B,AAEA,AAAAQ,AAAKpC;AAAL,AAAA,AAAAqC,AAAAD;AAAA,AAAAL,AAAAM,AAAA,AAAA,AAASL;AAAT,AAAAD,AAAAM,AAAA,AAAA,AAAeC;AAAf,AAAAP,AAAAM,AAAA,AAAA,AAAuBpC;AAAvB,AAAA8B,AAAAM,AAAA,AAAA,AAA6BnC;AAA7B,AACE,AAAMC,AAAS,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAID;AAAnB,AAGE,AAACE,AAASJ,AAAG,AAAI,AAACK,AAAQiC,AACX,AAAChC,AAAOH,AAASmC,AACjB,AAAC/B,AAAKJ,AAASmC,AACpBrC;;AAEf,AAAA,AAAC2B,AAEA,AAAAW,AAAKvC;AAAL,AAAA,AAAAwC,AAAAD;AAAA,AAAAR,AAAAS,AAAA,AAAA,AAASR;AAAT,AAAAD,AAAAS,AAAA,AAAA,AAAeF;AAAf,AAAAP,AAAAS,AAAA,AAAA,AAAuBvC;AAAvB,AAAA8B,AAAAS,AAAA,AAAA,AAA6BtC;AAA7B,AACE,AAAMC,AAAS,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAID;AAAnB,AAGE,AAACE,AAASJ,AAAG,AAAI,AAACK,AAAQiC,AACX,AAAChC,AAAOH,AAASmC,AACjB,AAAC/B,AAAKJ,AAASmC,AACpBrC;;AAEf,AAAA,AAAC2B,AAEA,AAAAa,AAAKzC;AAAL,AAAA,AAAA0C,AAAAD;AAAA,AAAAV,AAAAW,AAAA,AAAA,AAASV;AAAT,AAAAD,AAAAW,AAAA,AAAA,AAAeJ;AAAf,AAAAP,AAAAW,AAAA,AAAA,AAAuBzC;AAAvB,AAAA8B,AAAAW,AAAA,AAAA,AAA6BxC;AAA7B,AACE,AAAMC,AAAS,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAID;AAAnB,AAGE,AAACE,AAASJ,AAAG,AAAI,AAACK,AAAQiC,AACX,AAAChC,AAAOH,AAASmC,AACjB,AAAC/B,AAAKJ,AAASmC,AACpBrC;;AAGf,AAAA,AAAC0C,AAEA,AAAAC,AAAK5C;AAAL,AAAA,AAAA6C,AAAAD;AAAA,AAAAb,AAAAc,AAAA,AAAA,AAASb;AAAT,AAAAD,AAAAc,AAAA,AAAA,AAAeP;AAAf,AAAAP,AAAAc,AAAA,AAAA,AAAuB3C;AAAvB,AACE,AAAMC,AAAS,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAID;AAAnB,AAGE,AAACY,AAAOd,AAAG,AAAI,AAACK,AAAQiC,AACX,AAAChC,AAAOH,AAASmC,AACjB,AAAC/B,AAAKJ,AAASmC;;AAEjC,AAAA,AAACK,AAEA,AAAAG,AAAK9C;AAAL,AAAA,AAAA+C,AAAAD;AAAA,AAAAf,AAAAgB,AAAA,AAAA,AAASf;AAAT,AAAAD,AAAAgB,AAAA,AAAA,AAAeT;AAAf,AAAAP,AAAAgB,AAAA,AAAA,AAAuB7C;AAAvB,AACE,AAAMC,AAAS,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAID;AAAnB,AAGE,AAACY,AAAOd,AAAG,AAAI,AAACK,AAAQiC,AACX,AAAChC,AAAOH,AAASmC,AACjB,AAAC/B,AAAKJ,AAASmC;;AAEjC,AAAA,AAACK,AAEA,AAAAK,AAAKhD;AAAL,AAAA,AAAAiD,AAAAD;AAAA,AAAAjB,AAAAkB,AAAA,AAAA,AAASjB;AAAT,AAAAD,AAAAkB,AAAA,AAAA,AAAeX;AAAf,AAAAP,AAAAkB,AAAA,AAAA,AAAuB/C;AAAvB,AACE,AAAMC,AAAS,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAID;AAAnB,AAGE,AAACY,AAAOd,AAAG,AAAI,AAACK,AAAQiC,AACX,AAAChC,AAAOH,AAASmC,AACjB,AAAC/B,AAAKJ,AAASmC;;AAEjC,AAAA,AAACK,AAEA,AAAAO,AAAKlD;AAAL,AAAA,AAAAmD,AAAAD;AAAA,AAAAnB,AAAAoB,AAAA,AAAA,AAASC;AAAT,AACE,AAAA,AAAA,AAAA,AAACtC,AAAOd;;AAEX,AAAA,AAAC2C,AAEA,AAAAU,AAAKrD;AAAL,AAAA,AAAAsD,AAAAD;AAAA,AAAAtB,AAAAuB,AAAA,AAAA,AAASF;AAAT,AACE,AAAA,AAAA,AAAA,AAACtC,AAAOd;;AAEX,AAAA,AAAC2C,AAEA,AAAAY,AAAKvD;AAAL,AAAA,AAAAwD,AAAAD;AAAA,AAAAxB,AAAAyB,AAAA,AAAA,AAASJ;AAAT,AACE,AAAA,AAAA,AAAA,AAACtC,AAAOd;;AAGX,AAAA,AAAC4B,AAEA,AAAA6B,AAAKzD;AAAL,AAAA,AAAA0D,AAAAD;AAAA,AAAA1B,AAAA2B,AAAA,AAAA,AAASN;AAAT,AAAArB,AAAA2B,AAAA,AAAA,AAAWxB;AAAX,AAAAH,AAAA2B,AAAA,AAAA,AAAkBC;AAAlB,AACE,AAAMC,AAAW,AAAA,AAAA,AAAA,AAAC9C,AAAOd;AACnB6D,AAAe,AAACC,AAAMF;AACtBG,AAAa,AAAA,AAAIJ,AAEF,AAAOK,AAAM,AAACC,AAAQL;AACfM,AAAQL;AADf,AAEOM;;AAFP,AAGE,AAAI,AAAIA,AAAK,AAACC,AAAOJ;AACnB,AAAI,AAACI,AAAOJ;AACV,AAACF,AAAMF;;AACPM;;;AACF,AAAMG,AAAK,AAAC1E,AAAMqE;AAAlB,AACE,AAAO,AAACM,AAAKN;AACN,AAAA,AAAKE;AACL,AAAK,AAACK,AAAE,AAAA,AAAMrC,AAAQ,AAAA,AAAMmC,AACvB,AAACE,AAAE,AAAA,AAASrC,AAAQ,AAAA,AAASmC;;;;;;;;;AAC9DG,AAAW,AAAK,AAAA,AAAGT,AACH,AAAGA,AAAaF;AAChCY,AAAW,AAAA,AAAA,AAAM,AAAA,AAAGV,AACP,AAAChC,AAAI6B,AAAW,AAAA,AAAKG;AAnBxC,AAoBE,AAAYW,AAAW,AAACC,AAAQ,AAAA,AAASzC,AAC7B,AAAA,AAAQA,AAAQ,AAAA,AAAMA;;AAC9BlC,AACA,AAAA,AAAA,AAAA,AAACI,AAAoC,AAAIoE,AACH,AAAA,AAAQC,AACR,AAAA,AAASvC,AAC/C,AAAA,AAAA,AAAA,AAAC9B,AAAmC,AAAIoE,AACF,AAAA,AAAQC,AACR,AAAA,AAAQvC,AAC9C,AAAA,AAAA,AAAA,AAAC9B,AAAoC,AAAA,AAAS8B,AAC9C,AAAA,AAAA,AAAA,AAAC9B,AAAiC,AAAA,AAAM8B,AACxC,AAAA,AAAA,AAAA,AAAC9B,AACS,AAACE,AAAO,AAAA,AAAA,AAAMmE,AACJ,AAACG,AAAK,AAAA,AAAKb,AAAcH,AAC3B,AAAM,AAAAiB,AAAKJ;AAAL,AAAA,AAAAI;AACK,AAACN,AAAEV,AAAeE;;AADvBc;;AAFd,AAEQ,AAAA,AAAA,AAEG,AAAA,AAAA,AAACC,AAAML,AACQ,AAAA,AAAA,AAAA,AAAC3D,AAAOd,AACT,AAAA,AAAA,AAAA,AAACc,AAAOd,AACxB,AAAA,AAAA,AAAA,AAAC8E,AAAM5C,AAAc,AAAI,AAAA,AAAQA,AACV,AAAA,AAAQA,AACR,AAAA,AAAQuC,AAChB,AAAID,AACF,AAAA,AAASC,AACT,AAAA,AAASvC,AACZ,AAAIsC,AACF,AAAA,AAAQC,AACR,AAAA,AAAQvC;;AAEpD,AAAA,AAACN,AAEA,AAAAmD,AAAK/E;AAAL,AAAA,AAAAgF,AAAAD;AAAA,AAAAhD,AAAAiD,AAAA,AAAA,AAAS5B;AAAT,AAAArB,AAAAiD,AAAA,AAAA,AAAWC;AAAX,AACE,AAAMC,AAAY,AAACN,AAAK,AAAG,AAACd,AAAM,AAAA,AAAA,AAAA,AAAChD,AAAOd,AACfiF,AACH,AAAA,AAAA,AAAA,AAACnE,AAAOd;AAC1ByE,AAAW,AAACU,AAAKD;AAHvB,AAIE,AAAI,AAAAE,AAAI,AAAChB,AAAOc;AAAZ,AAAA,AAAAE;AAAAA;;AACI,AAAA,AAAA,AAAA,AAACtE,AAAOd;;;AACd,AAAA,AAAA,AAAA,AAAA,AAACI,AAASJ;;AACV,AACE,AAAK0E,AAAW,AAAA,AAAMO;;AAClBjF,AACA,AAAA,AAAA,AAAA,AAAA,AAACI,AACD,AAAA,AAAA,AAAA,AAACA,AAAoC,AAAA,AAASqE,AAC9C,AAAA,AAAA,AAAA,AAACrE,AAAmC,AAAA,AAAQqE,AAC5C,AAAA,AAAA,AAAA,AAACrE,AAAoC,AAAA,AAASqE,AAC9C,AAAA,AAAA,AAAA,AAACrE,AAAiC,AAAA,AAAMqE,AACxC,AAAA,AAAA,AAAA,AAACrE,AAAmC8E;;;AAGjD,AAAA;;;AAAA,AAAAtG,AAAMyG;AAAN,AAAA,AAAAxG,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAwG,AAAArG;;;AAAA,AAAA,AAAA,AAAA,AAAAsG,AAAMD;AAAN,AAAA,AAAAE,AAAAD;AAAA,AAAAvD,AAAAwD,AAAA,AAAA,AAEMN;AAFN,AAAAlD,AAAAwD,AAAA,AAAA,AAEYnC;AAFZ,AAGE,AAAA,AAAA,AAAC9E,AAA2B,AAAA,AAAI2G,AAAMA;;;AAHxC,AAAA,AAAA,AAAMI;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC,AAAAF;;;AAAA,AAOA,AAAA;;;;;;;;;AAAA,AAAA5G,AAAM+G;AAAN,AAAA,AAAA9G,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA8G,AAAA,AAAA,AAAA,AAAA3G;;;AAAA,AAAA,AAAA,AAAA,AAAA4G,AAAMD,AAQHK;AARH,AAAA,AAAAH,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxG,AAAA,AAAAwG,AAAA,AAAA,AAAA,AAAA,AAAAvG,AAAAC,AAAAsG,AAAAA;AAAA,AAAArG,AAAAqG,AAAA,AAQiBI;AARjB,AAAAzG,AAAAqG,AAAA,AAQuB3D;AARvB,AAAA1C,AAAAqG,AAAA,AAQ8BK;AAR9B,AAAA1G,AAAAqG,AAAA,AAQoClC;AARpC,AASE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACrF,AAAqC0H,AACG9D,AACD+D,AACAC,AAC7BvC;;;AAbb,AAAA,AAAA,AAAMgC;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAApG,AAAAmG;AAAAA,AAAA,AAAAlG,AAAAkG;AAAA,AAAA,AAAA/F,AAAA;AAAA,AAAA,AAAAA,AAAAgG,AAAAD;;;AAAA,AAiBA,AAAA,AAAMK;AAAN,AAAA;AAIE,AAAA,AAAA,AAACC;;AAEH,AAAA,AAAMC;AAAN,AAAA;AAEE,AAAA,AAAA,AAACD;;AAEH,AAAA,AAAME;AAAN,AAAA;AAEE,AAAA,AAAA,AAACF;;AAEH,AAAA;;;;;;;;;;;AAAA,AAAAxH,AAAM2H;AAAN,AAAA,AAAA1H,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA0H,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAvH;;;AAAA,AAAA,AAAA,AAAA,AAAAwH,AAAMD,AAUHrI,AAAG+B;AAVN,AAAA,AAAAwG,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApH,AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAnH,AAAAC,AAAAkH,AAAAA;AAAA,AAAAjH,AAAAiH,AAAA,AAUsBvG;AAVtB,AAAAV,AAAAiH,AAAA,AAUkCI;AAVlC,AAWE,AAAIA;AACF,AAACrI,AAAMqI,AAAMzG,AACN,AAAA,AAAI,AAACC,AAAQnC,AACXA,AACCA,AACH+B;;AACP,AAAA,AAAA,AAAC3B,AAA6BJ,AAAG+B,AAAMC;;;;AAjB3C,AAAA,AAAA,AAAMqG;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAAhH,AAAA+G;AAAAA,AAAA,AAAA9G,AAAA8G;AAAAE,AAAA,AAAAjH,AAAA+G;AAAAA,AAAA,AAAA9G,AAAA8G;AAAA,AAAA,AAAA3G,AAAA;AAAA,AAAA,AAAAA,AAAA4G,AAAAC,AAAAF;;;AAAA,AAoBA,AAAA;;;;;;;;;;;;;;;;;;;;AAAA,AAAA9H,AAAMkI;AAAN,AAAA,AAAAjI,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAiI,AAAA,AAAA,AAAA,AAAA9H;;;AAAA,AAAA,AAAA,AAAA,AAAA+H,AAAMD,AAmBH5I;AAnBH,AAAA,AAAA8I,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA3H,AAAA,AAAA2H,AAAA,AAAA,AAAA,AAAA,AAAA1H,AAAAC,AAAAyH,AAAAA;AAAA,AAAAxH,AAAAwH,AAAA,AAmBgB9G;AAnBhB,AAAAV,AAAAwH,AAAA,AAmB4BH;AAnB5B,AAoBE,AAAIA;AACF,AAAC7I,AAAK,AAAA,AAAAI,AAAC0C,AAAQ+F,AAAM,AAAA,AAAI,AAACxG,AAAQnC,AACXA,AACCA;;AACxB,AAAA,AAAA,AAACkI,AAA8BlI,AAAGgC;;;;AAxBtC,AAAA,AAAA,AAAM4G;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAAvH,AAAAsH;AAAAA,AAAA,AAAArH,AAAAqH;AAAA,AAAA,AAAAlH,AAAA;AAAA,AAAA,AAAAA,AAAAmH,AAAAD;;;AAAA,AA0BA,AAAA;;;;;;;;;;;AAAA,AAAArI,AAAMuI;AAAN,AAAA,AAAAtI,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAsI,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAnI;;;AAAA,AAAA,AAAA,AAAA,AAAAoI,AAAMD,AAUHjJ,AAAG+B;AAVN,AAAA,AAAAoH,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhI,AAAA,AAAAgI,AAAA,AAAA,AAAA,AAAA,AAAA/H,AAAAC,AAAA8H,AAAAA;AAAA,AAAA7H,AAAA6H,AAAA,AAUsBnH;AAVtB,AAAAV,AAAA6H,AAAA,AAUkCR;AAVlC,AAWE,AAAIA;AACF,AAACrI,AAAMqI,AAAMzG,AACN,AAAA,AAAA,AAAI,AAACC,AAAQnC,AACX,AAAA,AAAA,AAACoC,AAAiBpC,AACTA,AACX+B;;AACP,AAAA,AAAA,AAAC3B,AAA6BJ,AAAG+B,AAAMC;;;;AAjB3C,AAAA,AAAA,AAAMiH;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAA5H,AAAA2H;AAAAA,AAAA,AAAA1H,AAAA0H;AAAAE,AAAA,AAAA7H,AAAA2H;AAAAA,AAAA,AAAA1H,AAAA0H;AAAA,AAAA,AAAAvH,AAAA;AAAA,AAAA,AAAAA,AAAAwH,AAAAC,AAAAF;;;AAAA,AAoBA,AAAA;;;;;;;;;;;;;;;;;;;;AAAA,AAAA1I,AAAM6I;AAAN,AAAA,AAAA5I,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA4I,AAAA,AAAA,AAAA,AAAAzI;;;AAAA,AAAA,AAAA,AAAA,AAAA0I,AAAMD,AAmBHvJ;AAnBH,AAAA,AAAAyJ,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAtI,AAAA,AAAAsI,AAAA,AAAA,AAAA,AAAA,AAAArI,AAAAC,AAAAoI,AAAAA;AAAA,AAAAnI,AAAAmI,AAAA,AAmBgBzH;AAnBhB,AAAAV,AAAAmI,AAAA,AAmB4Bd;AAnB5B,AAoBE,AAAIA;AACF,AAAA,AAAAzI,AAAC0C,AAAQ+F,AAAM,AAAA,AAAA,AAAI,AAACxG,AAAQnC,AACX,AAAA,AAAA,AAACoC,AAAiBpC,AACVA;;AACzB,AAAA,AAAA,AAACkI,AAA8BlI,AAAGgC;;;;AAxBtC,AAAA,AAAA,AAAMuH;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAAlI,AAAAiI;AAAAA,AAAA,AAAAhI,AAAAgI;AAAA,AAAA,AAAA7H,AAAA;AAAA,AAAA,AAAAA,AAAA8H,AAAAD;;;AAAA,AA0BA,AAAA;;;;;;;;;;;AAAA,AAAAhJ,AAAMkJ;AAAN,AAAA,AAAAjJ,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAiJ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA9I;;;AAAA,AAAA,AAAA,AAAA,AAAA+I,AAAMD,AAUH5J,AAAG+B;AAVN,AAAA,AAAA+H,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA3I,AAAA,AAAA2I,AAAA,AAAA,AAAA,AAAA,AAAA1I,AAAAC,AAAAyI,AAAAA;AAAA,AAAAxI,AAAAwI,AAAA,AAUsB9H;AAVtB,AAAAV,AAAAwI,AAAA,AAUkCnB;AAVlC,AAWE,AAAIA;AACF,AAACrI,AAAMqI,AAAMzG,AACN,AAAA,AAAA,AAAI,AAACC,AAAQnC,AACX,AAAA,AAAA,AAACoC,AAAkBpC,AACTA,AACZ+B;;AACP,AAAA,AAAA,AAAC3B,AAA+BJ,AAAG+B,AAAMC;;;;AAjB7C,AAAA,AAAA,AAAM4H;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAAvI,AAAAsI;AAAAA,AAAA,AAAArI,AAAAqI;AAAAE,AAAA,AAAAxI,AAAAsI;AAAAA,AAAA,AAAArI,AAAAqI;AAAA,AAAA,AAAAlI,AAAA;AAAA,AAAA,AAAAA,AAAAmI,AAAAC,AAAAF;;;AAAA,AAoBA,AAAA;;;;;;;;;;;;;;;;;;;;AAAA,AAAArJ,AAAMwJ;AAAN,AAAA,AAAAvJ,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAuJ,AAAA,AAAA,AAAA,AAAApJ;;;AAAA,AAAA,AAAA,AAAA,AAAAqJ,AAAMD,AAmBHlK;AAnBH,AAAA,AAAAoK,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjJ,AAAA,AAAAiJ,AAAA,AAAA,AAAA,AAAA,AAAAhJ,AAAAC,AAAA+I,AAAAA;AAAA,AAAA9I,AAAA8I,AAAA,AAmBgBpI;AAnBhB,AAAAV,AAAA8I,AAAA,AAmB4BzB;AAnB5B,AAoBE,AAAIA;AACF,AAAA,AAAAzI,AAAC0C,AAAQ+F,AAAM,AAAA,AAAA,AAAI,AAACxG,AAAQnC,AACX,AAAA,AAAA,AAACoC,AAAkBpC,AACTA;;AAC3B,AAAA,AAAA,AAACkI,AAAgClI,AAAGgC;;;;AAxBxC,AAAA,AAAA,AAAMkI;;AAAN;AAAA,AAAA,AAAA,AAAAG,AAAMH;AAAN,AAAA,AAAAI,AAAA,AAAA7I,AAAA4I;AAAAA,AAAA,AAAA3I,AAAA2I;AAAA,AAAA,AAAAxI,AAAA;AAAA,AAAA,AAAAA,AAAAyI,AAAAD;;;AAAA,AA4BA;;;AAAA,AAAME;AAAN,AAGE,AAACC,AAAuB,AAACC;;AAE3B;;;AAAA,AAAAC,AAAMI,AAEHC;AAFH,AAAA,AAAAJ,AAAAD;AAAAE,AAAA,AAAApD,AAAAmD;AAAAE,AAAA,AAAApJ,AAAAmJ;AAAAA,AAAA,AAAAlJ,AAAAkJ;AAAAC,AAEMG;AAFNJ,AAEUK;AAFV,AAGE,AAAA,AAAAC,AAAQD;AACN,AAACE,AAAOJ,AAAEC;;AACV,AAACpE,AAAMmE,AAAEC,AAAE,AAAAI,AAAW,AAACL,AAAAA,AAAAA,AAAEC,AAAAA;AAAdK,AAAiBJ;AAAjB,AAAA,AAAAG,AAAAC,AAAAD,AAAAC,AAACP,AAAAA,AAAAA;;;;AAEhB;;;;;;;AAAA,AAAMQ,AAMFC,AAAEC;AANN,AAOG,AAAMC,AAAK,AAAUC,AAAGC;AAAb,AACE,AAAAC,AAAA,AAAA;AAAA,AACC,AAAC,AAAAC,AAAgBF;;AAAhB,AAAA,AAAAG,AAAAD;AAAA,AAAAhI,AAAAiI,AAAA,AAAA,AAAMC;AAAND,AAAYJ;AAAZ,AACE,AAAAM,AAAa,AAACxE,AAAIkE;AAAlB,AAAA,AAAAM;AAAA,AAAA,AAAAA,AAAWC;AAAX,AACE,AAAMC,AAAG,AAACX,AAAAA,AAAAA,AAAEQ,AAAAA;AAAZ,AACE,AAAI,AAAC5L,AAAUwL,AAAKO;AAClB,AAAO,AAAC9F,AAAK6F;AAAGN;;;;;AAChB,AAACQ,AAAKJ,AAAE,AAACN,AAAK,AAACrF,AAAK6F,AAAG,AAAC5J,AAAKsJ,AAAKO;;;AAJxC;;;;AAKFR,AAAGC;AAPL,AAAA;;AADb,AASE,AAAA,AAACF,AAAKD;;AAGX,AAAM,AAAcvL,AACd,AAAKmM;AAAL,AACE,AAAMC,AAAM,AAACpE;AACPlB,AAAM,AAAOjB,AAAM,AAACC,AAAQ,AAAA,AAAA7F,AAACoM,AAASD;AAAhC,AACOrG;AADP,AAEOuG;;AAFP,AAGE,AAAI,AAAIA,AAAM,AAACrG,AAAOJ;AACpBE;;AACA,AAAMG,AAAK,AAAC1E,AAAMqE;AAAlB,AACE,AAAO,AAACM,AAAKN;AACN,AAAA,AAAKE;AACL,AAAK,AAACK,AAAE,AAAA,AAAMF,AAAM,AACC,AAAYqG,AAC5B,AAACnG,AAAE,AAACoG,AAAQ,AAASL,AAClB,AAACK,AACA,AAAChG,AAAQ,AAAA,AAASN;;;;;;;;;AAbpD,AAcE,AAAiBiG;;AACjB,AAACM,AAAQ3F","names":["page-render-data","cljs.core.atom","rams-ui.util/check-if-id-rendered","id","js/window","cljs.core/deref","cljs.core/contains?","re-frame.core/dispatch","rams-ui.util/rendering-id","cljs.core.swap_BANG_","cljs.core/assoc","rams-ui.util/reset-page-render","cljs.core/reset!","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","rams-ui.util/set-db-value","p__79658","map__79659","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","seq79654","G__79655","cljs.core/first","cljs.core/next","G__79656","G__79657","self__4723__auto__","db","value","persistent?","found-in","cljs.core/assoc-in","cljs.core/vector?","cljs.core.concat","cljs.core.conj","rams-ui.util/get-db-value","p__79674","map__79675","seq79663","G__79664","G__79665","cljs.core.get_in","rams-ui.util/set-db-error","p__79709","map__79710","seq79697","G__79698","G__79699","G__79700","rams-ui.util/get-db-error","p__79728","map__79729","seq79713","G__79714","G__79715","re_frame.core.reg_event_db","p__79731","vec__79732","cljs.core.nth","event","action","params","cljs.core.print","p__79735","vec__79736","item-id","p__79740","vec__79741","p__79744","vec__79745","re_frame.core.reg_sub","p__79748","vec__79749","p__79752","vec__79753","p__79761","vec__79762","p__79771","vec__79772","_","p__79775","vec__79781","p__79785","vec__79786","p__79792","vec__79793","clear-history?","old-states","old-states-len","cljs.core/count","take-counter","items","cljs.core/reverse","counter","done","cljs.core/empty?","item","cljs.core/rest","cljs.core._EQ_","went-back?","last-state","js/history","cljs.core/clj->js","cljs.core.take","and__4115__auto__","cljs.core.assoc","p__79806","vec__79807","steps","keep-states","cljs.core/last","or__4126__auto__","rams-ui.util/go-back","p__79845","vec__79846","seq79825","self__4724__auto__","cljs.core/seq","rams-ui.util/open-url","p__79863","map__79864","seq79852","G__79854","url","label","state","rams-ui.util/get-history","re_frame.core.subscribe","rams-ui.util/get-url","rams-ui.util/get-params","rams-ui.util/set-value","p__79885","map__79886","seq79882","G__79883","G__79884","model","rams-ui.util/get-value","p__79893","map__79895","seq79888","G__79889","rams-ui.util/set-error","p__79917","map__79918","seq79908","G__79909","G__79910","rams-ui.util/get-error","p__79931","map__79932","seq79929","G__79930","rams-ui.util/set-loading","p__79941","map__79942","seq79938","G__79939","G__79940","rams-ui.util/get-loading","p__79954","map__79955","seq79952","G__79953","rams-ui.util/gen-uuid","cljs-uuid-utils.core/uuid-string","cljs-uuid-utils.core/make-random-uuid","p__79957","vec__79958","seq__79959","first__79960","rams-ui.util/dissoc-in","m","k","ks","cljs.core/not","cljs.core.dissoc","G__79961","G__79962","rams-ui.util/distinct-by","f","coll","step","xs","seen","cljs.core/LazySeq","p__79963","vec__79964","x","temp__5735__auto__","s","fx","cljs.core/cons","evt","pages","cljs.core/butlast","done?","js/document","cljs.core.js__GT_clj","rams_ui.util.go_back"],"sourcesContent":["(ns rams-ui.util\n  (:require [cljs-uuid-utils.core :as uuid-utils]\n            [re-frame.core :refer [dispatch subscribe reg-event-db\n                                   reg-sub]]))\n\n\n(let [page-render-data (atom {})]\n\n  (defn ^:no-doc check-if-id-rendered [id]\n    (when (.-isDev js/window)\n      (when (contains? @page-render-data id)\n        (dispatch [:set-debug \"pre-rendered\" {:id id}]))))\n\n  (defn rendering-id\n    \"Helper function that is called in any component that you wish to have its state saved into the current page data structure. It will raise an alarm when in development mode that the same id has been used\"\n    [id]\n    (check-if-id-rendered id)\n    (swap! page-render-data assoc id true))\n\n\n  (defn ^:no-doc reset-page-render []\n    (reset! page-render-data {})))\n\n\n(defn set-db-value\n  \"Helper function that should only be used inside reg-event-db/reg-event-fx to set the value of component defined by an id. It returns the modified db and should be the output of the reg-event-db or the :db value of the reg-event-fx.\n\n  - **db**: the db is what is given to the reg-event-db as the app-db state\n  - **id**: is the id of the value we wish to change. It is critical here to only change values of ids you know as some elements require a particular hash map to work\n  - **value**: is the value that we wish the id to have from now on\n  - **persistent?**: is an optional boolean that indicates whether the id is supposed to be persistent or not. This is only valuable if the id belongs to a component that supports \"\n  [db id value & {:keys [persistent?]}]\n  (let [found-in (if persistent?\n                    [:rams4ui :persistent-state]\n                    [:rams4ui :current-state])]\n    (assoc-in db (if (vector? id)\n                   (concat found-in id)\n                   (conj found-in id))\n              value)))\n\n\n(defn get-db-value\n  \"Helper function that should only be used inside reg-event-db/reg-event-fx to retrive the value of component defined by an id. It is most helpful as it does not require us to know the exact keys that are needed in the app-db of hashmap\n\n  - **db**: the db is what is given to the reg-event-db as the app-db state\n  - **id**: is the id of the value we wish to change. It is critical here to only change values of ids you know as some elements require a particular hash map to work\n  - **persistent?**: is an optional boolean that indicates whether the id is supposed to be persistent or not. This is only valuable if the id belongs to a component that supports persistent?\"\n  [db id  & {:keys [persistent?]}]\n  (let [found-in (if persistent?\n                    [:rams4ui :persistent-state]\n                    [:rams4ui :current-state])]\n    (get-in db (if (vector? id)\n                 (concat found-in id)\n                 (conj found-in id)))))\n\n\n(defn set-db-error\n  \"Helper function that should only be used inside reg-event-db/reg-event-fx to set the error of component defined by an id. It returns the modified db and should be the output of the reg-event-db or the :db value of the reg-event-fx.\n\n  - **db**: the db is what is given to the reg-event-db as the app-db state\n  - **id**: is the id of the value we wish to change. It is critical here to only change values of ids you know as some elements require a particular hash map to work\n  - **value**: is the value that we wish the id to have from now on\n  - **persistent?**: is an optional boolean that indicates whether the id is supposed to be persistent or not. This is only valuable if the id belongs to a component that supports \"\n  [db id value & {:keys [persistent?]}]\n  (let [found-in (if persistent?\n                    [:rams4ui :persistent-errors]\n                    [:rams4ui :current-errors])]\n    (assoc-in db (if (vector? id)\n                   (concat found-in id)\n                   (conj found-in id))\n              value)))\n\n\n(defn get-db-error\n  \"Helper function that should only be used inside reg-event-db/reg-event-fx to retrive the error of component defined by an id. It is most helpful as it does not require us to know the exact keys that are needed in the app-db of hashmap\n\n  - **db**: the db is what is given to the reg-event-db as the app-db state\n  - **id**: is the id of the value we wish to change. It is critical here to only change values of ids you know as some elements require a particular hash map to work\n  - **persistent?**: is an optional boolean that indicates whether the id is supposed to be persistent or not. This is only valuable if the id belongs to a component that supports persistent?\"\n  [db id  & {:keys [persistent?]}]\n  (let [found-in (if persistent?\n                    [:rams4ui :persistent-errors]\n                    [:rams4ui :current-errors])]\n    (get-in db (if (vector? id)\n                 (concat found-in id)\n                 (conj found-in id)))))\n\n\n(reg-event-db\n :set-debug\n (fn [db [event action params]]\n   (print \"[WARNING] Action: \" action \" |  | Params: \" params)\n   db))\n\n(reg-event-db\n :rams4ui|set-value\n (fn [db [event item-id value persistent?]]\n   (let [found-in (if persistent?\n                    [:rams4ui :persistent-state]\n                    [:rams4ui :current-state])]\n     (assoc-in db (if (vector? item-id)\n                    (concat found-in item-id)\n                    (conj found-in item-id))\n               value))))\n\n(reg-event-db\n :rams4ui|set-error\n (fn [db [event item-id value persistent?]]\n   (let [found-in (if persistent?\n                    [:rams4ui :persistent-errors]\n                    [:rams4ui :current-errors])]\n     (assoc-in db (if (vector? item-id)\n                    (concat found-in item-id)\n                    (conj found-in item-id))\n               value))))\n\n(reg-event-db\n :rams4ui|set-loading\n (fn [db [event item-id value persistent?]]\n   (let [found-in (if persistent?\n                    [:rams4ui :persistent-loading]\n                    [:rams4ui :current-loading])]\n     (assoc-in db (if (vector? item-id)\n                    (concat found-in item-id)\n                    (conj found-in item-id))\n               value))))\n\n\n(reg-sub\n :rams4ui|get-value\n (fn [db [event item-id persistent?]]\n   (let [found-in (if persistent?\n                    [:rams4ui :persistent-state]\n                    [:rams4ui :current-state])]\n     (get-in db (if (vector? item-id)\n                  (concat found-in item-id)\n                  (conj found-in item-id))))))\n\n(reg-sub\n :rams4ui|get-error\n (fn [db [event item-id persistent?]]\n   (let [found-in (if persistent?\n                    [:rams4ui :persistent-errors]\n                    [:rams4ui :current-errors])]\n     (get-in db (if (vector? item-id)\n                  (concat found-in item-id)\n                  (conj found-in item-id))))))\n\n(reg-sub\n :rams4ui|get-loading\n (fn [db [event item-id persistent?]]\n   (let [found-in (if persistent?\n                    [:rams4ui :persistent-loading]\n                    [:rams4ui :current-loading])]\n     (get-in db (if (vector? item-id)\n                  (concat found-in item-id)\n                  (conj found-in item-id))))))\n\n(reg-sub\n :rams4ui|get-current-url\n (fn [db [_]]\n   (get-in db [:rams4ui :current-url])))\n\n(reg-sub\n :rams4ui|get-current-params\n (fn [db [_]]\n   (get-in db [:rams4ui :current-params])))\n\n(reg-sub\n :rams4ui|get-historical-pages\n (fn [db [_]]\n   (get-in db [:rams4ui :history-pages])))\n\n\n(reg-event-db\n :rams4ui|set-new-url\n (fn [db [_ params clear-history?]]\n   (let [old-states (get-in db [:rams4ui :history-pages])\n         old-states-len (count old-states)\n         take-counter (if clear-history?\n                        0\n                        (loop [items (reverse old-states)\n                               counter old-states-len\n                               done false]\n                          (if (or done (empty? items))\n                            (if (empty? items)\n                              (count old-states)\n                              counter)\n                            (let [item (first items)]\n                              (recur (rest items)\n                                     (dec counter)\n                                     (and (= (:url params) (:url item))\n                                          (= (:params params) (:params item))))))))\n         went-back? (and (> take-counter 0)\n                         (< take-counter old-states-len))\n         last-state (when (> take-counter 0)\n                      (nth old-states (dec take-counter)))]\n     (.pushState js/history (clj->js (:params params))\n                 (:label params) (:url params))\n     (-> db\n         (assoc-in [:rams4ui :current-errors] (if went-back?\n                                               (:erros last-state)\n                                               (:errors params)))\n         (assoc-in [:rams4ui :current-state] (if went-back?\n                                               (:state last-state)\n                                               (:state params)))\n         (assoc-in [:rams4ui :current-params] (:params params))\n         (assoc-in [:rams4ui :current-url] (:url params))\n         (assoc-in [:rams4ui :history-pages]\n                   (concat (when last-state\n                             (take (dec take-counter) old-states))\n                           (when (and last-state\n                                      (= old-states-len take-counter))\n                             [(assoc last-state\n                                     :errors (get-in db [:rams4ui :current-errors])\n                                     :state (get-in db [:rams4ui :current-state]))])\n                           [(assoc params :label (if (:label params)\n                                                   (:label params)\n                                                   (:label last-state))\n                                   :errors (if went-back?\n                                             (:errors last-state)\n                                             (:errors params))\n                                   :state (if went-back?\n                                            (:state last-state)\n                                            (:state params)))]))))))\n\n(reg-event-db\n :rams4ui|go-back\n (fn [db [_ steps]]\n   (let [keep-states (take (- (count (get-in db [:rams4ui :history-pages]))\n                              steps)\n                           (get-in db [:rams4ui :history-pages]))\n         last-state (last keep-states)]\n     (if (or (empty? keep-states)\n             (get-in db [:rams4ui :used-back?]))\n       (assoc-in db [:rams4ui :used-back?] false)\n       (do\n         (.go js/history (* -1 steps))\n         (-> db\n             (assoc-in [:rams4ui :used-back?] true)\n             (assoc-in [:rams4ui :current-errors] (:errors last-state))\n             (assoc-in [:rams4ui :current-state] (:state last-state))\n             (assoc-in [:rams4ui :current-params] (:params last-state))\n             (assoc-in [:rams4ui :current-url] (:url last-state))\n             (assoc-in [:rams4ui :history-pages] keep-states)))))))\n\n\n(defn go-back\n  \"Helper function to go back to previous page. If given no arguments it will go back to the previous page otherwise if given a number it will go back those number of steps.\"\n  [& [steps _]]\n  (dispatch [:rams4ui|go-back (if steps steps 1)]))\n\n\n\n(defn open-url\n  \"Helper function to open a url. This adds the new url to the history state of the browser. It takes the following arguments:\n\n  - **url**: the relative url needed to open the page in question\n  - **label**: a required label that will appear in the breadcrumb. Note that if the breadcrumb is not part of the system then this is optional\n  - **params**: an optional hashmap of any parameters to be passed\n  - **state**: an optional hashmap indicating the state of the page to be loaded\n  - **clear-history?**: an optional parameter to indicate whether we should clear the breadcrumb or not\"\n  [url & {:keys [label params state clear-history?]}]\n  (dispatch [:rams4ui|set-new-url {:url url\n                                   :params params\n                                   :label label\n                                   :state state}\n             clear-history?]))\n\n\n\n(defn get-history []\n  \"Helper function that get a subscription to the array of historical pages that have been loaded. It should be noted that this list will include as the last entry the current page if opened through an open-url.\n\nBecause of the above it is recommended that in case the login page requires that a new template be loaded that the first page always be a loader page that then calls **open-url** this way the first page will also be part of the history\"\n  (subscribe [:rams4ui|get-historical-pages]))\n\n(defn get-url []\n  \"Helper function that get a subscription to the current url that is loaded. \"\n  (subscribe [:rams4ui|get-current-url]))\n\n(defn get-params []\n  \"Helper function that get a subscription to the hashmap of current page params\"\n  (subscribe [:rams4ui|get-current-params]))\n\n(defn set-value\n  \"Helper function that sets the value of an id in the current state. id can be either keyword/string/number/array. Note that if id is for example an array [:form :input] then\n  ```clojure\n  (get-value [:form :input]) ;; will get the value of this one form\n  (get-value :form) ;; will get a hashmap that will at least be {:input \\\"test\\\"} for example\n  ```\n  Note that this function takes two optional parameters that behave as follows:\n\n  - **persistent?**: identifies that the value will carry over from one page to the next\n  - **model**: is an optional atom or reagent atom that is a hash map where the id is saved. Note that if this is used the id will not be saved in the global db and will neither be persistent nor will it be saved from one page to the next. Also note that this model should have been passed to set-value\"\n  [id value & {:keys [persistent? model]}]\n  (if model\n    (swap! model assoc-in\n           (if (vector? id)\n             id\n             [id])\n           value)\n    (dispatch [:rams4ui|set-value id value persistent?])))\n\n\n(defn get-value\n  \"Helper function that get a subscription the value of an id in the page state. id can be either keyword/string/number/array. Note that if id is for example an array [:form :input] then\n  ```clojure\n  (get-value [:form :input]) ;; will get the value of this one form\n  (get-value :form) ;; will get a hashmap that will at least be {:input \\\"test\\\"} for example\n  ```\n\n  As a reminder since the return is a subscription it is critical to dreference it when using it. Also note that this will cause a reneder if the value of the id changes\n  ```clojure\n  (let [var (get-value [:form :input])]\n    (print @var) ;; will return the actual value\n    (print var) ;; will return a reference atom that can not be used directly\n  )\n\n  Note that this function takes two optional parameters that behave as follows:\n\n  - **persistent?**: identifies that the value will carry over from one page to the next\n  - **model**: is an optional atom or reagent atom that is a hash map where the id is saved. Note that if this is used the id will not be saved in the global db and will neither be persistent nor will it be saved from one page to the next. Also note that this model should have been passed to set-value\n  ```\"\n  [id & {:keys [persistent? model]}]\n  (if model\n    (atom (get-in @model (if (vector? id)\n                           id\n                           [id])))\n    (subscribe [:rams4ui|get-value id persistent?])))\n\n(defn set-error\n  \"Helper function that sets the error of an id in the current state. id can be either keyword/string/number/array. Note that if id is for example an array [:form :input] then\n  ```clojure\n  (set-error [:form :input] \\\"an error\\\") ;; will set the error message\n  (set-error [:form :input] true) ;; will set the error note\n  ```\n  Note that this function takes two optional parameters that behave as follows:\n\n  - **persistent?**: identifies that the value will carry over from one page to the next\n  - **model**: is an optional atom or reagent atom that is a hash map. The id is saved in this hashmap under the key :errors. Note that if this is used the id will not be saved in the global db and will neither be persistent nor will it be saved from one page to the next. Also note that this model should have been passed to set-value\"\n  [id value & {:keys [persistent? model]}]\n  (if model\n    (swap! model assoc-in\n           (if (vector? id)\n             (concat [:errors] id)\n             [:errors id])\n           value)\n    (dispatch [:rams4ui|set-error id value persistent?])))\n\n\n(defn get-error\n  \"Helper function that get a subscription the error of an id in the page state. id can be either keyword/string/number/array. Note that if id is for example an array [:form :input] then\n  ```clojure\n  (get-error [:form :input]) ;; will get the error of this one form item\n  (get-error :form) ;; will get a hashmap that will at least be {:input \\\"test\\\"} for example\n  ```\n\n  As a reminder since the return is a subscription it is critical to dreference it when using it. Also note that this will cause a reneder if the value of the id changes\n  ```clojure\n  (let [var (get-error [:form :input])]\n    (print @var) ;; will return the error\n    (print var) ;; will return a reference atom that can not be used directly\n  )\n\n  Note that this function takes two optional parameters that behave as follows:\n\n  - **persistent?**: identifies that the value will carry over from one page to the next\n  - **model**: is an optional atom or reagent atom that is a hash map. The id will should be in this hashmap under the key :errors. Note that if this is used the id will not be saved in the global db and will neither be persistent nor will it be saved from one page to the next. Also note that this model should have been passed to set-error\n  ```\"\n  [id & {:keys [persistent? model]}]\n  (if model\n    (get-in @model (if (vector? id)\n                     (concat [:errors] id)\n                     [:erros id]))\n    (subscribe [:rams4ui|get-error id persistent?])))\n\n(defn set-loading\n  \"Helper function that sets the loading of an id in the current state. id can be either keyword/string/number/array. Note that if id is for example an array [:form :input] then\n  ```clojure\n  (set-error [:form :input] false) ;; will set the loading on\n  (set-error [:form :input] true) ;; will hide the loading\n  ```\n  Note that this function takes two optional parameters that behave as follows:\n\n  - **persistent?**: identifies that the value will carry over from one page to the next\n  - **model**: is an optional atom or reagent atom that is a hash map. The id is saved in this hashmap under the key :errors. Note that if this is used the id will not be saved in the global db and will neither be persistent nor will it be saved from one page to the next. Also note that this model should have been passed to set-value\"\n  [id value & {:keys [persistent? model]}]\n  (if model\n    (swap! model assoc-in\n           (if (vector? id)\n             (concat [:loading] id)\n             [:loading id])\n           value)\n    (dispatch [:rams4ui|set-loading id value persistent?])))\n\n\n(defn get-loading\n  \"Helper function that get a subscription the loading of an id in the page state. id can be either keyword/string/number/array. Note that if id is for example an array [:form :input] then\n  ```clojure\n  (get-error [:form :input]) ;; will get the error of this one form item\n  (get-error :form) ;; will get a hashmap that will at least be {:input \\\"test\\\"} for example\n  ```\n\n  As a reminder since the return is a subscription it is critical to dreference it when using it. Also note that this will cause a reneder if the value of the id changes\n  ```clojure\n  (let [var (get-error [:form :input])]\n    (print @var) ;; will return the error\n    (print var) ;; will return a reference atom that can not be used directly\n  )\n\n  Note that this function takes two optional parameters that behave as follows:\n\n  - **persistent?**: identifies that the value will carry over from one page to the next\n  - **model**: is an optional atom or reagent atom that is a hash map. The id will should be in this hashmap under the key :errors. Note that if this is used the id will not be saved in the global db and will neither be persistent nor will it be saved from one page to the next. Also note that this model should have been passed to set-error\n  ```\"\n  [id & {:keys [persistent? model]}]\n  (if model\n    (get-in @model (if (vector? id)\n                     (concat [:loading] id)\n                     [:loading id]))\n    (subscribe [:rams4ui|get-loading id persistent?])))\n\n\n\n(defn gen-uuid\n  \"Helper function that gets a uuid string\"\n  []\n  (uuid-utils/uuid-string (uuid-utils/make-random-uuid)))\n\n(defn dissoc-in\n  \"allows to dissociate a nested key from a given hash map\"\n  [m [k & ks]]\n  (if-not ks\n    (dissoc m k)\n    (assoc m k (dissoc-in (m k) ks))))\n\n(defn distinct-by\n  \"Returns a lazy sequence of the elements of coll, removing any elements that\n  return duplicate values when passed to a function f.\n\n  - **f**: identifies the function that will be used for distinct. Remember that this can be even keyword since that is considered a function\n  - **coll**: the list of elements that will be considered for checking distinct\"\n  ([f coll]\n   (let [step (fn step [xs seen]\n                (lazy-seq\n                 ((fn [[x :as xs] seen]\n                    (when-let [s (seq xs)]\n                      (let [fx (f x)]\n                        (if (contains? seen fx)\n                          (recur (rest s) seen)\n                          (cons x (step (rest s) (conj seen fx)))))))\n                  xs seen)))]\n     (step coll #{}))))\n\n\n(set! (.-onpopstate js/window)\n      (fn [evt]\n        (let [pages (get-history)\n              steps (loop [items (reverse (butlast @pages))\n                           counter 0\n                           done? false]\n                      (if (or done? (empty? items))\n                        counter\n                        (let [item (first items)]\n                          (recur (rest items)\n                                 (inc counter)\n                                 (and (= (:url item) (.-pathname\n                                                      (.-location js/document)))\n                                      (= (js->clj (.-state evt))\n                                         (js->clj\n                                          (clj->js (:params item)))))))))]\n          (.preventDefault evt)\n          (go-back steps))))\n"]}