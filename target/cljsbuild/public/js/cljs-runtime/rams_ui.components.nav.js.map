{"version":3,"sources":["rams_ui/components/nav.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db","p__80842","vec__80843","cljs.core.nth","db","event","id","state","rams_ui.util.get_db_value","rams_ui.util.set_db_value","cljs.core.assoc","cljs.core/not","rams-ui.components.nav/use-styles","reagent_material_ui.styles.make_styles","theme","cljs.core.get_in","props","G__80858","G__80859","fexpr__80857","G__80854","G__80855","fexpr__80853","G__80861","G__80862","fexpr__80860","fexpr__80848","fexpr__80847","fexpr__80849","G__80851","G__80852","fexpr__80850","fexpr__80846","rams-ui.components.nav/breadcrumb","config","pages","rams-ui.util/get-history","history-len","cljs.core/count","cljs.core/deref","cljs.core/butlast","reagent-material-ui.core.box/box","reagent-material-ui.core.breadcrumbs/breadcrumbs","cljs.core.doall","iter__4529__auto__","s__80865","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__80867","cljs.core/chunk-buffer","i__80866","cljs.core/-nth","cljs.core/chunk-append","p1__80863#","cljs.core/chunk-cons","cljs.core/chunk","iter__80864","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","idx","cljs.core.range","page","reagent-material-ui.core.link/link","rams-ui.util/gen-uuid","rams_ui.util.go_back","reagent-material-ui.core.typography/typography","cljs.core/last","p__80868","map__80869","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","rams-ui.components.nav/top-bar","elevation","adjust-elevation-on-scroll?","menu","parent-id","logo","drawer-width","left-action","right-action","trigger","reagent-material-ui.core.use-scroll-trigger/use-scroll-trigger","top-state","rams-ui.util/get-value","drawer-state","rams_ui.util.get_value","bar-styles","G__80871","reagent-material-ui.core.app-bar/app-bar","reagent-material-ui.core.toolbar/toolbar","and__4115__auto__","cljs.core/map?","fexpr__80872","_","reagent-material-ui.core.icon-button/icon-button","rams_ui.util.set_value","reagent-material-ui.icons.menu/menu","cljs.core/vector?","s__80874","b__80876","i__80875","iter__80873","action","s__80878","b__80880","i__80879","iter__80877","rams-ui.components.nav/clean-list-items-helper","items","cljs.core.map","item","cljs.core/fn?","fexpr__80881","rams_ui.util.open_url","G__80882","cljs.core.dissoc","p__80883","map__80884","rams-ui.components.nav/primary-drawer","show-hide-on-hover?","show-hide?","width","mobile?","nav-styles","G__80886","reagent-material-ui.core.drawer/drawer","cljs.core.merge","or__4126__auto__","reagent-material-ui.icons.close/close","rams-ui.components.list/items-list","reagent-material-ui.core.divider/divider","p__80887","map__80888","rams-ui.components.nav/secondary-drawer","overflow?","side-bar","G__80890","rams-ui.util/set-value","p__80891","map__80892","rams-ui.components.nav/nav-helper","breadcrumb-config","ref","content","cljs.core/boolean","rams-ui.ajax/ajax-loader","reagent-material-ui.core.hidden/hidden","reagent-material-ui.core.container/container","p__80894","map__80895","rams-ui.components.nav/navigation","uuid","js/window","rams-ui.util/rendering-id","p__80897","map__80898","rams-ui.components.nav/toggle-drawer","navigation-id","side","re-frame.core/dispatch","cljs.core/name","rams-ui.components.nav/set-url-selected","url","rams_ui.components.list.set_selected_item","cljs.core/chunk-first"],"sourcesContent":["(ns rams-ui.components.nav\n  (:require [reagent.core :as r]\n            [re-frame.core :refer [dispatch subscribe reg-event-db reg-sub]]\n            [clojure.string :as cstr]\n            [rams-ui.util :refer [gen-uuid rendering-id set-db-value\n                                  set-value get-value get-db-value\n                                  open-url go-back get-history]]\n            [rams-ui.components.list :refer [items-list set-selected-item]]\n            [rams-ui.ajax :refer [ajax-loader]]\n            [reagent-material-ui.core.box :refer [box]]\n            [reagent-material-ui.core.container :refer [container]]\n            [reagent-material-ui.core.divider :refer [divider]]\n            [reagent-material-ui.core.hidden :refer [hidden]]\n            [reagent-material-ui.core.css-baseline :refer [css-baseline]]\n            [reagent-material-ui.core.drawer :refer [drawer]]\n            [reagent-material-ui.core.icon-button :refer [icon-button]]\n            [reagent-material-ui.core.grid :refer [grid]]\n            [reagent-material-ui.core.paper :refer [paper]]\n            [reagent-material-ui.core.link :refer [link]]\n            [reagent-material-ui.core.breadcrumbs :as ibcrumb]\n            [reagent-material-ui.styles :as styles :refer [make-styles with-styles]]\n            [reagent-material-ui.core.use-scroll-trigger :refer [use-scroll-trigger]]\n            [reagent-material-ui.core.app-bar :refer [app-bar]]\n            [reagent-material-ui.core.toolbar :refer [toolbar]]\n            [reagent-material-ui.icons.menu :as imenu]\n            [reagent-material-ui.icons.close :as iclose]\n            [reagent-material-ui.core.typography :refer [typography]]))\n\n(reg-event-db\n :rams4ui|toggle-drawer-state\n (fn [db [event id]]\n   (let [state (get-db-value db id :persistent? true)]\n     (set-db-value db id\n                   (assoc state\n                          :open? (not (:open? state)))\n                   :persistent? true))))\n\n\n\n(def ^:no-doc use-styles\n  (make-styles (fn [theme]\n                 {:app-bar {:z-index  (inc (get-in theme [:z-index :drawer])) }\n                  :top-list {:flex 1}\n                  :top-bar {:padding-left \"4px\"\n                            :justify-content \"space-between\"}\n                  :drawer-toolbar {:justify-content (fn [props]\n                                                      (if (:secondary? props)\n                                                        \"flex-start\"\n                                                        \"flex-end\"))}\n                  :top-bar-left {:display \"flex\"\n                                 :flex 0}\n                  :logo-box-open {:width (fn [props] (:logo-width props)) :overflow-x \"hidden\"\n                                  :justify-content \"center\"\n                                  :align-items \"center\"\n                                  :display \"flex\"\n                                  :transition ((get-in theme [:transitions :create])\n                                               \"width\"\n                                               #js {:duration (get-in theme\n                                                                      [:transitions :duration\n                                                                       :leaving-screen])\n                                                    :easing (get-in theme [:transitions :easing\n                                                                           :sharp])})}\n                  :logo-box-close {:width 0 :overflow-x \"hidden\"\n                                  :transition ((get-in theme [:transitions :create])\n                                               \"width\"\n                                               #js {:duration (get-in theme\n                                                                      [:transitions :duration\n                                                                       :leaving-screen])\n                                                    :easing (get-in theme [:transitions :easing\n                                                                           :sharp])})}\n                  :drawer-open {:flex-shrink 0 :width (fn [props] (:open-width props)) :overflow-x \"hidden\"\n                                :transition ((get-in theme [:transitions :create])\n                                             \"width\"\n                                             #js {:duration (get-in theme\n                                                                    [:transitions :duration\n                                                                     :leaving-screen])\n                                                  :easing (get-in theme [:transitions :easing\n                                                                         :sharp])})}\n                  :drawer-close {:flex-shrink 0 :width (fn [props]\n                                                         (if (:close-width props)\n                                                           (:close-width props)\n                                                           (inc ((:spacing theme) 7))))\n                                 :overflow-x \"hidden\"\n                                 [((get-in theme [:breakpoints :up]) \"sm\")]\n                                 {:width (inc ((:spacing theme) 9))}\n                                 :transition ((get-in theme [:transitions :create])\n                                              \"width\"\n                                              #js {:duration (get-in theme\n                                                                     [:transitions :duration\n                                                                      :leaving-screen])\n                                                   :easing (get-in theme [:transitions :easing\n                                                                          :sharp])})}\n                  :root {:display \"flex\" :width \"100%\"}\n                  :content {:flex-grow 1\n                            :padding ((:spacing theme) 4)}})))\n\n(defn- breadcrumb\n  [config]\n  (let [pages (get-history)\n        history-len (count (butlast @pages))]\n    (when (> history-len 0)\n      [box {:mb 2}\n       [ibcrumb/breadcrumbs config\n        (doall\n         (for [idx (range 0 history-len)\n               :let [page (nth @pages idx)]]\n           [link {:key (gen-uuid)\n                  :href (:url page)\n                  :on-click #(do\n                               (.preventDefault %)\n                               (go-back (- history-len idx)))}\n            (:label page)]))\n        [typography {:color \"textPrimary\"} (:label (last @pages))]]])))\n\n(defn- top-bar [{:keys [id elevation adjust-elevation-on-scroll?\n                        menu parent-id logo drawer-width\n                        left-action right-action]\n                 :or {elevation 4} :as config}]\n  (let [trigger (if adjust-elevation-on-scroll?\n                  (use-scroll-trigger (fn [] {:threshold 0}))\n                  true)\n        top-state (get-value id)\n        drawer-state (get-value (str parent-id \"-primary-drawer\")\n                                :persistent? true)\n        bar-styles (use-styles {:logo-width drawer-width})]\n    [app-bar {:elevation (if  trigger elevation 0)\n              :class-name (:app-bar bar-styles)}\n     [toolbar {:class-name (:top-bar bar-styles)} \n      [box {:class-name (:top-bar-left bar-styles)}\n       (when menu \n         [box {:class-name [(if (and (:open? @drawer-state)\n                                     (not (:due-to-hover? @drawer-state)))\n                              (:logo-box-open bar-styles)\n                              (:logo-box-close bar-styles))\n                            (when (and (map? logo) (:style logo))\n                              (:logo-css ((make-styles\n                                           (fn [_]\n                                             {:logo-css (:style logo)})))))]}\n          (when logo\n            (if (map? logo)\n              (:content logo)\n              logo))])\n       (when menu\n         [icon-button {:on-click #(set-value (str parent-id \"-primary-drawer\")\n                                            {:open? (not (:open? @drawer-state))\n                                             :due-to-hover? false}\n                                            :persistent? true)}\n          [imenu/menu {:style {:color \"white\"}}]])]\n      (when left-action\n        [box {:class-name (:top-bar-left bar-styles)}\n         (if (vector? (first left-action))\n           (for [action left-action]\n             action)\n           left-action)])\n      (when right-action\n        [box {:class-name (:top-bar-left bar-styles)}\n         (if (vector? (first right-action))\n           (for [action right-action]\n             action)\n           right-action)])]]))\n\n(defn- clean-list-items-helper [items]\n  (map (fn [item]\n         (-> item\n             (assoc :id (if (:items item)\n                          (:label item)\n                          (:url item))\n                    :on-click (fn []\n                                (when (fn? (:on-click item))\n                                  ((:on-click item)))\n                                (when (not (:items item))\n                                  (open-url (:url item) :params (:params item)\n                                            :clear-history? true\n                                            :label (:label item))))\n                    :items (when (:items item)\n                             (clean-list-items-helper (:items item))))\n             (dissoc :url)))\n       items))\n\n(defn- primary-drawer [{:keys [id elevation show-hide-on-hover? show-hide? width mobile?]} items]\n  (let [nav-styles (use-styles {:open-width  (if mobile? \"90%\" width)})\n        drawer-state (get-value id :persistent? true)]\n    [drawer (merge {:variant (if mobile? \"temporary\" \"permanent\")\n                    :Paper-props {:elevation elevation}\n                    :class-name (if (or (not show-hide?) (:open? @drawer-state) mobile?)\n                                  (:drawer-open nav-styles)\n                                  (:drawer-close nav-styles))\n                    :classes {:paper (if (or (not show-hide?) (:open? @drawer-state) mobile?)\n                                       (:drawer-open nav-styles)\n                                       (:drawer-close nav-styles))}}\n                   (when mobile?\n                     {:open (:open? @drawer-state)\n                      :Modal-props {:keep-mounted true}})\n                   (when (and (not mobile?) show-hide-on-hover?)\n                     {:on-mouse-over (when (not (:open? @drawer-state))\n                                       #(set-value id {:open? true\n                                                       :due-to-hover? true}\n                                                   :persistent? true))\n                      :on-mouse-leave (when (:due-to-hover? @drawer-state)\n                                        #(set-value id {:open? false\n                                                        :due-to-hover? false}\n                                                    :persistent? true))}))\n     [toolbar {:class-name (:drawer-toolbar nav-styles)}\n      (when mobile?\n        [icon-button {:on-click #(set-value id {:open? false\n                                                :due-to-hover? false}\n                                            :persistent? true)}\n         [iclose/close]])]\n     [items-list {:id (str id \"-primary-top-list\") :mark-selected? true\n                  :elevation 0 :width width :persistent? true\n                  :class-name (:top-list nav-styles)}\n      (clean-list-items-helper (:top items))]\n     (when (:bottom items)\n       [divider])\n     (when (:bottom items)\n       [items-list {:id (str id \"-primary-bottom-list\") :mark-selected? true\n                    :elevation 0 :width width :persistent? true}\n        (clean-list-items-helper (:bottom items))])]))\n\n(defn- secondary-drawer\n  [{:keys [id elevation overflow? mobile?] :as config} side-bar]\n  (let [nav-styles (use-styles {:open-width \"40ch\" :close-width 0\n                                :secondary? true})\n        drawer-state (get-value id :persistent? true)]\n    [drawer\n     (merge {:Paper-props {:elevation elevation}\n             :variant (if (or overflow? mobile?)\n                        \"temporary\" \"permanent\") :anchor \"right\"}\n            (when mobile?\n              {:Modal-props {:keep-mounted true}})\n            (if (or mobile? overflow?)\n              {:open (:open? @drawer-state)}\n              {:class-name (if (:open? @drawer-state)\n                             (:drawer-open nav-styles)\n                             (:drawer-close nav-styles))\n               :classes {:paper (if (:open? @drawer-state)\n                             (:drawer-open nav-styles)\n                             (:drawer-close nav-styles))}}))\n     [toolbar {:class-name (:drawer-toolbar nav-styles)}\n      (when mobile?\n        [icon-button {:on-click #(set-value id {:open? false\n                                                :due-to-hover? false})}\n         [iclose/close]])]\n     side-bar]))\n\n(defn- nav-helper [{:keys [id menu side-bar breadcrumb-config ref\n                           adjust-elevation-on-scroll? elevation]\n                    :or {elevation 4} :as config} content]\n  (let [nav-styles (use-styles)]\n    [box {:class-name (:root nav-styles)}\n     [top-bar (assoc config :id (str id \"-top\")\n                     :drawer-width (if (and (map? menu) (:width menu))\n                                     (:width menu)\n                                     \"40ch\")\n                     :parent-id id\n                     :show-hide? (if (and menu (map? menu))\n                                   (if (nil? (:show-hide? menu))\n                                     true\n                                     (:show-hide? menu))\n                                   (boolean menu)))]\n     [ajax-loader {:persistent? true\n                   :type :bar}]\n     (when menu\n       [hidden {:sm-up true}\n        [primary-drawer\n         (merge {:id (str id \"-primary-drawer\")\n                 :elevation (if (and (map? menu) (:elevation menu))\n                              (:elevation menu)\n                              elevation)\n                 :width (if (and (map? menu) (:width menu))\n                          (:width menu)\n                          \"40ch\")\n                 :mobile? true}\n                (when (map? menu)\n                  {:show-hide-on-hover? (if (nil? (:show-hide-on-hover? menu))\n                                          false\n                                          (:show-hide-on-hover? menu))\n                   :show-hide? (if (nil? (:show-hide? menu))\n                                 true\n                                 (:show-hide? menu))}))\n         (if (map? menu)\n           menu\n           {:top menu})]])\n     \n     (when menu\n       [hidden {:xs-down true}\n        [primary-drawer\n         (merge {:id (str id \"-primary-drawer\")\n                 :elevation (if (and (map? menu) (:elevation menu))\n                              (:elevation menu)\n                              elevation)\n                 :width (if (and (map? menu) (:width menu))\n                          (:width menu)\n                          \"40ch\")\n                 :mobile? false}\n                (when (map? menu)\n                  {:show-hide-on-hover? (if (nil? (:show-hide-on-hover? menu))\n                                          false\n                                          (:show-hide-on-hover? menu))\n                   :show-hide? (if (nil? (:show-hide? menu))\n                                 true\n                                 (:show-hide? menu))}))\n         (if (map? menu)\n           menu\n           {:top menu})]])\n     [container {:class-name (:content nav-styles)\n                 :max-width false}\n      [toolbar]\n      (when breadcrumb-config\n        [breadcrumb breadcrumb-config])\n      content]\n     (when side-bar\n       [hidden {:sm-up true}\n        [secondary-drawer {:id (str id \"-secondary-drawer\")\n                           :elevation (if (and (map? side-bar) (:elevation side-bar))\n                                        (:elevation side-bar)\n                                        elevation)\n                           :overflow? (when (map? side-bar)\n                                        (:overflow? side-bar))\n                           :mobile? true}\n         (if (map? side-bar)\n           (:content side-bar)\n           side-bar)]])\n     (when side-bar\n       [hidden {:xs-down true}\n        [secondary-drawer {:id (str id \"-secondary-drawer\")\n                           :elevation (if (and (map? side-bar) (:elevation side-bar))\n                                        (:elevation side-bar)\n                                        elevation)\n                           :overflow? (when (map? side-bar)\n                                        (:overflow? side-bar))\n                           :mobile? false}\n         (if (map? side-bar)\n           (:content side-bar)\n           side-bar)]])]))\n\n\n(defn navigation\n  \"creates a material ui navigation which is made up of a top bar, side menu and potentially a side bar.\n\n  - **config**: is a hash map of the navigation component. The hashmap takes includes several keys \n      - **:id**: is an optional keyword/string/number that uniquely identifies the navigation.\n      - **:ref**: is an optional function that takes one argument which is the id of the element. This is useful in case you want to get the id of the item without having to provide one \n      - **:breadcrumb-config**: is an optional hashmap that configures the breadcrump. The configuration can be found in [doc](https://material-ui.com/api/breadcrumbs/). If not given or is nil then the breadcrumb will not be drawn\n      - **:adjust-elevation-on-scroll?**: is an optional boolean that identifies if the top bar should only elevate if we have scrolled down..\n      - **:elevation**: is an optional number between 0 and 24 identifying the elevation of the top bar and side bars. Default value is 4\n      - **:logo**: is an optional argument that can identify the logo which will appear on top of the main menu if open (and hidden otherwise). It can be either a react component or a hash map with the following keys:\n        - **:style**: Identifies the additional styles to the box containing the logo (which centers it)\n        - **:content**: Indentifies the react component to  be drawn\n      - **:left-action**: is an optional react element or an array of react elements that will be rendered just after the open menu section\n      - **:right-action**: is an optional react element or an array of react elements that will be rendered just at the end of the top bar\n      - **:menu**: is an optional argument that can be used to identify the main menu. It should be noted that this argument can be of two formats. Either it can be an array of hashmaps (idenfitied below) or it can be hashmap. If a hash map then the keys will be:\n        - **:top**: identifies the menus that will appear in the top of the sidebar. It is an array of hashmaps (identified below)\n        - **:bottom**: identifies the menus that will appear in the bottom of the sidebar. It is an array of hashmaps (identified below). It is however recommended to keep this list smaller.\n        - **:elevation**: If given then this will be the elevation of the side bar\n        - **:width**: If given will identify the width of the drawer. Default is 40ch\n        - **:show-hide?**: Identifies if the sidebar can be shown/hidden. Note that hidden in this case means that it is only partially appearing as this is the main menu bar. Default is that the drawer will always be shown\n        - **:show-hide-on-hover?**: If the menu can be hidden then this variable will allow to identify whether it can be shown on mouse hover.\n\n        It should be noted that the **:top**, **:bottom** or the **:menu** when given an array can have the following structure.\n  \n        - **:url**: a required string identifying the url that should be used for this page\n        - **:params**: an optional argument that can contain a hashmap to be passed to the url when clicked.\n        - **:on-click**: an optional function that is called when the list item is clicked\n        - **:disabled?**: an optional boolean indicating whether the item can be clicked or not\n        - **:icon**: an optional icon to appear in the item before the label\n        - **:label**: a required label that should be given as the text.\n        - **:message**: an optional string that will appear under the label\n        - **:avatar**: an optional avatar that will appar before the label if given\n        - **:action**: an optional react component that can be used to do an action on the item but note that if the item has sub-items then this will be ignored\n        - **:items**: an optional array of subitems that have the same structure but cant have sub items\n  \n      - **:side-bar**: is an optional argument that can be used to identify the secondary side bar (on right if ltr and left if rtl). It should be noted that this argument can be of two formats. Either it can be a react component that will be immediately drawn or it can be a hash map with the following keys\n        - **:overflow?**: is a boolean indicating whehter the sidebar should be on top of the content or if it should make the content width smaller. By default it is considered on top of\n        - **:elevation**: If given then this will be the elevation of the side bar       \n        - **:content**: is the react component to be drawn inside the side bar\n  - **content**: is the react component that will be drawn inside the main container\"\n\n  [{:keys [id menu side-bar breadcrumb-config ref\n           adjust-elevation-on-scroll? elevation\n           logo right-action left-action]\n    :or {elevation 4} :as config}\n   content]\n  (let [uuid (if id id (gen-uuid))]\n    (set-value (str uuid \"-primary-drawer\")\n              {:open? (> (.-innerWidth js/window) 760)\n               :due-to-hover? false}\n              :persistent? true)\n    (rendering-id uuid)\n    (fn [{:keys [id menu side-bar breadcrumb-config ref\n                 adjust-elevation-on-scroll? elevation]\n          :or {elevation 4} :as config}\n         content]\n      (when (fn? ref)\n        (ref uuid))\n      [nav-helper (assoc config :id uuid)\n       content])))\n\n\n(defn toggle-drawer\n  \"Helper function that will toggle the value of a drawer on and off. It takes the id of the navigation along side with either :primary (refers to menu) or :secondary(refer to sidebar) to identify which drawer to open\"\n  [navigation-id side]\n  (dispatch [:rams4ui|toggle-drawer-state (str navigation-id \"-\" (name side)\n                                               \"-drawer\")]))\n\n(defn set-url-selected\n    \"helper function to set the selected item in the menu. This will search in both the top and bottom menu if url exist it will mark it. Note that if the same url is shared it will be marked in both.\n\n  - **navigation-id**: Required argument which must be the id of the navigation created\n  - **url**: Required argument which must be the url of the item we want to mark as selected\"\n  [navigation-id url]\n  (set-selected-item (str navigation-id \"-primary-bottom-list\") url :persistent? true)\n  (set-selected-item (str navigation-id \"-primary-top-list\") url :persistent? true))\n\n\n"]}