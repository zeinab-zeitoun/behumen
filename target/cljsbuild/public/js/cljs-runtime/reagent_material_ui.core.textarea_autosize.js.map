{"version":3,"sources":["reagent_material_ui/core/textarea_autosize.cljs"],"mappings":"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","names":["reagent-material-ui.core.textarea-autosize/different?","a","b","js/Math","or__4126__auto__","reagent-material-ui.core.textarea-autosize/get-style-value","computed-style","property","js/parseInt","goog.object/get","reagent-material-ui.core.textarea-autosize/react-textarea-autosize","js/module$node_modules$react$index.forwardRef","props","ref","map__80750","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","vec__80751","cljs.core.nth","reagent_material_ui.util.js__GT_clj_SINGLEQUOTE_","on-change","placeholder","rows","rows-max","rows-min","style","value","other-props","cljs.core.dissoc","controlled?","input-ref","reagent-material-ui.util/use-ref","shadow-ref","renders","handle-ref","reagent_material_ui.util.use_fork_ref","state","set-state","reagent-material-ui.util/use-state","sync-height","reagent-material-ui.util/use-callback","input","shadow","js/window","_","cljs.core._EQ_","cljs.core/last","box-sizing","padding","border","inner-height","single-row-height","outer-height","G__80755","x__4214__auto__","y__4215__auto__","js/Number","x__4217__auto__","y__4218__auto__","overflow?","G__80756","prev-state","cljs.core.not_EQ_","js/process","js/console","handle-change","e","reagent-material-ui.util/use-effect","handle-resize","reagent-material-ui.util/debounce","reagent-material-ui.util/use-layout-effect","js/undefined","reagent.core.as_element","reagent-material-ui.util/remove-undefined-vals","cljs.core.merge","reagent-material-ui.core.textarea-autosize/textarea-autosize","reagent_material_ui.util.adapt_react_class"],"sourcesContent":["(ns reagent-material-ui.core.textarea-autosize\n  \"Imports @material-ui/core/TextareaAutosize as a Reagent component.\n   Original documentation is at https://material-ui.com/api/textarea-autosize/ .\"\n  (:require-macros [reagent-material-ui.macro :refer [forward-ref]])\n  (:require [\"react\" :as react]\n            [reagent.core :as r :refer [atom]]\n            [goog.object :as obj]\n            [reagent-material-ui.util :refer [adapt-react-class debounce js->clj' remove-undefined-vals use-fork-ref\n                                              use-callback use-effect use-layout-effect use-ref use-state]]))\n\n;; Converted from https://github.com/mui-org/material-ui/blob/v4.8.3/packages/material-ui/src/TextareaAutosize/TextareaAutosize.js\n;; Original code is copyright (c) Material UI contributors. Used under the terms of the MIT License.\n\n(defn ^:private different? [a b]\n  (< 1 (.abs js/Math (- (or a 0) (or b 0)))))\n\n(defn ^:private get-style-value [computed-style property]\n  (or (js/parseInt (obj/get computed-style property) 10) 0))\n\n(def react-textarea-autosize\n  (forward-ref textarea-autosize [props ref]\n    (let [props (js->clj' props)\n          {:keys [on-change placeholder rows rows-max rows-min style value]} props\n          other-props (dissoc props :input-ref :on-change :rows :rows-max :rows-min :style)\n          rows-min (or rows rows-min 1)\n          controlled? (some? value)\n          input-ref (use-ref nil)\n          shadow-ref (use-ref nil)\n          renders (use-ref 0)\n          handle-ref (use-fork-ref (:input-ref props) input-ref ref)\n          [state set-state] (use-state {})\n          sync-height (use-callback #(let [input (.-current input-ref)\n                                           shadow (.-current shadow-ref)\n                                           computed-style (.getComputedStyle js/window input)\n                                           _ (set! (.-width (.-style shadow)) (obj/get computed-style \"width\"))\n                                           _ (set! (.-value shadow) (or (.-value input) placeholder \"x\"))\n                                           _ (when (= (last (.-value shadow)) \\newline)\n                                               (set! (.-value shadow) (str (.-value shadow) \" \")))\n                                           box-sizing (obj/get computed-style \"box-sizing\")\n                                           padding (+ (get-style-value computed-style \"padding-bottom\")\n                                                      (get-style-value computed-style \"padding-top\"))\n                                           border (+ (get-style-value computed-style \"border-bottom-width\")\n                                                     (get-style-value computed-style \"border-top-width\"))\n                                           inner-height (- (.-scrollHeight shadow) padding)\n                                           _ (set! (.-value shadow) \"x\")\n                                           single-row-height (- (.-scrollHeight shadow) padding)\n                                           outer-height (cond-> inner-height\n                                                          rows-min (max (* (js/Number. rows-min) single-row-height))\n                                                          rows-max (min (* (js/Number. rows-max) single-row-height))\n                                                          true (max single-row-height))\n                                           outer-height (if (= \"border-box\" box-sizing)\n                                                          (+ outer-height padding border)\n                                                          outer-height)\n                                           overflow? (not (different? outer-height inner-height))]\n                                       (set-state (fn [prev-state]\n                                                    (if (and (< (.-current renders) 20)\n                                                             (or (and (pos? outer-height)\n                                                                      (different? (:height prev-state) outer-height))\n                                                                 (not= overflow? (:overflow? prev-state))))\n                                                      (do\n                                                        (set! (.-current renders) (inc (.-current renders)))\n                                                        {:overflow? overflow?\n                                                         :height    outer-height})\n                                                      (do\n                                                        (when (and (or (not (exists? js/process))\n                                                                       (not= \"production\" (.. js/process -env -NODE_ENV)))\n                                                                   (= (.-current renders) 20))\n                                                          (.error js/console \"Material-UI: too many re-renders. The layout is unstable.\\nTextareaAutosize limits the number of renders to prevent an infinite loop\"))\n                                                        prev-state)))))\n                                    #js [rows-max rows-min placeholder])\n          handle-change (fn [e]\n                          (set! (.-current renders) 0)\n                          (when-not controlled?\n                            (sync-height))\n                          (when on-change\n                            (on-change e)))]\n      (use-effect #(let [handle-resize (debounce (fn []\n                                                   (set! (.-current renders) 0)\n                                                   (sync-height))\n                                                 166)]\n                     (.addEventListener js/window \"resize\" handle-resize)\n                     (fn []\n                       (.clear handle-resize)\n                       (.removeEventListener js/window \"resize\" handle-resize)))\n                  #js [sync-height])\n      (use-layout-effect sync-height)\n      (use-effect (fn []\n                    (set! (.-current renders) 0)\n                    js/undefined)\n                  #js [value])\n      (r/as-element\n       [:<>\n        [:textarea (remove-undefined-vals\n                    (merge {:on-change handle-change\n                            :ref       handle-ref\n                            :rows      rows-min\n                            :style     (merge {:height   (:height state)\n                                               :overflow (when (:overflow? state) :hidden)}\n                                              style)}\n                           other-props))]\n        [:textarea {:aria-hidden true\n                    :class-name  (:class-name props)\n                    :read-only   true\n                    :ref         shadow-ref\n                    :tab-index   -1\n                    :style       (merge {:visibility :hidden\n                                         :position   :absolute\n                                         :overflow   :hidden\n                                         :height     0\n                                         :top        0\n                                         :left       0\n                                         :transform  \"translateZ(0)\"}\n                                        style)}]]))))\n\n(def textarea-autosize (adapt-react-class react-textarea-autosize))\n"]}