{"version":3,"sources":["rams_ui/components/list.cljs"],"mappings":"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","names":["rams-ui.components.list/change-selected-helper","orig-list","selected-key","vec__80660","cljs.core.nth","k","v","cljs.core/first","split-k","clojure.string.split","cljs.core.merge","cljs.core.assoc","cljs.core._EQ_","cljs.core/last","G__80663","G__80664","cljs.core/rest","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","rams-ui.components.list/set-selected-to-false-if-possible","p__80668","map__80669","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","seq80665","G__80666","cljs.core/next","G__80667","self__4723__auto__","states","items","parent-id","item","state","rams_ui.components.list.set_selected_to_false_if_possible","p__80671","map__80672","rams-ui.components.list/list-item-helper","list-id","list-state","mark-selected?","persistent?","id","click-fn","_","rams_ui.util.set_value","cljs.core/assoc-in","cljs.core/not","cljs.core.get_in","fexpr__80674","reagent-material-ui.core.list-item/list-item","rams-ui.util/gen-uuid","or__4126__auto__","and__4115__auto__","reagent-material-ui.core.list-item-avatar/list-item-avatar","reagent.core.as_element","reagent-material-ui.core.list-item-icon/list-item-icon","reagent-material-ui.core.list-item-text/list-item-text","reagent-material-ui.core.list-item-secondary-action/list-item-secondary-action","reagent-material-ui.core.icon-button/icon-button","reagent-material-ui.icons.expand-less/expand-less","reagent-material-ui.icons.expand-more/expand-more","p__80675","map__80676","rams-ui.components.list/items-list","subheader","width","ref","background-color","elevation","class-name","config","uuid","orig","cljs.core.atom","rams_ui.util.get_value","rams-ui.util/rendering-id","p__80678","map__80679","cljs.core/fn?","cljs.core/deref","cljs.core.not_EQ_","cljs.core/reset!","reagent-material-ui.core.paper/paper","reagent-material-ui.core.list/list","reagent-material-ui.core.list-subheader/list-subheader","cljs.core.doall","iter__4529__auto__","s__80682","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__80684","cljs.core/chunk-buffer","i__80683","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__80681","cljs.core/chunk-rest","cljs.core/cons","idx","cljs.core.range","item-id","reagent-material-ui.core.collapse/collapse","s__80686","b__80688","i__80687","iter__80685","s__80690","b__80692","i__80691","iter__80689","sub-idx","sub-item","sub-item-id","re_frame.core.reg_event_db","p__80693","vec__80694","db","event","rams_ui.util.get_db_value","to-select-item","rams_ui.util.set_db_value","rams-ui.components.list/set-selected-item","p__80700","map__80701","seq80697","G__80698","G__80699","re-frame.core/dispatch","cljs.core/chunk-first"],"sourcesContent":["(ns rams-ui.components.list\n  (:require [reagent.core :as r]\n            [re-frame.core :refer [dispatch subscribe reg-event-db]]\n            [clojure.string :as cstr]\n            [rams-ui.util :refer [gen-uuid rendering-id set-db-value get-db-value\n                                  set-value get-value]]\n            [reagent-material-ui.core.box :refer [box]]\n            [reagent-material-ui.core.grid :refer [grid]]\n            [reagent-material-ui.core.paper :refer [paper]]\n            [reagent-material-ui.styles :refer [make-styles with-styles]]\n            [reagent-material-ui.core.collapse :refer [collapse]]\n            [reagent-material-ui.core.divider :refer [divider]]\n            [reagent-material-ui.core.list :as clist]\n            [reagent-material-ui.core.list-item :refer [list-item]]\n            [reagent-material-ui.core.list-subheader :refer [list-subheader]]\n            [reagent-material-ui.core.list-item-text :refer [list-item-text]]\n            [reagent-material-ui.core.list-item-secondary-action :refer [list-item-secondary-action]]\n            [reagent-material-ui.core.list-item-avatar :refer [list-item-avatar]]\n            [reagent-material-ui.core.icon-button :refer [icon-button]]\n            [reagent-material-ui.core.list-item-icon :refer [list-item-icon]]\n            [reagent-material-ui.icons.expand-more :refer [expand-more]]\n            [reagent-material-ui.icons.expand-more-outlined :refer [expand-more-outlined]]\n            [reagent-material-ui.icons.expand-more-rounded :refer [expand-more-rounded]]\n            [reagent-material-ui.icons.expand-more-two-tone :refer [expand-more-two-tone]]\n            [reagent-material-ui.icons.expand-more-sharp :refer [expand-more-sharp]]\n            [reagent-material-ui.icons.expand-less :refer [expand-less]]\n            [reagent-material-ui.icons.expand-less-outlined :refer [expand-less-outlined]]\n            [reagent-material-ui.icons.expand-less-rounded :refer [expand-less-rounded]]\n            [reagent-material-ui.icons.expand-less-two-tone :refer [expand-less-two-tone]]\n            [reagent-material-ui.icons.expand-less-sharp :refer [expand-less-sharp]]\n            [reagent-material-ui.core.typography :refer [typography]]))\n\n\n(defn- change-selected-helper [orig-list selected-key]\n  (let [[k v] (first orig-list)\n        split-k (cstr/split selected-key #\"<|>\")]\n    (if (not (nil? k))\n      (merge {k (assoc v\n                       :selected? (or (= k selected-key)\n                                      (= k (last split-k))\n                                      (= k (first split-k))))}\n             (change-selected-helper (rest orig-list) selected-key))\n      nil)))\n\n(defn- set-selected-to-false-if-possible [states items & {:keys [parent-id]}]\n  (let [item (first items)\n        state (when (:id item)\n                (get states (:id item)))]\n    (if (not (nil? item))\n      (merge (when (:id item)\n               {(:id item)\n                (merge state\n                       {:selected? false\n                        :parent-id parent-id})})\n             (set-selected-to-false-if-possible states (rest items) :parent-id parent-id)\n             (when (:items item)\n               (set-selected-to-false-if-possible states (:items item) :parent-id (:id item))))\n      nil)))\n\n(defn- list-item-helper [{:keys [list-id list-state mark-selected? parent-id persistent?]} item id]\n  (let [click-fn (fn [_]\n                   (if (:items item)\n                     (set-value list-id\n                                (assoc-in list-state\n                                          [id :open?]\n                                          (not (get-in list-state [id :open?])))\n                                :persistent? persistent?)\n                     (when mark-selected?\n                       (set-value list-id (change-selected-helper list-state\n                                                                  (str (when parent-id\n                                                                         (str parent-id \"<|>\"))\n                                                                       id))\n                                  :persistent? persistent?)))\n                   (when (:on-click item)\n                     ((:on-click item))))]\n    [list-item (merge {:key (gen-uuid) :button true}\n                      (when (:align item)\n                        {:align-items (:align item)})\n                      (when (:href item)\n                        {:component \"a\"})\n                      (when (or (:items item) (:on-click item))\n                        {:on-click click-fn})\n                      (when (:disabled? item)\n                        {:disabled (:disabled? item)})\n                      (when (and (get-in list-state [id :selected?])\n                                 (or (not (:items item))\n                                     (not (get-in list-state [id :open?]))))\n                        {:selected true}))\n     (when (:avatar item)\n       [list-item-avatar (r/as-element (:avatar item))])\n     (when (:icon item)\n       [list-item-icon (r/as-element (:icon item))])\n     [list-item-text\n      (merge {:primary (:label item)}\n             (when (:message item)\n               {:secondary (:message item)}))]\n     (when (or (:items item) (:action item))\n       [list-item-secondary-action\n        (if (:items item)\n          [icon-button {:on-click click-fn}\n           (if (get-in list-state [id :open?])\n             [expand-less]\n             [expand-more])]\n          (:action item))])]))\n\n(defn items-list\n    \"creates a material ui list of items. The list can include a sublist of one level only. This is used heavily in drawers for example.\n\n  - **config**: is a hash map of the list component. The hashmap takes includes several keys \n      - **:id**: is an optional keyword/string/number that uniquely identifies the list. Once given it would allow for maintaining whether sublists are open and if any are selected.\n      - **:ref**: is an optional function that takes one argument which is the id of the element. This is useful in case you want to get the id of the item without having to provide one\n      - **:mark-selected?**: is an optional boolean that identifies whether a clicked on list item will be selected or not. It should be noted that if the selected list item is a sub item then if the parent is collapsed then the parent will also be selected. If this is set to boolean then the **:id** is required\n      - **:background-color**: is an optional background color that is by default \\\"white\\\"\n      - **:elevation**: is an optional argument identifying the elvation of the item. Default is 3\n      - **:subheader**: is an optional string that will appear at the top of the list\n      - **:class-name**: is an optional class given to the paper component surronding the list\n      - **:width**: is an optional value of the width of the menu. Can be any of the number defined in material-ui such as 20ch (for 20 characters) | 20px (for 20 pixels) | 20% (for 20% of the width of the parent)\n      - **persistent?**: identifies that the state of the list will carry over from one page to the next\n  - **items**: Array of hashmaps identifying each of the list items that are available such that each item has the following keys:\n     - **:id**: an optional keyword/string/number that identifies this list item inside this list. It is useful to mark the item as selected using the helper function **set-selected-item**\n     - **:on-click**: an optional function that is called when the list item is clicked\n     - **:href**: an optional url that will be used to change the url of the page when clicked.  \n     - **:disabled?**: an optional boolean indicating whether the item can be clicked or not\n     - **:icon**: an optional icon to appear in the item before the label\n     - **:label**: a required label that should be given as the text.\n     - **:message**: an optional string that will appear under the label\n     - **:avatar**: an optional avatar that will appar before the label if given\n     - **:action**: an optional react component that can be used to do an action on the item but note that if the item has sub-items then this will be ignored\n     - **:items**: an optional array of subitems that have the same structure but cant have sub items\"\n\n  [{:keys [id subheader mark-selected? width ref\n           background-color elevation class-name\n           persistent?] :as config} items]\n  (let [uuid (if id id (gen-uuid)) orig (atom nil)\n        list-state (get-value uuid :persistent? persistent?)]\n    (rendering-id uuid)\n    (fn [{:keys [id subheader mark-selected? width ref\n                 background-color elevation class-name] :as config} items]\n      (when (fn? ref)\n        (ref uuid))\n      (when (and mark-selected? (not= @orig items))\n        (reset! orig items)\n        (set-value uuid (merge\n                         @list-state\n                         (set-selected-to-false-if-possible @list-state items))\n                   :persistent? persistent?))\n      [paper (merge (when elevation\n                      {:elevation elevation})\n                    (when class-name\n                      {:class-name class-name})\n                    (when width\n                      {:style (merge {:width width}\n                                     (when background-color\n                                       {:background-color background-color}))}))\n       [clist/list (when subheader\n                     {:subheader (r/as-element [list-subheader subheader])})\n        (doall\n         (for [idx (range 0 (count items))\n               :let [item (nth items idx)\n                     item-id (if (:id item)\n                               (:id item)\n                               (str idx))]]\n           [:div\n            [list-item-helper {:list-id uuid :list-state @list-state\n                               :mark-selected? mark-selected?\n                               :persistent? persistent?}\n             item item-id]\n            (when  (:items item)\n              [collapse {:in (get-in @list-state [item-id :open?])\n                         :timeout \"auto\" :unmount-on-exit true}\n               [clist/list {:component \"div\" :disable-padding true}\n                (for [sub-idx (range 0 (count (:items item)))\n                      :let [sub-item (nth (:items item) sub-idx)\n                            sub-item-id (if (:id sub-item)\n                                          (:id sub-item)\n                                          sub-idx)]]\n                  [list-item-helper {:list-id uuid :list-state @list-state :key (gen-uuid)\n                                     :mark-selected? mark-selected? :parent-id item-id\n                                     :persistent? persistent?}\n                   sub-item sub-item-id])]])]))]])))\n\n(reg-event-db\n :rams4ui|set-selected-list-id\n (fn [db [event list-id id persistent?]]\n   (let [state (get-db-value db list-id :persistent? persistent?)\n         to-select-item (get state id)]\n     (set-db-value db list-id\n                   (change-selected-helper state (str (when (:parent-id to-select-item)\n                                                        (str (:parent-id to-select-item)\n                                                             \"<|>\"))\n                                                      id))\n                   :persistent? persistent?))))\n\n\n(defn set-selected-item\n  \"helper function to set the selected item in the identified list. It should be noted that this function is not useful in case the original list configuration does not have mark-selected?\n\n  - **list-id**: Required argument which must be the id of the list created\n  - **id**: Required argument which must be an id of an item or a sub-item\n  - **persistent?**: an optional argument that should only be based if the original list-id had in its configuration the **persistent?** set.\"\n  [list-id id & {:keys [persistent?]}]\n  (dispatch [:rams4ui|set-selected-list-id list-id id persistent?]))\n"]}