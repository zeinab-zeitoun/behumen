{"version":3,"sources":["behumen/core.cljs"],"mappings":";AAsBA,AAAA,AAAMA;AAAN,AACE,AAAMC,AAAkB,AAAA,AAAA,AAACC;AAAzB,AACE,AACE,AAAA,AAAAC,AAAA,AAACC,AAAGH;AADN,AACwCI;;AADxgBD,AAMwC,AAAA,AAAOA,AAGJ,AAAA,AAAOA,AACrER;;AAIJ,AAAKU,AAAoB,AAAA,AAAA,AAAA,AAACC;AAE1B,AAAA,AAAuBC;AAAvB,AACE,AAACC;;AACD,AAACC,AAAwBJ;;AACzB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAJ,AAAA,AAAA,AAAAA,AAAA,AAACS,AAA6B,AAAA,AAAiBC,AAAwBN;;AAEzE,AAAA,AAAMO;AAAN,AACE,AAAA,AAAA,AAACC;;AACD,AAAA,AAAAC,AAACC,AAAWC;AAAZ,AACa,AAAMC,AAAM,AAAA,AAAAH;AAAZ,AACE,AAAI,AAAA,AAACI,AAAUD;AACb,AAAA,AAAA,AAACE,AAAiC,AAAA,AAAOF;;AACzC,AACE,AAAA,AAAA,AAAA,AAACE;;AACD,AAAA,AAACC,AAA2B,AAAA,AAAOH;;AACnC,AAAA,AAAA,AAACI,AAAS,AAAA,AAAOJ,AAAe,AAAA,AAAAH,AACf,AAAA,AAAQG;;AAR5C,AAAA,AAAA;;AAWA,AAACK;;AACD,AAACf","names":["behumen.core/render-page","current-page-type","re_frame.core.subscribe","cljs.core/deref","cljs.core._EQ_","behumen.views.home/landing-page","behumen.core/render-theme","rams-ui.util/reset-page-render","spacing","rams-ui.components.theme/theme","behumen.core/functional-compiler","reagent.core/create-compiler","behumen.core/mount-components","re-frame.core/clear-subscription-cache!","reagent.core/set-default-compiler!","reagent.dom.render","js/document","behumen.core/init!","re-frame.core/dispatch-sync","p1__65094#","reitit.frontend.easy/start!","behumen.routes/reitit-routes","route","cljs.core/contains?","re-frame.core/dispatch","rams-ui.components.nav/set-url-selected","rams_ui.util.open_url","behumen.ajax/load-interceptors!"],"sourcesContent":["(ns behumen.core\n  (:require\n    [day8.re-frame.http-fx]\n    [behumen.handlers.events]\n    [reagent.dom :as rdom]\n    [reagent.core :as r]\n    [re-frame.core :as rf :refer [dispatch subscribe dispatch-sync]]\n    [reitit.frontend.easy :as rfe]\n    [goog.events :as events]\n    [goog.history.EventType :as HistoryEventType]\n    [behumen.ajax :as ajax]\n    [behumen.routes :refer [reitit-routes]]\n    [behumen.subscriptions]\n    [behumen.views.common :as common-views]\n    [behumen.views.home :as landing]\n    [rams-ui.components.theme :refer [theme toggle-ltr]]\n    [rams-ui.components.nav :refer [set-url-selected]]\n    [rams-ui.util :as util :refer [open-url get-history get-url]]\n    [reitit.core :as reitit]\n    [clojure.string :as string])\n  (:import goog.History))\n\n(defn render-page []\n  (let [current-page-type (rf/subscribe [:get-current-page-type])]\n    (cond\n      (= @current-page-type :landing-page) [landing/landing-page])))\n\n(defn render-theme []\n  (util/reset-page-render)\n  (let [spacing 4]\n      [theme {:palette {:common {:black \"#000\"\n                               :white \"#fff\"}\n                        :background {:default \"#fff\"\n                                     :paper \"#f6f9fc\"}\n                        :primary {:light \"#0652ff\"\n                                  :main \"#001e62\"\n                                  :dark \"#000e30\"\n                                  :contrast-text \"#fff\"}\n                        :secondary {:light \"#ffd790\"\n                                    :main \"#ffa400\"\n                                    :dark \"#9b6300\"\n                                    :contrast-text \"#fff\"}\n                        :error {:light \"rgba(239, 149, 177, 1)\"\n                                :main \"rgba(224, 1, 70, 1)\"\n                                :dark \"rgba(224, 1, 70, 1)\"\n                                :contrast-text \"#fff\"}\n                        :text {:primary \"rgba(30, 30, 30, 1)\"\n                               :secondary \"rgba(48, 50, 51, 1)\"\n                               :disabled \"rgba(153, 153, 153, 1)\"\n                               :hint \"rgba(168, 168, 168, 1)\"}}\n              :breakpoints {:values { :xs 0\n                                      :sm 600\n                                      :md 1200\n                                      :lg 1500}}\n              :typography {:font-family \"\\\"Montserrat\\\", \\\"sans-serif\\\"\"}\n              :props {:MuiTypography {:variantMapping {:maccy \"h1\"}\n                                      }}\n              :spacing spacing\n              :css {\".header_1\" {:font-size \"20px\" :font-weight 800\n                                 :color \"green\"}}\n              :overrides {:MuiOutlinedInput {:notchedOutline\n                                             {\"@global\" {:legend {:display \"none\"}}\n                                            :top 0}\n                                             :input {:padding  (* 3.5 spacing)}}\n                        :MuiInputLabel {:outlined {:position \"inherit\"\n                                                   :transform \"none !important\"\n                                                   :margin-bottom (* 1.5 spacing)}}}}\n   [render-page]]))\n\n;; -------------------------\n;; Initialize app\n(def functional-compiler (r/create-compiler {:function-components true}))\n\n(defn ^:dev/after-load mount-components []\n  (rf/clear-subscription-cache!)\n  (r/set-default-compiler! functional-compiler)\n  (rdom/render [#'render-theme] (.getElementById js/document \"app-body\") functional-compiler))\n\n(defn init! []\n  (rf/dispatch-sync [:initialize-db])  \n  (rfe/start! reitit-routes\n              #(let [route (:data %)]\n                 (if (contains? route :type)\n                   (dispatch [:set-current-page-type (:type route)])\n                   (do\n                     (dispatch [:set-current-page-type nil])\n                     (set-url-selected :main-nav (:path route))\n                     (open-url (:path route) :params (:query-params %)\n                               :label (:label route)))))\n                 {:use-fragment false})\n  \n  (ajax/load-interceptors!)\n  (mount-components))\n"]}