{"version":3,"sources":["shadow/remote/runtime/obj_support.cljc"],"mappings":";AAkBA,AAAA,AAAA,AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAC,AAAWkE;;AAAX,AAAA,AAAAnE,AAAA;AAAA,AAAA,AAAAA,AAAAC,AAAA;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAAC,AAAAC,AAAW+D;;AAAX,AAAA,AAAAjE,AAAA;AAAA,AAAA,AAAAG,AAAAF;AAAAE,AAAA,AAAA,AAAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAAE;;;;AAAA,AAAAC,AAAAC,AAAAN,AAAAC;;;;;AAAA,AAAA,AAAA,AAAA,AAAAM,AAAAC,AAAAC,AAAWuD;;AAAX,AAAA,AAAAzD,AAAA;AAAA,AAAA,AAAAG,AAAA,AAAAC,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAAE,AAAA,AAAAC,AAAAF,AAAA,AAAA;AAAAG,AAAA,AAAAD,AAAAF,AAAA,AAAA;AAAA,AAAA,AAAAL,AAAAA,AAAAG,AAAAG,AAAAE,AAAAR,AAAAG,AAAAG,AAAAE;AAAAP,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAAU,AAAAC,AAAAC,AAAW6C;;AAAX,AAAA,AAAA/C,AAAA;AAAA,AAAA,AAAAG,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAAJ,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAAE;;AAAA,AAAA,AAAAC,AAAAJ,AAAAE,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAAI,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApB,AAAA,AAAAE;;;AAAA,AAAA,AAAA,AAAA,AAAAmB,AAAWuC;;AAAX,AAAA,AAAAvC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAnB,AAAA,AAAAqB,AAAArB,AAAA,AAAAsB;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAWmC;;AAAX,AAAA,AAAAnC,AAAA;AAAA,AAAAC;;;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAWiC;;AAAX,AAAA,AAAAjC,AAAA;AAAA,AAAA,AAAA3B,AAAA0B,AAAAxB,AAAA0B,AAAWgC;;;AAAX,AAAA,AAAA,AAAA,AAAA/B,AAAW+B;;AAAX,AAAA,AAAA/B,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA5B;;;AAAA,AAAA,AAAA,AAAA,AAAA6B,AAAW6B;;AAAX,AAAA,AAAA7B,AAAA;AAAA,AAAA,AAAAC,AAAAJ;AAAA,AAAA,AAAA,AAAA,AAAAI,AAAA;AAAAA;;AAAA,AAAAA,AAAA,AAAA,AAAAC;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAAD;AAAAF;AAAA,AAAA,AAAAH,AAAAI;;AAAAA;;;;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAAC,AAAWwB;;AAAX,AAAA,AAAAzB,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAF,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAF,AAAA,AAAAC;;;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAWqB;;AAAX,AAAA,AAAAtB,AAAA;AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAAD;AAAA,AAAAE,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAL,AAAAZ,AAAAa;;AAAA,AAAAvC,AAAA0B,AAAA,AAAAkB,AAAA,AAAAH,AAAAvC,AAAAqC,AAAA,AAAWqB;;;;AAAX,AAAA,AAAA,AAAA,AAAAf,AAAAC,AAAAzB,AAAWuC;;AAAX,AAAA,AAAAf,AAAA;AAAA,AAAA,AAAAE,AAAAC;AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAAC,AAAAA,AAAA,AAAAE,AAAAF,AAAA,AAAAE;AAAA,AAAA5B,AAAAK,AAAAxB,AAAA,AAAW0D;;AAAX,AAAA5D,AAAA0B,AAAA,AAAAwB,AAAAhD,AAAA4C,AAAAzB,AAAA,AAAWuC;;;;AAAX,AAAA,AAAA,AAAA,AAAAT,AAAWS;;AAAX,AAAA,AAAAT,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAAjC,AAAA,AAAA,AAAAkC,AAAA,AAAArD,AAAA,AAAAE;;;AAAA,AAAA,AAAA,AAAA,AAAAoD,AAAAjC,AAAWuC;;AAAX,AAAA,AAAAN,AAAA;AAAA,AAAA,AAAAtD,AAAAqB,AAAAnB,AAAA0B,AAAWgC;;;AAAX,AAAA,AAAA,AAAA,AAAAL,AAAAC,AAAWI;;AAAX,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAA,AAAAE,AAAAD;AAAA,AAAAD,AAAA,AAAAG,AAAAF,AAAA,AAAA,AAAAE,AAAAF,AAAA;;AAAA,AAAAlD,AAAAqD,AAAAJ,AAAAC;;;;AAAA,AAAA,AAAAI,AAAA;AAAA,AAAA,AAAA;;;AAAA,AAAA,AAAAA,AAAA;;AAAA,AAAA,AAAAA,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA,AAAA,AAAAF,AAAA,AAAAC,AAAAE;AAAA,AAAA,AAAAC,AAAAD,AAAA;;;AAAA;;;AAAA,AAAWM,AAAWrE;AAAtB,AAAA,AAAA4D,AAAA,AAAA,AAAA,AAAsB5D;;;AAAtB;;;AAAA,AAAAiE,AAAWK;AAAX,AAAA,AAAAJ,AAAA,AAAAC,AAAA,AAAA1B,AAAAwB,AAAA;AAAA,AAAA,AAAA,AAAAG,AAAAH;AAAA,AAAAtB,AAAA,AAAAwB;;AAAAA;;;AAAA,AAAA,AAAAP,AAAA,AAAA,AAAAK,AAAA,AAAA,AAAArB,AAAAsB,AAAA;;;AAAAN,AAEA,AAAA,AAAMW,AAASvE;AAAf,AACE,AAAM,AAAA,AAAA,AAAOA;AAAb,AACE,AAAA4D,AAAA,AAAA,AAAA,AAAY5D;;AADd;;;AAGF,AAAA,AAAMwE,AAAUC;AAAhB,AACE,AAAWb,AAAUa;;AAEvB,AAAA,AAAMC;AAAN,AAIK,AAACC;;AAEN,AAAA,AAAMC;AAAN,AAIK,AAAK,AAACC;;AAEX,AAAA,AAAMC,AACHC,AAAMC,AAAIhF,AAAIiF;AADjB,AAGE,AAAMC,AAAG,AAACR;AAAV,AAAA,AAAA,AAAA,AAAA,AAEMS,AACMH,AACAhF,AAEMkF,AACD,AAAA,AAAChC,AAAM+B,AAAmBC;AAP3C,AASE,AAAA,AAAA,AAACE,AAASL,AAAgBC,AAAKG;;AAEnC,AAAA,AAEA,AAAA,AAAME,AAAiBrF;AAAvB,AACE,AAAI,AAAA,AAAMA;AAAV;;AAKK,AAACsF,AAAO,AAACC,AAAKvF;;;AAErB,AAAA,AAAAwF,AAAAC,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAUQ;AAAVP,AAAA,AAAAD,AAAA;AAAAE,AAAA,AAAAF,AAAA;AAAAG,AAAA,AAAAH,AAAA;AAAAI,AAAA,AAAAjG,AAAA,AAAA,AAAA,AAAAkG,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAAA;;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AACE,AAAAE,AAAKK,AAAsCG;AAA3C,AAAA,AAAAP,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAAsCM;AAAtC,AAAA7G,AAAAuG,AAAA,AAAuBK;AAAvB,AACEA;AAFJ,AAAAX,AAAAL,AAAAE,AAAAC,AAAAC;;;AAKA,AAAKe,AAAuB,AAAA,AAAA,AAAA,AAAA;AAE5B,AAAA,AAAAC,AAAME,AACHC;AADH,AAAA,AAAAF,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAT,AAAA,AAAAS,AAAA,AAAA,AAAA,AAAA,AAAAR,AAAAC,AAAAO,AAAAA;AAAAA,AAC8DJ;AAD9D,AAAA7G,AAAAiH,AAAA,AACgBG,AAAkBL;AADlC,AAEE,AAAMM,AAAG,AAACC,AAAgBF;AAA1B,AAIK,AAACG,AAAUJ,AAAKE,AAAG,AAACG;;AACvB,AAACC,AAAcJ;;AAEnB,AAAA,AAAAK,AAAME,AACHT;AADH,AAAA,AAAAQ,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAnB,AAAA,AAAAmB,AAAA,AAAA,AAAA,AAAA,AAAAlB,AAAAC,AAAAiB,AAAAA;AAAAA,AAC8Dd;AAD9D,AAAA7G,AAAA2H,AAAA,AACgBP,AAAkBL;AADlC,AAIE,AAAMM,AAAG,AAACC,AAAgBF;AAA1B,AACE,AAACS,AAAOV,AAAKE;;AACb,AAACI,AAAcJ;;AAEnB,AAAA,AAAAS,AAAME,AACHb;AADH,AAAA,AAAAY,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvB,AAAA,AAAAuB,AAAA,AAAA,AAAA,AAAA,AAAAtB,AAAAC,AAAAqB,AAAAA;AAAAA,AAC2BlB;AAD3B,AAAA7G,AAAA+H,AAAA,AACgBX;AADhB,AAEE,AAACa,AAAgBd,AAAKC;;AAGxB,AAAA,AAAMc,AACHf,AAAKN;AADR,AAEE,AAAKM;;AAEP,AAAA,AAAMgB,AAAWC,AAAGvB;AAApB,AAEK,AAAI,AAAWwB,AAASD;AACtB,AAACE,AAAWF;;AACZ,AAAA,AAAA,AAAA,AAAA,AAGU,AAACG,AAAO,AAAA,AAACN,AAAgBG;;;AAM1C,AAAA,AAAMI,AAAYC;AAAlB,AAAA;;AAQA,AAAA,AAAMC,AAAiBC,AAAKC;AAA5B,AACE,AAAA,AACMD,AACA,AAAA,AAAC1F,AAAkB,AAAC6F,AAAI,AAACC,AAAKH,AAC9B,AAAA,AAAA,AAAA,AAAA,AAACzD;AAHP,AAAA0D,AAI2CG;AAJ3C,AAKQL,AACA,AAAA,AAAC1F,AAAkB,AAAC6F,AAAIF,AACxB,AAAA,AAAA,AAAA,AAAA,AAACzD;;AAEX,AAAA,AAAA8D,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1C,AAAA,AAAA0C,AAAA,AAAA,AAAA,AAAA,AAAAzC,AAAAC,AAAAwC,AAAAA;AAAAA,AAAkDP;AAAlD,AAAA3I,AAAAkJ,AAAA,AAA6BE;AAA7B,AAAApJ,AAAAkJ,AAAA,AAAwC/B;AAAxC,AACMwB,AACA,AAAA,AAAA,AAAA,AAACxD,AACC,AAAAkE,AAKF,AAAClE;AALC,AAAA,AAAAmE,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA9C,AAAA,AAAA8C,AAAA,AAAA,AAAA,AAAA,AAAA7C,AAAAC,AAAA4C,AAAAA;AAAA,AAAAtJ,AAAAsJ,AAAA,AAAaC;AAAb,AACE,AAAMC,AAAI,AAAC9I,AAAI0I,AAAWG;AACpBE,AAAI,AAACzJ,AAAImH,AAAKqC;AACdE,AAAI,AAACC,AAAMxC,AAAKqC,AAAIC;AAF1B,AAGE,AAACnF,AAAQoF;AACf,AAAA,AAAA,AACE,AAAAE;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArD,AAAA,AAAAqD,AAAA,AAAA,AAAA,AAAA,AAAApD,AAAAC,AAAAmD,AAAAA;AAAAA,AAGUhD;AAHV,AAAA7G,AAAA6J,AAAA,AAAaC;AAAb,AAAA9J,AAAA6J,AAAA,AAAmBE;AAAnB,AAAA/J,AAAA6J,AAAA,AAAA,AAAuBG;AAAvB,AAAAhK,AAAA6J,AAAA,AAAA,AAAiCI;AAAjC,AAKE,AAAMC,AAAI,AAAAC,AAAK,AAACtI,AAAMuH;AAAZgB,AAAwB,AAAGN,AAAMC;AAAjC,AAAA,AAAAI,AAAAC,AAAAD,AAAAC;;AACJC,AAAK,AAACC,AAAMR,AAAMI;AAClBK,AACA,AAAClK,AACC,AAAKmK,AAAEjB;AAAP,AACE,AAAMC,AAAI,AAAC9I,AAAI0I,AAAWG;AACpBE,AAAI,AAACzJ,AAAImH,AAAKqC;AADpB,AAEE,AAAA,AAAA,AAACvG,AAAMuH,AAAEjB,AAAU,AAAA,AACE,AAACtB,AAAgBuB,AAAIQ;AADvB,AAAAS,AAE2CzB;AAF3C,AAAA,AAAA,AAAA;AAAnB,AAImB,AAAA,AACE,AAACf,AAAgBwB,AAAIQ;AADvB,AAAAS,AAE2C1B;AAF3C,AAAA,AAAA,AAAA;;AARzB,AAaEqB;AAhBR,AAkBEE;;;AAEZ,AAAA,AAAAI,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApE,AAAA,AAAAoE,AAAA,AAAA,AAAA,AAAA,AAAAnE,AAAAC,AAAAkE,AAAAA;AAAAA,AAAwCjC;AAAxC,AAAA3I,AAAA4K,AAAA,AAA8BzD;AAA9B,AACMwB,AACA,AAAA,AAAA,AAAA,AAACxD,AACC,AAAA2F,AAIF,AAAC3F;AAJC,AAAA,AAAA4F,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvE,AAAA,AAAAuE,AAAA,AAAA,AAAA,AAAA,AAAAtE,AAAAC,AAAAqE,AAAAA;AAAA,AAAA/K,AAAA+K,AAAA,AAAaxB;AAAb,AACE,AAAME,AAAI,AAAC/I,AAAIyG,AAAKoC;AACdG,AAAI,AAACC,AAAMxC,AAAKoC,AAAIE;AAD1B,AAEE,AAACnF,AAAQoF;AACf,AAAA,AAAA,AACE,AAAAsB;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAzE,AAAA,AAAAyE,AAAA,AAAA,AAAA,AAAA,AAAAxE,AAAAC,AAAAuE,AAAAA;AAAAA,AAEUpE;AAFV,AAAA7G,AAAAiL,AAAA,AAAanB;AAAb,AAAA9J,AAAAiL,AAAA,AAAmBlB;AAAnB,AAAA/J,AAAAiL,AAAA,AAAA,AAAuBhB;AAAvB,AAIE,AAAMC,AAAI,AAAAC,AAAK,AAACtI,AAAMsF;AAAZiD,AAAkB,AAAGN,AAAMC;AAA3B,AAAA,AAAAI,AAAAC,AAAAD,AAAAC;;AACJC,AAAK,AAACC,AAAMR,AAAMI;AAClBK,AACA,AAAClK,AACC,AAAKmK,AAAEjB;AAAP,AACE,AAAME,AAAI,AAAC/I,AAAIyG,AAAKoC;AAApB,AACE,AAAA,AAAA,AAACtG,AAAMuH,AAAEjB,AAAU,AAACtB,AAAgBwB,AAAIQ;AAH9C,AAKEI;AARR,AAUEE;;;AAEZ,AAAA,AAAAW,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA3E,AAAA,AAAA2E,AAAA,AAAA,AAAA,AAAA,AAAA1E,AAAAC,AAAAyE,AAAAA;AAAAA,AAAmDxC;AAAnD,AAAA3I,AAAAmL,AAAA,AAA8BhE;AAA9B,AAAAnH,AAAAmL,AAAA,AAAmC/B;AAAnC,AACMT,AACA,AAAA,AAAA,AAAA,AAACxD,AACC,AAAAkG,AAIF,AAAClG;AAJC,AAAA,AAAAmG,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA9E,AAAA,AAAA8E,AAAA,AAAA,AAAA,AAAA,AAAA7E,AAAAC,AAAA4E,AAAAA;AAAA,AAAAtL,AAAAsL,AAAA,AAAa/B;AAAb,AACE,AAAME,AAAI,AAAC/I,AAAI0I,AAAWG;AACpBG,AAAI,AAACC,AAAMxC,AAAKoC,AAAIE;AAD1B,AAEE,AAACnF,AAAQoF;AACf,AAAA,AAAA,AACE,AAAA6B;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhF,AAAA,AAAAgF,AAAA,AAAA,AAAA,AAAA,AAAA/E,AAAAC,AAAA8E,AAAAA;AAAAA,AAEU3E;AAFV,AAAA7G,AAAAwL,AAAA,AAAa1B;AAAb,AAAA9J,AAAAwL,AAAA,AAAmBzB;AAAnB,AAAA/J,AAAAwL,AAAA,AAAA,AAAuBvB;AAAvB,AAIE,AAAMC,AAAI,AAAAC,AAAK,AAACtI,AAAMuH;AAAZgB,AAAwB,AAAGN,AAAMC;AAAjC,AAAA,AAAAI,AAAAC,AAAAD,AAAAC;;AACJC,AAAK,AAACC,AAAMR,AAAMI;AAClBK,AACA,AAAClK,AACC,AAAKmK,AAAEjB;AAAP,AACE,AAAME,AAAI,AAAC/I,AAAI0I,AAAWG;AAA1B,AACE,AAAA,AAAA,AAACtG,AAAMuH,AAAEjB,AAAU,AAACtB,AAAgBwB,AAAIQ;AAH9C,AAKEI;AARR,AAUEE;;;AAEZ,AAAA,AAAAkB,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlF,AAAA,AAAAkF,AAAA,AAAA,AAAA,AAAA,AAAAjF,AAAAC,AAAAgF,AAAAA;AAAAA,AAAsC/C;AAAtC,AAAA3I,AAAA0L,AAAA,AAA4BvE;AAA5B,AAEE,AAAMyE,AACA,AAAA,AAAA,AAAA,AAAA,AAAC/F,AAAYsB;AADnB,AAGMwB,AACA,AAAA,AAAC1F,AAAqB2I,AACtB,AAAA,AAAA,AAAA,AAACzG,AACC,AAAA0G,AAMF,AAAC1G;AANC,AAAA,AAAA2G,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAtF,AAAA,AAAAsF,AAAA,AAAA,AAAA,AAAA,AAAArF,AAAAC,AAAAoF,AAAAA;AAAA,AAAA9L,AAAA8L,AAAA,AAAavC;AAAb,AAEE,AAAME,AAAI,AAAC/I,AAAI,AAAA,AAAA,AAAAqL,AAAYH,AAAerC;AAEpCG,AAAI,AAACC,AAAMxC,AAAKoC,AAAIE;AAF1B,AAGE,AAACnF,AAAQoF;AACf,AAAA,AAAA,AACE,AAAAsC;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAzF,AAAA,AAAAyF,AAAA,AAAA,AAAA,AAAA,AAAAxF,AAAAC,AAAAuF,AAAAA;AAAAA,AAEUpF;AAFV,AAAA7G,AAAAiM,AAAA,AAAanC;AAAb,AAAA9J,AAAAiM,AAAA,AAAmBlC;AAAnB,AAAA/J,AAAAiM,AAAA,AAAA,AAAuBhC;AAAvB,AAME,AACE,AAAAiC,AAAA,AAAAH,AAA6CH;AAA7CM,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1F,AAAA,AAAA0F,AAAA,AAAA,AAAA,AAAA,AAAAzF,AAAAC,AAAAwF,AAAAA;AAAAA,AAAiCI;AAAjC,AAAAtM,AAAAkM,AAAA,AAAcE;AAAd,AAAApM,AAAAkM,AAAA,AAAmBG;AAEbnC,AAAI,AAAGJ,AAAMC;AACbwC,AAAQ,AAAGrC,AAAI,AAACrI,AAAMwK;AAH5BF,AAMM,AAAOC,AAAKA;AACLC,AAASA;AACTE,AAAQA;;AAFf,AAGE,AAAA,AAAQ,AAAA,AAAMA;AAAd,AACGH,AAAKC;;AACN,AAAMG,AAAK,AAACC,AAAML;AAAlB,AACE,AAAI,AAAA,AAAMI;AAAV,AAAA,AACOH;;AACL,AAAO,AAACK,AAAKN;AAAM,AAACO,AAAKN,AAASG;AAAM,AAAA,AAAKD;;;;;;;;;;AAd3D,AAAA7L,AAAAyL,AAAA,AAAA,AAKOC;AALP,AAAA1L,AAAAyL,AAAA,AAAA,AAKYE;AAWNhC,AAAK,AAACC,AAAMR,AAAM,AAAAK,AAAKD;AAALE,AAAS,AAACvI,AAAMwK;AAAhB,AAAA,AAAAlC,AAAAC,AAAAD,AAAAC;;AAClBG,AACA,AAAClK,AACC,AAAKmK,AAAEjB;AAAP,AACE,AAAME,AAAI,AAAC/I,AAAI2L,AAAS9C;AAAxB,AACE,AAAA,AAAA,AAACtG,AAAMuH,AAAEjB,AAAU,AAACtB,AAAgBwB,AAAIQ;AAH9C,AAKEI;AAvBR,AAyBE,AAAA,AAAA,AAACuC,AAAMhB,AAAciB,AAAYT,AAAeC;;AAzBlD,AAAA,AAAA,AAAA,AAAA,AA2BUvC,AACG,AAACjI,AAAMwK,AACP9B,AACH,AAAI,AAAG,AAAC1I,AAAMwK,AAAUnC,AAAK,AAAA,AAAA,AAAOkC;;;AAE5D,AAWA,AAAA,AAAAU,AAAME,AAAuCjN,AAAIkN;AAAjD,AAAA,AAAAF,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvG,AAAA,AAAAuG,AAAA,AAAA,AAAA,AAAA,AAAAtG,AAAAC,AAAAqG,AAAAA;AAAAA,AAAuCpE;AAAvC,AAAA3I,AAAA+M,AAAA,AAA6B5F;AAA7B,AACE,AAAA,AACE,AACE,AAAA,AAAMA;AACN,AAAA,AAAA,AAAA,AAAA,AAAChC,AAASwD;;AAFZ,AAIE,AAASxB;AACLwB,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACwE,AAAgBC,AACe,AAAOjG,AAEvC,AAAA,AAAA,AAAA,AAAChC,AAAgC,AAAK0B;AAAL,AAAUM;;;AATjD,AAWE,AAACkG,AAASlG;AACNwB,AACA,AAAA,AAAA,AAAA,AAAA,AAACxD,AACD,AAAA,AAAA,AAAA,AAACA,AAAgC,AAAK0B;AAAL,AAAUM;;;AAdjD,AAgBE,AAASA;AACLwB,AACA,AAAA,AAAA,AAAA,AAAA,AAACxD,AACD,AAAA,AAAA,AAAA,AAACA,AAAgC,AAAK0B;AAAL,AAAUM;;;AAnBjD,AAqBE,AAAArH,AAAUqH;AACNwB,AACA,AAAA,AAAA,AAAA,AAAA,AAACxD,AACD,AAAA,AAAA,AAAA,AAACA,AAAgC,AAAK0B;AAAL,AAAUM;;;AAxBjD,AA0BE,AAAAmG,AAASnG;AACLwB,AACA,AAAA,AAAA,AAAA,AAAA,AAACxD,AACD,AAAA,AAAA,AAAA,AAACA,AAAgC,AAAK0B;AAAL,AAAUM;;;AA7BjD,AA+BE,AAACoG,AAAKpG;AACFwB,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACwE,AAAgBC,AACgB,AAACvL,AAAMsF,AACxC,AAACuB,AAAgB,AAAC8E,AAAKrG,AACvB,AAACgC;;AApCP,AAsCE,AAAC3F,AAAQ2D;AACLwB,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACwE,AAAgBC,AACgB,AAACvL,AAAMsF,AACxC,AAAC0D;;AA1CP,AA4CE,AAAC4C,AAAKtG;AACFwB,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACwE,AAAgBC,AACgB,AAACvL,AAAMsF,AACxC,AAACuB,AAAgBvB,AACjB,AAACiE;;AAjDP,AAmDE,AAACsC,AAAMvG;AACHwB,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACwE,AAAgBC,AACgB,AAACvL,AAAMsF,AACxC,AAAA,AAAClE,AAAkB,AAAC6F,AAAI3B,AACxB,AAACiE;;AAxDP,AA2DE,AAACuC,AAAKxG;AACFwB,AACA,AAAA,AAAA,AAAA,AAAA,AAACwE,AAAgBC,AACjB,AAACzB;;AA9DP,AAmEE,AAAA,AAAA,AAAA,AAAA,AAACxG,AAASwD;;;;;;;;;;;;;AApEd,AAAAuE,AAsE2ClE;AAtE3C,AAuEI,AAAA,AAAA,AAAA,AAAA,AAAC7D,AAASwD;;AAEhB,AAAA,AAAMiF,AAAmBjF,AAAK5I,AAAIkN;AAAlC,AACE,AAAA,AAAA,AAAA,AAAC9H,AAASwD,AAA0B,AAACvD,AAAgBrF;;AAEvD,AAAA,AAAM8N,AAAqBlF,AAAK5I,AAAIkN;AAApC,AACE,AAAA,AAACE,AAAOxE,AAAcyE,AAAM,AAAA,AAAA,AAAA,AAAA,AAAA,AAACU,AAAYb;;AAE3C,AAAA,AAAAc,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxH,AAAA,AAAAwH,AAAA,AAAA,AAAA,AAAA,AAAAvH,AAAAC,AAAAsH,AAAAA;AAAAA,AAA2CrF;AAA3C,AAAA3I,AAAAgO,AAAA,AAA8BE;AAA9B,AACE,AAAA,AAAA,AAAA,AAAC/I,AAASwD,AAA0B,AAAK9B;AAAL,AAAUqH;;;AAEhD,AAAA,AAAMC,AAAkBC,AAAEnB;AAA1B,AACE,AAAM9F,AAAK,AAACkH,AAASD;AAArB,AAEajH,AAEK,AAAA,AAAW8F,AACX,AAAK,AAAY9F,AAAKiH,AAS7B,AAAAK,AAAA,AAAA,AAAA,AAAAH,AAQL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACtB,AACD,AAACY,AACD,AAACC,AACD,AAACI;AAfW,AAAAK,AAACpG,AAAOkG,AAIf;AAAA,AAAA,AAAAG;AAFO,AAAAA,AAACrH,AAAOkH,AAEf;AAAA,AAAA,AAAAI;AADa,AAAAA,AAACxG,AAAaoG,AAC3B;;AAAAK,AAAA,AACE,AAAI,AAACC,AAAMN,AAAG,AAACT,AAAKS,AACpB,AAAAK,AAAA,AAAA,AAAAE,AAAC1L;AAAD,AAAgB,AAAA0L,AAAC/G,AAAUwG;AAF7BK;AAAA,AAAA,AAIE,AAACjG,AAAW4F;AACZ,AAAAK,AAAA,AAAA,AAAAG,AAAC3L;AAAD,AAAgB,AAAA2L,AAACzG,AAAUiG;;;AAL7BK;;AAQUL,AAAEnB,AACEmB,AAAEnB,AACAmB,AAAEnB;;AAG/B,AAAA,AAAA,AAAA4B,AAAAC,AAAA,AAAA;;AAAA,AAAAD,AAAAE,AAAA,AAEE,AAAWX,AAAEnB;AAAb,AACE,AAACkB,AAAiBC,AAAEnB;;;AAHxB,AAAA,AAAA4B,AAAAC,AAAA,AAAA;;AAAA,AAAAD,AAAAE,AAAA,AAME,AAAWX,AAAEnB;AAAb,AACE,AAACkB,AAAiBC,AAAEnB;;AAExB,AAMA,AAAA,AAAA+B,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAzI,AAAA,AAAAyI,AAAA,AAAA,AAAA,AAAA,AAAAxI,AAAAC,AAAAuI,AAAAA;AAAAA,AAA0CtG;AAA1C,AAAA3I,AAAAiP,AAAA,AAA4BE;AAA5B,AACE,AAAA,AAAA,AAAA,AAAChK,AAASwD,AAA0B,AAACyG,AAAI,AAAC5B,AAAK2B;;AAKjD,AAAA,AAAAE,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA9I,AAAA,AAAA8I,AAAA,AAAA,AAAA,AAAA,AAAA7I,AAAAC,AAAA4I,AAAAA;AAAAA,AAAwDxI;AAAxD,AAAA9G,AAAAsP,AAAA,AAAiCvP;AAAjC,AAAAC,AAAAsP,AAAA,AAAqCtK;AAArC,AAAAhF,AAAAsP,AAAA,AAA8C3G;AAA9C,AACE,AAAIA;AACF7B;;AACA,AAAA,AAAC7D,AAAM6D,AAAgB,AAACiI,AAAWhP,AAAIiF,AAChB,AAACkK;;;AAE5B,AAAA,AAAAM,AAAME,AAA6C3F;AAAnD,AAAA,AAAA0F,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjJ,AAAA,AAAAiJ,AAAA,AAAA,AAAA,AAAA,AAAAhJ,AAAAC,AAAA+I,AAAAA;AAAAA,AAA8CE;AAA9C,AAAA3P,AAAAyP,AAAA,AAA+B9I;AAA/B,AAIO,AAAA,AAAAqJ,AAACC,AACD,AAACC,AACD,AAACC,AAAKpG,AACN,AAAA,AAACqG,AACD,AAAA,AAAC1N;AAJD,AAAU,AAAAsN,AAAA,AAAA,AAAA,AAACD;AADX,AAAA,AAAAF,AAACC;AAAD,AAAS,AAAA,AAAC1N,AAAO,AAAAyN,AAAA,AAAA,AAAA,AAACE;AAFlB,AAAA,AAAA,AAAAhE,AAAWpF,AACX,AAACiJ;;AAQR,AAAA,AAAAS,AAAME,AAEHxL;AAFH,AAAA,AAAAuL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA9J,AAAA,AAAA8J,AAAA,AAAA,AAAA,AAAA,AAAA7J,AAAAC,AAAA4J,AAAAA;AAAA,AAAAtQ,AAAAsQ,AAAA,AACW3J;AADX,AAGE,AAAM,AAACpE,AAAU,AAAA,AAAA,AAAAwJ,AAAWpF,AAAW5B;AAAvC,AACE,AAAA,AAAA,AAAC6H,AAAMjG,AAAU6J,AAAoBzL,AAAKwK;;AAC1C,AAAA,AAAA,AAAA,AAAC3C,AAAMjG,AAAUxB,AAAmBJ,AAAgB,AAACN;;AACrD,AAAMyJ,AAAQ,AAAA,AAAAnC,AAAA,AAAA,AAAA,AAAA,AAACgE,AAAQpJ,AAAoB5B;AAA3C,AACEmJ;;AAJJ;;;AAMF,AAAA,AAAAuC,AAAAC,AAAMG;AAAN,AAAA,AAAAF,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAnK,AAAA,AAAAmK,AAAA,AAAA,AAAA,AAAA,AAAAlK,AAAAC,AAAAiK,AAAAA;AAAAA,AACwBhB;AADxB,AAAA3P,AAAA2Q,AAAA,AACWG;AADXF,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApK,AAAA,AAAAoK,AAAA,AAAA,AAAA,AAAA,AAAAnK,AAAAC,AAAAkK,AAAAA;AAAAA,AAEoB/J;AAFpB,AAAA7G,AAAA4Q,AAAA,AAEW7L;AAFX,AAGE,AAAAgM,AAAiB,AAACR,AAAcZ,AAAI5K;AAApC,AAAA,AAAAgM;AAAA,AAAAA,AAAS7C;AAAT,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC8C,AAAaF,AAAQjK,AACU9B,AACImJ;;AACpC,AAAA,AAAA,AAAA,AAAA,AAAC8C,AAAaF,AAAQjK,AAA6B9B;;;AAEvD,AAAA,AAAAkM,AAAAC,AAAMG;AAAN,AAAA,AAAAF,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA3K,AAAA,AAAA2K,AAAA,AAAA,AAAA,AAAA,AAAA1K,AAAAC,AAAAyK,AAAAA;AAAAA,AACkCG;AADlC,AAAAtR,AAAAmR,AAAA,AACWxK;AADX,AAAA3G,AAAAmR,AAAA,AACqBL;AADrBM,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA5K,AAAA,AAAA4K,AAAA,AAAA,AAAA,AAAA,AAAA3K,AAAAC,AAAA0K,AAAAA;AAAAA,AAE+BvK;AAF/B,AAAA7G,AAAAoR,AAAA,AAEWrM;AAFX,AAAA/E,AAAAoR,AAAA,AAEeG;AAFf,AAGE,AAAA,AAAQ,AAAChP,AAAU,AAAA,AAAA,AAAAwJ,AAAWpF,AAAW5B;AACvC,AAAA,AAAA,AAAA,AAAA,AAACiM,AAAaF,AAAQjK,AAA6B9B;;AACnD,AAAI,AAAA,AAAA,AAAC6H,AAAMjG,AAAU6J,AAAoBzL,AAAKwK;;AAC1C,AAAA,AAAA,AAAA,AAAC3C,AAAMjG,AAAUxB,AAAmBJ,AAAgB,AAACN;;AACrD,AAAMqC,AAAM,AAAA,AAAAiF,AAAA,AAAA,AAACgE,AAAQpJ,AAAoB5B;AACnCyM,AAAW,AAAA,AAAA,AAAA,AAACzB,AAAOjJ,AAAuByK;AADhD,AAEE,AAAA,AAAAE,AAAQD;AACN,AAAA,AAAA,AAAA,AAAA,AAAA,AAACR,AAAaF,AAAQjK,AACU9B,AACOwM;;AACvC,AAAA,AACE,AAAM/M,AAAO,AAACgN,AAAAA,AAAAA,AAAW3K,AAAAA;AAAzB,AAIE,AAAA,AAAQ,AAACtC,AAASC;AAChB,AAAA,AAAA,AAAA,AAAA,AAAA,AAACwM,AAAaF,AAAQjK,AAEd9B,AACGP;;AAEX,AAAMmN,AAAQ,AAAChN;AACTM,AAAG,AAACR;AADV,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGMmN,AACMD,AACA,AAAA,AAAMnN,AACAS,AAEUA,AACCF;AAT7B,AAWE,AAAA,AAAA,AAAC6H,AAAMjG,AAAUxB,AAAmBwM,AAASC;;AAE7C,AAAMC,AAEU9M,AACI4M,AACV,AAAAG,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAEE,AAAA,AAAUjL;AACV,AAAAiL,AAAA,AAAC7O,AAAe,AAACsN,AAAce,AAAKK;;AAHtCG;;;AAJV,AASE,AAACd,AAAaF,AAAQjK,AAAIgL;;AAjCpC,AAAAH,AAmC2C1I;AAnC3C,AAoCa,AAAA,AAAC+I,AAA+C,AAAA,AAAMjL,AAAOkC;;AAEtE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACgI,AAAaF,AAAQjK,AAEd9B,AACA8B,AACG,AAAAmL,AAAUV;AAAVW,AAAejJ;AAAfkJ,AAAA,AAAA,AAAuBrL;AAAvB,AAAA,AAAAmL,AAAAC,AAAAC,AAAAF,AAAAC,AAAAC,AAACC,AAAAA,AAAAA;;;;;AAG5B,AAAA,AAAAC,AAAAC,AAAMG;AAAN,AAAA,AAAAF,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA9L,AAAA,AAAA8L,AAAA,AAAA,AAAA,AAAA,AAAA7L,AAAAC,AAAA4L,AAAAA;AAAAA,AAC0B3C;AAD1B,AAAA3P,AAAAsS,AAAA,AACW3L;AADX4L,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA/L,AAAA,AAAA+L,AAAA,AAAA,AAAA,AAAA,AAAA9L,AAAAC,AAAA6L,AAAAA;AAAAA,AAEoB1L;AAFpB,AAAA7G,AAAAuS,AAAA,AAEWxN;AAFX,AAGE,AAAA,AAAC6H,AAAMjG,AAAU8L,AAAgBC,AAAO3N;;AAE1C,AAAA,AAAA4N,AAAME,AAEHhM;AAFH,AAAA,AAAA+L,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApM,AAAA,AAAAoM,AAAA,AAAA,AAAA,AAAA,AAAAnM,AAAAC,AAAAkM,AAAAA;AAAAA,AAC0BjD;AAD1B,AAAA3P,AAAA4S,AAAA,AACWjM;AADX,AAGE,AAAA,AAAA,AAACiG,AAAMjG,AAAUkG;;AAEnB,AAAA,AAAMiG,AAAWhO;AAAjB,AACE,AAAMiO,AACK,AAAA,AAAUjO,AACV,AAAC8K,AACD,AAAA,AAACK,AACD,AAACC,AACD,AAAA,AAAC8C,AACD,AAAA,AAAC5C;AANZ,AAQE,AAAC/P,AACC,AAAKyE,AAAMC;AAAX,AACE,AAAA,AAACoI,AAAOrI,AAAe4N,AAAO3N;AAChCD,AACAiO;;AAEN,AAAA,AAAME,AAAOnC;AAAb,AACE,AAAMnK,AAAU,AAAA,AAAA,AAAA,AAAA,AAAA,AAACd;AAAjB,AAAA,AAAA,AAGM8J,AACUmB,AACEnK;AALlB,AAOE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAuM,AAACI,AAAgBxC;AAAjB,AAEwB,AAAAoC,AAACrC,AAAalB;AAFtC,AAAA,AAAAwD;AAAA,AAGuB,AAAAA,AAAC9B,AAAY1B;AAHpC,AAAA,AAAAyD;AAAA,AAIsB,AAAAA,AAACZ,AAAW7C;AAJlC,AAAA,AAAA0D;AAAA,AAK0B,AAAAA,AAACR,AAAelD;AAL1C,AAAA;AAAA,AAMa,AAAC/C,AAAMjG,AAAUmM;;;AAE9BnD;;AAEJ,AAAA,AAAA4D,AAAMpB,AAAsCpS,AAAIiF;AAAhD,AAAA,AAAAwO,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhN,AAAA,AAAAgN,AAAA,AAAA,AAAA,AAAA,AAAA/M,AAAAC,AAAA8M,AAAAA;AAAAA,AAAuC7D;AAAvC,AAAA3P,AAAAwT,AAAA,AAAwB7M;AAAxB,AACE,AAAM5B,AAAI,AAACJ;AAAX,AACE,AAAA,AAAQ,AAAK,AAACnB,AAAQzD,AAAK,AAAA,AAACqC,AAAsB,AAACqK,AAAM1M,AAAM,AAAA,AAACqC,AAAE,AAACP,AAAM9B;AACvE,AAAC6M,AAAMjG,AAAU9B,AAAUE,AAAIhF,AAAIiF;;AACnC,AAAC4H,AAAMjG,AAAU9B,AAAUE,AAAI,AAAA,AAACrE,AAAIX,AAAO,AAAC0T,AAAMzO,AAAS,AAAA,AAACtE,AAAIX;;;AAClEgF;;AAEJ,AAAA,AAAA2O,AAAME,AAA6BC;AAAnC,AAAA,AAAAF,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAnN,AAAA,AAAAmN,AAAA,AAAA,AAAA,AAAA,AAAAlN,AAAAC,AAAAiN,AAAAA;AAAA,AAAA3T,AAAA2T,AAAA,AAAuBhN;AAAvB,AACE,AAAA,AAAAoF,AAAA,AAAA,AAACgE,AAAQpJ,AAAoBkN;;AAE/B,AAAA,AAAAC,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvN,AAAA,AAAAuN,AAAA,AAAA,AAAA,AAAA,AAAAtN,AAAAC,AAAAqN,AAAAA;AAAA,AAAA/T,AAAA+T,AAAA,AAAoBjD;AAApB,AACE,AAAA,AAACmD,AAAgBnD;;AAEnB","names":["this__4380__auto__","k__4381__auto__","this__4382__auto__","k75570","else__4383__auto__","G__75596","cljs.core/Keyword","obj","cljs.core.get","__extmap","this__4399__auto__","f__4400__auto__","init__4401__auto__","cljs.core.reduce","ret__4402__auto__","p__75597","vec__75598","k__4403__auto__","cljs.core.nth","v__4404__auto__","this__4394__auto__","writer__4395__auto__","opts__4396__auto__","pr-pair__4397__auto__","keyval__4398__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__75569","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4378__auto__","__meta","this__4375__auto__","__hash","this__4384__auto__","cljs.core/count","this__4376__auto__","h__4238__auto__","coll__4377__auto__","cljs.core/hash-unordered-coll","this75571","other75572","cljs.core._EQ_","this__4389__auto__","k__4390__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4387__auto__","k__4388__auto__","pred__75635","cljs.core/keyword-identical?","expr__75636","cljs.core.assoc","this__4392__auto__","cljs.core/seq","cljs.core/MapEntry","this__4379__auto__","this__4385__auto__","entry__4386__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","shadow.remote.runtime.obj-support/Reference","this__4423__auto__","cljs.core/List","writer__4424__auto__","cljs.core/-write","G__75573","extmap__4419__auto__","G__75646","cljs.core/record?","shadow.remote.runtime.obj-support/->Reference","shadow.remote.runtime.obj-support/map->Reference","shadow.remote.runtime.obj-support/obj-ref","shadow.remote.runtime.obj-support/obj-ref?","result","shadow.remote.runtime.obj-support/now","js/Date.now","shadow.remote.runtime.obj-support/next-oid","cljs.core/random-uuid","shadow.remote.runtime.obj-support/register*","state","oid","obj-info","ts","obj-entry","cljs.core/assoc-in","shadow.remote.runtime.obj-support/obj-type-string","cljs.core.pr_str","cljs.core/type","js/shadow","js/shadow.remote","js/shadow.remote.runtime","js/shadow.remote.runtime.obj-support","js/shadow.remote.runtime.obj-support.make-view","method-table__4619__auto__","cljs.core.atom","prefer-table__4620__auto__","method-cache__4621__auto__","cached-hierarchy__4622__auto__","hierarchy__4623__auto__","fexpr__75656","cljs.core/MultiFn","cljs.core.symbol","shadow.remote.runtime.obj-support/make-view","p__75657","map__75658","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","state-ref","view-type","msg","entry","shadow.remote.runtime.obj-support/default-max-print-size","p__75660","map__75661","shadow.remote.runtime.obj-support/as-edn","data","limit","lw","shadow.remote.runtime.writer/limit-writer","cljs.core/pr-writer","cljs.core/pr-opts","shadow.remote.runtime.writer/get-string","p__75664","map__75665","shadow.remote.runtime.obj-support/as-pprint","cljs.pprint.pprint","p__75668","map__75669","shadow.remote.runtime.obj-support/as-edn-limit","shadow.remote.runtime.writer/pr-str-limit","shadow.remote.runtime.obj-support/as-str","shadow.remote.runtime.obj-support/as-ex-str","ex","js/Error","cljs.repl/error->str","cljs.core/second","shadow.remote.runtime.obj-support/exception?","x","shadow.remote.runtime.obj-support/attempt-to-sort","desc","coll","e75675","cljs.core/vec","cljs.core.sort","e","p__75676","map__75677","shadow.remote.runtime.obj-support/browseable-kv","view-order","p__75680","map__75681","idx","key","val","nav","clojure.datafy/nav","p__75683","map__75685","start","num","key-limit","val-limit","end","x__4217__auto__","y__4218__auto__","idxs","cljs.core.range","fragment","m","e75688","e75689","p__75694","map__75695","shadow.remote.runtime.obj-support/browseable-vec","p__75697","map__75698","p__75703","map__75704","p__75710","map__75711","shadow.remote.runtime.obj-support/browseable-seq","p__75719","map__75720","p__75722","map__75723","p__75725","map__75726","shadow.remote.runtime.obj-support/pageable-seq","seq-state-ref","p__75728","map__75729","cljs.core/deref","p__75731","map__75733","map__75735","vec__75736","tail","realized","seq-state","missing","next","cljs.core/first","cljs.core/rest","cljs.core.conj","cljs.core.swap_BANG_","cljs.core/assoc","p__75746","map__75747","shadow.remote.runtime.obj-support/inspect-basic","opts","e75749","cljs.core.update","cljs.core/merge","cljs.core/boolean?","cljs.core/Symbol","cljs.core/map?","cljs.core/keys","cljs.core/set?","cljs.core/list?","cljs.core/seq?","shadow.remote.runtime.obj-support/inspect-type-info","shadow.remote.runtime.obj-support/inspect-source-info","cljs.core/select-keys","p__75753","map__75754","shadow.remote.runtime.obj-support/add-summary-op","summary","shadow.remote.runtime.obj-support/default-describe","o","clojure.datafy/datafy","p1__75756#","p1__75757#","p1__75758#","G__75761","cljs.core/coll?","p1__75759#","p1__75760#","goog.object/set","shadow.remote.runtime.api/Inspectable","shadow.remote.runtime.api/describe","p__75762","map__75763","shadow.remote.runtime.obj-support/add-supports","handlers","cljs.core/set","p__75768","map__75769","shadow.remote.runtime.obj-support/ensure-descriptor","p__75773","map__75774","shadow.remote.runtime.obj-support/get-tap-history","svc","cljs.core/vals","p1__75771#","cljs.core.filter","cljs.core.get_in","p1__75772#","cljs.core.sort_by","cljs.core/reverse","cljs.core.take","cljs.core.map","p__75776","map__75777","shadow.remote.runtime.obj-support/obj-describe*","cljs.core/update-in","p__75779","p__75780","map__75781","map__75782","shadow.remote.runtime.obj-support/obj-describe","runtime","temp__5733__auto__","shadow.remote.runtime.shared/reply","p__75788","p__75789","map__75790","map__75791","shadow.remote.runtime.obj-support/obj-request","this","request-op","request-fn","cljs.core/not","e75794","new-oid","new-entry","reply-msg","G__75798","js/console.warn","G__75795","G__75796","G__75797","shadow.remote.runtime.obj-support/register","p__75799","p__75800","map__75801","map__75802","shadow.remote.runtime.obj-support/obj-forget","cljs.core/update","cljs.core/dissoc","p__75805","map__75806","shadow.remote.runtime.obj-support/obj-forget-all","shadow.remote.runtime.obj-support/basic-gc!","objs-to-drop","cljs.core.drop","shadow.remote.runtime.obj-support/start","p1__75808#","p1__75809#","p1__75810#","p1__75811#","shadow.remote.runtime.api/add-extension","p__75812","map__75813","cljs.core.merge","p__75815","map__75816","shadow.remote.runtime.obj-support/get-ref","obj-id","p__75818","map__75819","shadow.remote.runtime.obj-support/stop","shadow.remote.runtime.api/del-extension"],"sourcesContent":["(ns shadow.remote.runtime.obj-support\n  (:require\n    [clojure.datafy :as d]\n    [clojure.pprint :refer (pprint)]\n    [clojure.spec.alpha :as spec]\n    [shadow.remote.runtime.api :as p]\n    [shadow.remote.runtime.shared :as shared]\n    [shadow.remote.runtime.writer :as lw]\n    ;; FIXME: I do not like importing these here\n    ;; need to extract shadow-cljs functions if I ever move shadow.remote out\n    ;; cljs.repl has way too much other stuff on the CLJ side not error related we don't really need here\n    ;; should just have one namespace only concerned with formatting errors\n    ;; maybe even as separate plugin\n    #?@(:clj [[shadow.cljs.devtools.errors :refer (error-format)]\n              [shadow.jvm-log]]\n        :cljs [[cljs.repl :refer (error->str)]]))\n  #?(:clj (:import [java.util UUID])))\n\n(defrecord Reference [obj])\n\n(defn obj-ref [obj]\n  (when (some? obj)\n    (Reference. obj)))\n\n(defn obj-ref? [result]\n  (instance? Reference result))\n\n(defn now []\n  #?(:clj\n     (System/currentTimeMillis)\n     :cljs\n     (js/Date.now)))\n\n(defn next-oid []\n  #?(:clj\n     (str (UUID/randomUUID))\n     :cljs\n     (str (random-uuid))))\n\n(defn register*\n  [state oid obj obj-info]\n\n  (let [ts (now)\n\n        obj-entry\n        {:oid oid\n         :obj obj\n         ;; tracking that for GC purposes\n         :access-at ts\n         :obj-info (assoc obj-info :added-at ts)}]\n\n    (assoc-in state [:objects oid] obj-entry)))\n\n(declare register)\n\n(defn obj-type-string [obj]\n  (if (nil? obj)\n    \"nil\"\n    #?(:clj\n       (-> (class obj) (.getName))\n       :cljs\n       (pr-str (type obj)))))\n\n(defmulti make-view\n  (fn [state-ref {:keys [view-type] :as msg} entry]\n    view-type))\n\n;; 1meg?\n(def default-max-print-size (* 1 1024 1024))\n\n(defn as-edn\n  [data {:keys [limit] :or {limit default-max-print-size} :as msg}]\n  (let [lw (lw/limit-writer limit)]\n    #?(:clj\n       (print-method data lw)\n       :cljs\n       (pr-writer data lw (pr-opts)))\n    (lw/get-string lw)))\n\n(defn as-pprint\n  [data {:keys [limit] :or {limit default-max-print-size} :as msg}]\n  ;; CLJ pprint for some reason doesn't run out of memory when printing circular stuff\n  ;; but it never finishes either\n  (let [lw (lw/limit-writer limit)]\n    (pprint data lw)\n    (lw/get-string lw)))\n\n(defn as-edn-limit\n  [data {:keys [limit] :as msg}]\n  (lw/pr-str-limit data limit))\n\n;; FIXME: should likely support limit options\n(defn as-str\n  [data msg]\n  (str data))\n\n(defn as-ex-str [ex msg]\n  #?(:cljs\n     (if (instance? js/Error ex)\n       (error->str ex)\n       (str \"Execution error:\\n\"\n            ;; can be any object, really no hope in making this any kind of readable\n            ;; capping it so throwing something large doesn't blow up the REPL\n            \"  \" (second (lw/pr-str-limit ex 200)) \"\\n\"\n            \"\\n\"))\n\n     :clj\n     (error-format ex)))\n\n(defn exception? [x]\n  #?(:clj (instance? java.lang.Throwable x)\n     ;; everything can be thrown in JS\n     ;; (throw \"x\")\n     ;; (throw (js/Promise.resolved \"x\"))\n     :cljs true ;; (instance? js/Error x)\n     ))\n\n(defn attempt-to-sort [desc coll]\n  (try\n    (-> desc\n        (assoc :view-order (vec (sort coll)))\n        (assoc-in [:summary :sorted] true))\n    (catch #?(:clj Exception :cljs :default) e\n      (-> desc\n          (assoc :view-order (vec coll))\n          (assoc-in [:summary :sorted] false)))))\n\n(defn browseable-kv [{:keys [view-order data] :as desc}]\n  (-> desc\n      (assoc-in [:handlers :nav]\n        (fn [{:keys [idx]}]\n          (let [key (nth view-order idx)\n                val (get data key)\n                nav (d/nav data key val)]\n            (obj-ref nav))))\n      (assoc-in [:handlers :fragment]\n        (fn [{:keys [start num key-limit val-limit]\n              :or {key-limit 100\n                   val-limit 100}\n              :as msg}]\n\n          (let [end (min (count view-order) (+ start num))\n                idxs (range start end)\n                fragment\n                (reduce\n                  (fn [m idx]\n                    (let [key (nth view-order idx)\n                          val (get data key)]\n                      (assoc m idx {:key (try\n                                           (lw/pr-str-limit key key-limit)\n                                           (catch #?(:clj Exception :cljs :default) e\n                                             [true \"... print failed ...\"]))\n                                    :val (try\n                                           (lw/pr-str-limit val val-limit)\n                                           (catch #?(:clj Exception :cljs :default) e\n                                             [true \"... print failed ...\"]))})))\n                  {}\n                  idxs)]\n\n            fragment)))))\n\n(defn browseable-vec [{:keys [data] :as desc}]\n  (-> desc\n      (assoc-in [:handlers :nav]\n        (fn [{:keys [idx]}]\n          (let [val (nth data idx)\n                nav (d/nav data idx val)]\n            (obj-ref nav))))\n      (assoc-in [:handlers :fragment]\n        (fn [{:keys [start num val-limit]\n              :or {val-limit 100}\n              :as msg}]\n\n          (let [end (min (count data) (+ start num))\n                idxs (range start end)\n                fragment\n                (reduce\n                  (fn [m idx]\n                    (let [val (nth data idx)]\n                      (assoc m idx {:val (lw/pr-str-limit val val-limit)})))\n                  {}\n                  idxs)]\n\n            fragment)))))\n\n(defn browseable-seq [{:keys [data view-order] :as desc}]\n  (-> desc\n      (assoc-in [:handlers :nav]\n        (fn [{:keys [idx]}]\n          (let [val (nth view-order idx)\n                nav (d/nav data idx val)]\n            (obj-ref nav))))\n      (assoc-in [:handlers :fragment]\n        (fn [{:keys [start num val-limit]\n              :or {val-limit 100}\n              :as msg}]\n\n          (let [end (min (count view-order) (+ start num))\n                idxs (range start end)\n                fragment\n                (reduce\n                  (fn [m idx]\n                    (let [val (nth view-order idx)]\n                      (assoc m idx {:val (lw/pr-str-limit val val-limit)})))\n                  {}\n                  idxs)]\n\n            fragment)))))\n\n(defn pageable-seq [{:keys [data] :as desc}]\n  ;; data is always beginning of seq\n  (let [seq-state-ref\n        (atom {:tail data ;; track where we are at\n               :realized []})]\n    (-> desc\n        (assoc :seq-state-ref seq-state-ref)\n        (assoc-in [:handlers :nav]\n          (fn [{:keys [idx]}]\n            ;; FIXME: should validate that idx is actually realized\n            (let [val (nth (:realized @seq-state-ref) idx)\n                  ;; FIXME: not sure there are many cases where lazy seqs actually have nav?\n                  nav (d/nav data idx val)]\n              (obj-ref nav))))\n        (assoc-in [:handlers :chunk]\n          (fn [{:keys [start num val-limit]\n                :or {val-limit 100}\n                :as msg}]\n\n            ;; need locking otherwise threads may realize more than once\n            ;; shouldn't be much of an issue but better be safe\n            (locking seq-state-ref\n              (let [{:keys [tail realized] :as seq-state} @seq-state-ref\n\n                    end (+ start num)\n                    missing (- end (count realized))\n\n                    [tail realized]\n                    (loop [tail tail\n                           realized realized\n                           missing missing]\n                      (if-not (pos? missing)\n                        [tail realized]\n                        (let [next (first tail)]\n                          (if (nil? next)\n                            [nil realized]\n                            (recur (rest tail) (conj realized next) (dec missing))))))\n\n                    idxs (range start (min end (count realized)))\n                    fragment\n                    (reduce\n                      (fn [m idx]\n                        (let [val (nth realized idx)]\n                          (assoc m idx {:val (lw/pr-str-limit val val-limit)})))\n                      {}\n                      idxs)]\n\n                (swap! seq-state-ref assoc :tail tail :realized realized)\n\n                {:start start\n                 :realized (count realized)\n                 :fragment fragment\n                 :more? (or (> (count realized) end) (some? tail))})))))))\n\n(comment\n  (def x (pageable-seq {:data (map (fn [x] (prn [:realize x]) x) (range 10))}))\n\n  (let [chunk (get-in x [:handlers :chunk])]\n    (chunk {:start 0 :num 5})\n    )\n\n  (let [chunk (get-in x [:handlers :chunk])]\n    (chunk {:start 5 :num 10})\n    ))\n\n(defn inspect-basic [{:keys [data] :as desc} obj opts]\n  (try\n    (cond\n      (nil? data)\n      (assoc-in desc [:summary :data-type] :nil)\n\n      (string? data)\n      (-> desc\n          (update :summary merge {:data-type :string\n                                  :length (count data)})\n          ;; FIXME: substring support?\n          (assoc-in [:handlers :get-value] (fn [msg] data)))\n\n      (boolean? data)\n      (-> desc\n          (assoc-in [:summary :data-type] :boolean)\n          (assoc-in [:handlers :get-value] (fn [msg] data)))\n\n      (number? data)\n      (-> desc\n          (assoc-in [:summary :data-type] :number)\n          (assoc-in [:handlers :get-value] (fn [msg] data)))\n\n      (keyword? data)\n      (-> desc\n          (assoc-in [:summary :data-type] :keyword)\n          (assoc-in [:handlers :get-value] (fn [msg] data)))\n\n      (symbol? data)\n      (-> desc\n          (assoc-in [:summary :data-type] :symbol)\n          (assoc-in [:handlers :get-value] (fn [msg] data)))\n\n      (map? data)\n      (-> desc\n          (update :summary merge {:data-type :map\n                                  :entries (count data)})\n          (attempt-to-sort (keys data))\n          (browseable-kv))\n\n      (vector? data)\n      (-> desc\n          (update :summary merge {:data-type :vec\n                                  :entries (count data)})\n          (browseable-vec))\n\n      (set? data)\n      (-> desc\n          (update :summary merge {:data-type :set\n                                  :entries (count data)})\n          (attempt-to-sort data)\n          (browseable-seq))\n\n      (list? data)\n      (-> desc\n          (update :summary merge {:data-type :list\n                                  :entries (count data)})\n          (assoc :view-order (vec data))\n          (browseable-seq))\n\n      ;; lazy seqs\n      (seq? data)\n      (-> desc\n          (update :summary merge {:data-type :lazy-seq})\n          (pageable-seq))\n\n      ;; FIXME: records?\n\n      :else\n      (assoc-in desc [:summary :data-type] :unsupported))\n\n    (catch #?(:cljs :default :clj Exception) e\n      (assoc-in desc [:summary :data-type] :unsupported))))\n\n(defn inspect-type-info [desc obj opts]\n  (assoc-in desc [:summary :obj-type] (obj-type-string obj)))\n\n(defn inspect-source-info [desc obj opts]\n  (update desc :summary merge (select-keys opts [:ns :line :column :label])))\n\n(defn add-summary-op [{:keys [summary] :as desc}]\n  (assoc-in desc [:handlers :summary] (fn [msg] summary)))\n\n(defn default-describe [o opts]\n  (let [data (d/datafy o)]\n\n    (-> {:data data\n         :summary\n         {:added-at (:added-at opts)\n          :datafied (not (identical? data o))}\n\n         ;; FIXME: should these work on the datafy result or the original?\n         ;; maybe different ops? maybe msg option?\n         :handlers\n         (-> {:str #(as-str o %)\n              ;; FIXME: only do those for actual clojure vals?\n              :edn #(as-edn o %)\n              :edn-limit #(as-edn-limit o %)}\n             (cond->\n               (or (coll? o) (seq? o))\n               (assoc :pprint #(as-pprint o %))\n\n               (exception? o)\n               (assoc :ex-str #(as-ex-str o %))\n               ))}\n\n        (inspect-basic o opts)\n        (inspect-type-info o opts)\n        (inspect-source-info o opts)\n        (add-summary-op))))\n\n(extend-protocol p/Inspectable\n  #?(:clj Object :cljs default)\n  (describe [o opts]\n    (default-describe o opts))\n\n  nil\n  (describe [o opts]\n    (default-describe o opts)))\n\n(comment\n  (p/describe\n    {:hello \"world\"}\n    {:added-at \"NOW\" :ns \"foo.bar\"}))\n\n;; called after describe so impls don't have to worry about this\n(defn add-supports [{:keys [handlers] :as desc}]\n  (assoc-in desc [:summary :supports] (set (keys handlers))))\n\n;; FIXME: this is running inside swap! which means it can potentially\n;; end up getting executed several times for the same object (in CLJ)\n;; that is not great and should be handled differently\n(defn ensure-descriptor [{:keys [obj obj-info desc] :as entry}]\n  (if desc\n    entry\n    (assoc entry :desc (-> (p/describe obj obj-info)\n                           (add-supports)))))\n\n(defn get-tap-history [{:keys [state-ref] :as svc} num]\n  (->> (:objects @state-ref)\n       (vals)\n       (filter #(= :tap (get-in % [:obj-info :from])))\n       (sort-by #(get-in % [:obj-info :added-at]))\n       (reverse)\n       (take num)\n       (map :oid)\n       (into [])))\n\n(defn obj-describe*\n  [{:keys [state-ref]}\n   oid]\n  (when (contains? (:objects @state-ref) oid)\n    (swap! state-ref update-in [:objects oid] ensure-descriptor)\n    (swap! state-ref assoc-in [:objects oid :access-at] (now))\n    (let [summary (get-in @state-ref [:objects oid :desc :summary])]\n      summary)))\n\n(defn obj-describe\n  [{:keys [runtime] :as svc}\n   {:keys [oid] :as msg}]\n  (if-let [summary (obj-describe* svc oid)]\n    (shared/reply runtime msg {:op :obj-summary\n                               :oid oid\n                               :summary summary})\n    (shared/reply runtime msg {:op :obj-not-found :oid oid})))\n\n(defn obj-request\n  [{:keys [state-ref runtime] :as this}\n   {:keys [oid request-op] :as msg}]\n  (if-not (contains? (:objects @state-ref) oid)\n    (shared/reply runtime msg {:op :obj-not-found :oid oid})\n    (do (swap! state-ref update-in [:objects oid] ensure-descriptor)\n        (swap! state-ref assoc-in [:objects oid :access-at] (now))\n        (let [entry (get-in @state-ref [:objects oid])\n              request-fn (get-in entry [:desc :handlers request-op])]\n          (if-not request-fn\n            (shared/reply runtime msg {:op :obj-request-not-supported\n                                       :oid oid\n                                       :request-op request-op})\n            (try\n              (let [result (request-fn msg)]\n\n                ;; FIXME: add support for generic async results\n                ;; all handlers should already be sync but allow async results\n                (if-not (obj-ref? result)\n                  (shared/reply runtime msg\n                    {:op :obj-result\n                     :oid oid\n                     :result result})\n\n                  (let [new-oid (next-oid)\n                        ts (now)\n\n                        new-entry\n                        {:oid new-oid\n                         :obj (:obj result)\n                         :access-at ts\n                         ;; FIXME: should keep some info on how this ref came to be\n                         :obj-info {:added-at ts\n                                    :added-via oid}}]\n\n                    (swap! state-ref assoc-in [:objects new-oid] new-entry)\n\n                    (let [reply-msg\n                          (-> {:op :obj-result-ref\n                               :oid oid\n                               :ref-oid new-oid}\n                              (cond->\n                                ;; only send new-obj :summary when requested\n                                (:summary msg)\n                                (assoc :summary (obj-describe* this new-oid))))]\n\n                      (shared/reply runtime msg reply-msg)))))\n\n              (catch #?(:clj Exception :cljs :default) e\n                #?(:cljs (js/console.warn \"action-request-action failed\" (:obj entry) e)\n                   :clj (shadow.jvm-log/warn-ex e ::obj-request-failed msg))\n                (shared/reply runtime msg\n                  {:op :obj-request-failed\n                   :oid oid\n                   :msg msg\n                   :ex-oid (register this e {:msg msg})})))))\n        )))\n\n(defn obj-forget\n  [{:keys [state-ref] :as svc}\n   {:keys [oid] :as msg}]\n  (swap! state-ref update :objects dissoc oid))\n\n(defn obj-forget-all\n  [{:keys [state-ref] :as svc}\n   msg]\n  (swap! state-ref assoc :objects {}))\n\n(defn basic-gc! [state]\n  (let [objs-to-drop\n        (->> (:objects state)\n             (vals)\n             (sort-by :access-at)\n             (reverse)\n             (drop 100) ;; FIXME: make configurable\n             (map :oid))]\n\n    (reduce\n      (fn [state oid]\n        (update state :objects dissoc oid))\n      state\n      objs-to-drop)))\n\n(defn start [runtime]\n  (let [state-ref (atom {:objects {}\n                         :id-seq-ref 0})\n\n        svc\n        {:runtime runtime\n         :state-ref state-ref}]\n\n    (p/add-extension runtime\n      ::ext\n      {:ops {:obj-describe #(obj-describe svc %)\n             :obj-request #(obj-request svc %)\n             :obj-forget #(obj-forget svc %)\n             :obj-forget-all #(obj-forget-all svc %)}\n       :on-idle #(swap! state-ref basic-gc!)})\n\n    svc))\n\n(defn register [{:keys [state-ref] :as svc} obj obj-info]\n  (let [oid (next-oid)]\n    (if-not (and (vector? obj) (= :shadow.remote/wrap (first obj)) (= (count obj) 3))\n      (swap! state-ref register* oid obj obj-info)\n      (swap! state-ref register* oid (nth obj 1) (merge obj-info (nth obj 2))))\n    oid))\n\n(defn get-ref [{:keys [state-ref]} obj-id]\n  (get-in @state-ref [:objects obj-id]))\n\n(defn stop [{:keys [runtime]}]\n  (p/del-extension runtime ::ext))\n\n(comment\n  (def obj-support (:clj-runtime-obj-support (shadow.cljs.devtools.server.runtime/get-instance)))\n  (swap! (:state-ref obj-support) assoc :objects {})\n  )"]}