{"version":3,"sources":["behumen/handlers/events.cljs"],"mappings":";AAUA,AAAA,AAACA,AAEA,AAAAC,AAAKG;AAAL,AAAA,AAAAF,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAASG;AAAT,AAAAF,AAAAD,AAAA,AAAA,AAAWI;AAAX,AACE,AAAI,AAAA,AAAMA;AACR,AAAA,AAACC,AAAOH;;AACR,AAAA,AAACI,AAAMJ,AAAsBE;;;AAGlC,AAAA,AAACN,AAEC,AAAKK,AAAEA;AAAP,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;AAMF,AAAA,AAACL,AAEA,AAAAS,AAAKL;AAAL,AAAA,AAAAM,AAAAD;AAAA,AAAAN,AAAAO,AAAA,AAAA,AAASL;AAAT,AAAAF,AAAAO,AAAA,AAAA,AAAWC;AAAX,AAAAR,AAAAO,AAAA,AAAA,AAA2BE;AAA3B,AACE,AAAMC,AAAO,AAAA,AAAI,AAACC,AAAQH,AACXA,AACCA;AAFhB,AAIE,AAACI,AAASX,AAAGS,AAAOD;;AAEzB,AAAA,AAACZ,AAEA,AAAAgB,AAAKZ;AAAL,AAAA,AAAAa,AAAAD;AAAA,AAAAb,AAAAc,AAAA,AAAA,AAASC;AAAT,AAAAf,AAAAc,AAAA,AAAA,AAAmBE;AAAnB,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAACE,AAASlB,AAAUc,AACT,AAAA,AAACK,AACUJ;AAFtB,AAGmB,AAAA,AAAAC,AAACI;AAHpB,AAAA,AAAAH;AAAA,AAImB,AAAA,AAAAA,AAACG","names":["re_frame.core.reg_event_db","p__69550","vec__69551","cljs.core.nth","db","_","type","cljs.core.dissoc","cljs.core.assoc","p__69554","vec__69555","original-db-key","value","db-key","cljs.core/vector?","cljs.core/assoc-in","p__69560","vec__69561","event-key","email","p1__69558#","p1__69559#","behumen.ajax.ajax","behumen.common/generate-url","js/console.log"],"sourcesContent":["(ns behumen.handlers.events\n  (:require\n    [re-frame.core :as rf :refer [dispatch dispatch-sync\n                                  reg-event-db subscribe]]\n    [rams-ui.util :refer [get-db-value set-db-value]]\n    [behumen.common :as common]\n    [behumen.utils :refer [save-local-item get-local-item remove-local-item]]\n    [behumen.routes :refer [get-route-by-name]]\n    [behumen.ajax :refer [ajax]]))\n\n(reg-event-db\n :set-current-page-type\n (fn [db [_ type]]\n   (if (nil? type)\n     (dissoc db :current-page-type)\n     (assoc db :current-page-type type))))\n\n\n(reg-event-db\n  :initialize-db\n  (fn [_ _]\n    {:current-page-type :login \n     :user {}\n     :temp-data {}\n     :open? {:early-access-modal false}}))\n\n(reg-event-db\n :set-db-item\n (fn [db [_ original-db-key value]]\n   (let [db-key (if (vector? original-db-key)\n                  original-db-key\n                  [original-db-key])]\n     ;(dispatch [:clear-and-set-locking-mechanisim])\n     (assoc-in db db-key value))))\n\n(reg-event-db\n :save-email\n (fn [db [event-key email]]\n   (ajax :db db :event event-key\n         :url (common/generate-url :save-email) :method :post\n         :params {:email email}\n         :on-success #(js/console.log \"response: \" %)\n         :in-failure #(js/console.log \"failure: \" %))))\n"]}