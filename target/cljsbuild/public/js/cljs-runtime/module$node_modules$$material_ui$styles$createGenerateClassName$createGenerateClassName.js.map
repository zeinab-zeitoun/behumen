{
"version":3,
"file":"module$node_modules$$material_ui$styles$createGenerateClassName$createGenerateClassName.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,wFAAA,CAA4G,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAGhJC,MAAAA,CAAyBH,OAAA,CAAQ,kEAAR,CAE7BI,OAAAC,eAAA,CAAsBH,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CI,MAAO,CAAA,CADoC,CAA7C,CAGAJ,QAAAK,QAAA,CAoBAC,QAAgC,EAAG,CACjC,IAAIC,QAA6B,CAAnB,CAAAC,SAAAC,OAAA,EAAyCC,IAAAA,EAAzC,GAAwBF,SAAA,CAAU,CAAV,CAAxB,CAAqDA,SAAA,CAAU,CAAV,CAArD,CAAoE,EAAlF,CACIG,sBAAwBJ,OAAAK,cAD5B,CAEIA,cAA0C,IAAK,EAA/B,GAAAD,qBAAA,CAAmC,CAAA,CAAnC,CAA2CA,qBAG3DE,QAAAA,CAAgBN,OAAAO,KAJpB;IAKIA,KAAyB,IAAK,EAAvB,GAAAD,OAAA,CAA2B,EAA3B,CAAgCA,OAL3C,CAMIE,WAAsB,EAAT,GAAAD,IAAA,CAAc,EAAd,CAAmB,EAAAE,OAAA,CAAUF,IAAV,CAAgB,GAAhB,CANpC,CAOIG,YAAc,CAPlB,CASIC,iBAAmBA,QAAyB,EAAG,CACjDD,WAAA,EAAe,CAGM,KAAnB,EAAIA,WAAJ,EACEE,OAAAC,KAAA,CAA4D,8FAA5D,CAIJ,OAAOH,YAT0C,CAYnD,OAAO,SAAS,CAACI,IAAD,CAAOC,UAAP,CAAmB,CACjC,IAAIC,KAAOD,UAAAf,QAAAgB,KAEX,IAAIA,IAAJ,EAAoC,CAApC,GAAYA,IAAAC,QAAA,CAAa,KAAb,CAAZ,EAAyC,CAACF,UAAAf,QAAAkB,KAA1C,EAAqE,CAACb,aAAtE,CAAqF,CAEnF,GAAwC,EAAxC,GAAIc,aAAAF,QAAA,CAAsBH,IAAAM,IAAtB,CAAJ,CACE,MAAO,MAAAX,OAAA,CAAcK,IAAAM,IAAd,CAGLC,KAAAA;AAAS,EAAAZ,OAAA,CAAUD,UAAV,CAAAC,OAAA,CAA6BO,IAA7B,CAAmC,GAAnC,CAAAP,OAAA,CAA+CK,IAAAM,IAA/C,CAEb,OAAKL,WAAAf,QAAAsB,MAAA,CAAyBC,OAAAzB,QAAzB,CAAL,EAA2D,EAA3D,GAAkDS,IAAlD,CAIO,EAAAE,OAAA,CAAUY,IAAV,CAAkB,GAAlB,CAAAZ,OAAA,CAA8BE,gBAAA,EAA9B,CAJP,CACSU,IAT0E,CAmBjFG,IAAAA,CAAS,EAAAf,OAAA,CAAUK,IAAAM,IAAV,CAAoB,GAApB,CAAAX,OAAA,CAAgCE,gBAAA,EAAhC,CAEb,OAAII,WAAAf,QAAAyB,gBAAJ,CACS,EAAAhB,OAAA,CAAUD,UAAV,CAAAC,OAAA,CAA6BM,UAAAf,QAAAyB,gBAA7B,CAAiE,GAAjE,CAAAhB,OAAA,CAA6Ee,IAA7E,CADT,CAIO,EAAAf,OAAA,CAAUD,UAAV,CAAAC,OAAA,CAA6Be,IAA7B,CA5B0B,CAvBF,CAlBnC,KAAID,QAAU7B,MAAA,CAAuBH,OAAA,CAAQ,8DAAR,CAAvB,CAAd,CAWI4B,cAAgB,wEAAA,MAAA,CAAA,GAAA,CArBgI;",
"sources":["node_modules/@material-ui/styles/createGenerateClassName/createGenerateClassName.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$material_ui$styles$createGenerateClassName$createGenerateClassName\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createGenerateClassName;\n\nvar _nested = _interopRequireDefault(require(\"../ThemeProvider/nested\"));\n\n/**\n * This is the list of the style rule name we use as drop in replacement for the built-in\n * pseudo classes (:checked, :disabled, :focused, etc.).\n *\n * Why do they exist in the first place?\n * These classes are used at a specificity of 2.\n * It allows them to override previously definied styles as well as\n * being untouched by simple user overrides.\n */\nvar pseudoClasses = ['checked', 'disabled', 'error', 'focused', 'focusVisible', 'required', 'expanded', 'selected']; // Returns a function which generates unique class names based on counters.\n// When new generator function is created, rule counter is reset.\n// We need to reset the rule counter for SSR for each request.\n//\n// It's inspired by\n// https://github.com/cssinjs/jss/blob/4e6a05dd3f7b6572fdd3ab216861d9e446c20331/src/utils/createGenerateClassName.js\n\nfunction createGenerateClassName() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _options$disableGloba = options.disableGlobal,\n      disableGlobal = _options$disableGloba === void 0 ? false : _options$disableGloba,\n      _options$productionPr = options.productionPrefix,\n      productionPrefix = _options$productionPr === void 0 ? 'jss' : _options$productionPr,\n      _options$seed = options.seed,\n      seed = _options$seed === void 0 ? '' : _options$seed;\n  var seedPrefix = seed === '' ? '' : \"\".concat(seed, \"-\");\n  var ruleCounter = 0;\n\n  var getNextCounterId = function getNextCounterId() {\n    ruleCounter += 1;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (ruleCounter >= 1e10) {\n        console.warn(['Material-UI: You might have a memory leak.', 'The ruleCounter is not supposed to grow that much.'].join(''));\n      }\n    }\n\n    return ruleCounter;\n  };\n\n  return function (rule, styleSheet) {\n    var name = styleSheet.options.name; // Is a global static MUI style?\n\n    if (name && name.indexOf('Mui') === 0 && !styleSheet.options.link && !disableGlobal) {\n      // We can use a shorthand class name, we never use the keys to style the components.\n      if (pseudoClasses.indexOf(rule.key) !== -1) {\n        return \"Mui-\".concat(rule.key);\n      }\n\n      var prefix = \"\".concat(seedPrefix).concat(name, \"-\").concat(rule.key);\n\n      if (!styleSheet.options.theme[_nested.default] || seed !== '') {\n        return prefix;\n      }\n\n      return \"\".concat(prefix, \"-\").concat(getNextCounterId());\n    }\n\n    if (process.env.NODE_ENV === 'production') {\n      return \"\".concat(seedPrefix).concat(productionPrefix).concat(getNextCounterId());\n    }\n\n    var suffix = \"\".concat(rule.key, \"-\").concat(getNextCounterId()); // Help with debuggability.\n\n    if (styleSheet.options.classNamePrefix) {\n      return \"\".concat(seedPrefix).concat(styleSheet.options.classNamePrefix, \"-\").concat(suffix);\n    }\n\n    return \"\".concat(seedPrefix).concat(suffix);\n  };\n}\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","Object","defineProperty","value","default","createGenerateClassName","options","arguments","length","undefined","_options$disableGloba","disableGlobal","_options$seed","seed","seedPrefix","concat","ruleCounter","getNextCounterId","console","warn","rule","styleSheet","name","indexOf","link","pseudoClasses","key","prefix","theme","_nested","suffix","classNamePrefix"]
}
