{"version":3,"sources":["rams_ui/components/input.cljs"],"mappings":"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","names":["rams-ui.components.input/mui-text-field","reagent_material_ui.util.adapt_react_class","or__4126__auto__","js/module$node_modules$$material_ui$core$esm$TextField$index","rams-ui.components.input/use-styles","reagent_material_ui.styles.make_styles","theme","fexpr__65977","fexpr__65978","p__65979","map__65980","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","rams-ui.components.input/number-format-component","id","prefix","suffix","decimal-points","fixed-decimal-points?","decimal-separator","thousand-separator","display-type","value","is-numeric-string?","format","mask","on-change","allow-leading-zeros?","config","state","rams-ui.util/get-value","cljs.core.atom","js/module$node_modules$react_number_format$dist$react_number_format_cjs","cljs.core.merge","cljs.core.dissoc","cljs.core.assoc","cljs.core/deref","val","cljs.core/fn?","p__65982","map__65983","rams-ui.components.input/generic-field","label","variant","disabled?","help-text","error?","required?","read-only?","type","multiline?","formatting","color","placeholder","full-width?","size","persistent?","model","on-focus","on-blur","rows","max-rows","classes","uuid","rams-ui.util/gen-uuid","rams_ui.util.get_value","error-state","rams_ui.util.get_error","rams-ui.util/rendering-id","p__65985","map__65986","styles","reagent-material-ui.core.form-control/form-control","clojure.string.join","cljs.core/not","reagent-material-ui.core.input-label/input-label","G__65988","reagent-material-ui.core.filled-input/filled-input","reagent-material-ui.core.outlined-input/outlined-input","reagent-material-ui.core.input/input","props","interim","cljs.core.js__GT_clj","reagent.core.as_element","values","rams_ui.util.set_value","and__4115__auto__","cljs.core._EQ_","cljs.core/count","rams_ui.util.set_error","reagent-material-ui.core.input-adornment/input-adornment","evt","cljs.core.not_EQ_","reagent-material-ui.core.form-helper-text/form-helper-text","p__65989","map__65990","rams-ui.components.input/formatted-text","p__65992","map__65993","rams-ui.components.input/editor","labe","reagent-material-ui.core.box/box","p__65995","map__65996","rams-ui.components.input/text-field","p__65998","map__65999","rams-ui.components.input/number-field","p__66001","map__66002","rams-ui.components.input/credit-card-field","p__66004","map__66005","rams-ui.components.input/month-year-field","p__66007","map__66008","rams-ui.components.input/password-field","hide-after-ms","only-peek?","reagent.core.atom","p__66010","map__66011","reagent-material-ui.core.icon-button/icon-button","cljs.core/reset!","js/window","reagent-material-ui.icons.visibility-off/visibility-off","reagent-material-ui.icons.visibility/visibility","p__66014","map__66015","rams-ui.components.input/date-field","disabled-days","allow-keyboard?","min-date","max-date","dialog?","date-utils","js/module$node_modules$$date_io$date_fns$build$index","p__66017","map__66018","G__66020","reagent-material-ui.pickers.mui-pickers-utils-provider/mui-pickers-utils-provider","G__66021","reagent-material-ui.pickers.keyboard-date-time-picker/keyboard-date-time-picker","reagent-material-ui.pickers.keyboard-time-picker/keyboard-time-picker","reagent-material-ui.pickers.keyboard-date-picker/keyboard-date-picker","G__66022","reagent-material-ui.pickers.date-time-picker/date-time-picker","reagent-material-ui.pickers.time-picker/time-picker","reagent-material-ui.pickers.date-picker/date-picker","rams-ui.util/set-value","err","rams-ui.util/set-error","p1__66013#","cljs.core/some","p__66024","map__66025","rams-ui.components.input/calendar-field","default-value","orientation","disable-toolbar?","badged-days","p__66027","map__66028","vec__66030","cljs.core.nth","on-state-change","js/module$node_modules$react$index.useState","day","_","elem","badge-config","reagent-material-ui.core.badge/badge","cljs.core/map?","p1__66023#","p__66036","map__66037","rams-ui.components.input/select-field","options","get-option-label","render-option","allow-new?","on-add","allow-add?","group-by-fn","option-disabled-fn","multiple?","limit","width","loading-state","rams_ui.util.get_loading","temp","p__66039","map__66040","reagent-material-ui.lab.autocomplete/autocomplete","cljs.core/clj->js","new-val","result","seq__66042","cljs.core/seq","chunk__66043","count__66044","i__66045","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/first","cljs.core/next","selected-hash","seq__66046","chunk__66047","count__66048","i__66049","cljs.core/hash","iter__4529__auto__","s__66051","cljs.core/LazySeq","c__4527__auto__","size__4528__auto__","b__66053","cljs.core/chunk-buffer","i__66052","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__66050","cljs.core/cons","cljs.core/rest","p1__66033#","cljs.core.map","cljs.core/empty?","cljs.core/last","G__66054","params","reagent-material-ui.core.text-field/text-field","cljs.core/assoc-in","cljs.core.get_in","cljs.core/boolean","option","clj-option","opt","hashed","cljs.core/contains?","rams-ui.components.selector/checkbox","checked?","cljs.core.conj","p1__66034#","cljs.core.remove","p1__66035#"],"sourcesContent":["(ns rams-ui.components.input\n  (:require [reagent.core :as r]\n            [react :as react]\n            [re-frame.core :refer [dispatch subscribe reg-event-db reg-sub]]\n            [clojure.string :as cstr]\n            [reagent-material-ui.util :as mi-util]\n\n            [rams-ui.util :refer [gen-uuid rendering-id\n                                  set-value get-value\n                                  set-error get-error\n                                  get-loading]]\n            [rams-ui.components.list :refer [items-list set-selected-item]]\n            [rams-ui.components.selector :refer [checkbox]]\n            [\"react-number-format\" :as number-format]\n            [\"@date-io/date-fns\" :as date-fns]\n            [\"@material-ui/core/TextField\" :as MuiTextField]\n            [reagent-material-ui.pickers.mui-pickers-utils-provider :refer [mui-pickers-utils-provider]]\n            [reagent-material-ui.pickers.keyboard-date-picker :refer [keyboard-date-picker]]\n            [reagent-material-ui.pickers.keyboard-date-time-picker :refer [keyboard-date-time-picker]]\n            [reagent-material-ui.pickers.keyboard-time-picker :refer [keyboard-time-picker]]\n            [reagent-material-ui.pickers.date-picker :refer [date-picker]]\n            [reagent-material-ui.pickers.date-time-picker :refer [date-time-picker]]\n            [reagent-material-ui.pickers.time-picker :refer [time-picker]]\n            [reagent-material-ui.styles :refer [make-styles with-styles]]\n            [reagent-material-ui.icons.visibility :refer [visibility]]\n            [reagent-material-ui.icons.visibility-off :refer [visibility-off]]\n            [reagent-material-ui.core.box :refer [box]]\n            [reagent-material-ui.lab.autocomplete :refer [autocomplete]]\n            [reagent-material-ui.core.badge :refer [badge]]\n            [reagent-material-ui.core.text-field :as ctext-field]\n            [reagent-material-ui.core.icon-button :refer [icon-button]]\n            [reagent-material-ui.core.input :refer [input]]\n            [reagent-material-ui.core.filled-input :refer [filled-input]]\n            [reagent-material-ui.core.outlined-input :refer [outlined-input]]\n            [reagent-material-ui.core.input-adornment :refer [input-adornment]]\n            [reagent-material-ui.core.form-helper-text :refer [form-helper-text]]\n            [reagent-material-ui.core.input-label :refer [input-label]]\n            [reagent-material-ui.core.form-control :refer [form-control]]\n            [reagent-material-ui.core.typography :refer [typography]]))\n\n(def ^:private mui-text-field (mi-util/adapt-react-class (or (.-default MuiTextField)\n                                                             (.-TextField MuiTextField))\n                                                 \"mui-text-field\"))\n\n(def use-styles (make-styles\n                  (fn [theme]\n                    {:margin {:margin ((:spacing theme) 1)}\n                     :flex {:display \"inline-flex\"}\n                     :width {:width \"100%\"}\n                     :without-label {:margin ((:spacing theme) 3)}})))\n\n(defn- number-format-component\n  [{:keys [id prefix suffix decimal-points\n           fixed-decimal-points? decimal-separator\n           thousand-separator display-type value\n           is-numeric-string? format mask on-change\n           allow-leading-zeros?] :as config}]\n  (let [state (if id\n                (get-value id)\n                (atom {:value nil}))]\n    [(mi-util/adapt-react-class\n      number-format)\n     (merge (-> config\n                (dissoc :decimal-points)\n                (dissoc :fixed-decimal-points?)\n                (dissoc :is-numeric-string?)\n                (dissoc :on-change)\n                (dissoc :allow-leading-zeros?)\n                (dissoc :inputRef)\n                (assoc :value (:value @state))\n                (assoc :is-numeric-string is-numeric-string?\n                       :allow-leading-zeros allow-leading-zeros?\n                       :decimal-scale decimal-points\n                       :fixed-decimal-scale fixed-decimal-points?\n                       :on-value-change (fn [val]\n                                          (when (fn? on-change)\n                                            (on-change val)))))\n            (when (:inputRef config)\n              {:getInputRef (:inputRef config)}))]))\n\n\n(defn- generic-field\n  [{:keys [id label variant disabled?\n           help-text error? required?\n           read-only? type multiline?\n           prefix suffix formatting\n           color placeholder full-width?\n           size persistent? model\n           on-focus on-blur on-change\n           rows max-rows classes]}]\n  (let [uuid (if id id (gen-uuid))\n        state (get-value uuid :persistent?\n                         persistent?\n                         :model model)\n        error-state (get-error uuid :persistent?\n                               persistent?\n                               :model model)]\n    (rendering-id uuid)\n    (fn [{:keys [label variant disabled? size\n                 help-text error? required?\n                 read-only? type multiline?\n                 prefix suffix formatting\n                 color placeholder full-width?\n                 on-focus on-blur on-change\n                 rows max-rows]}]\n      (let [styles (use-styles)]\n        [form-control (merge {:class-name (cstr/join \" \"\n                                                     [(:margin styles)\n                                                      (when (not label)\n                                                        (:without-label styles))])}\n                             (when full-width?\n                               {:full-width true})\n                             (when required?\n                               {:required required?})\n                             (when variant\n                               {:variant variant})\n                             (when (or error? @error-state)\n                               {:error true}))            \n         (when label\n           [input-label {:class-name (:label classes)\n                         :html-for uuid} label])\n         [(case variant\n            \"filled\" filled-input\n            \"outlined\" outlined-input\n            input)\n          (merge {:id id}\n                 (when formatting\n                   {:input-component (fn [props]\n                                       (let [interim (js->clj props :keywordize-keys true)]\n                                         (r/as-element\n                                          [number-format-component\n                                           (merge interim\n                                                  {:id uuid\n                                                   :on-change  (fn [values]\n                                                                 (let [val (js->clj values\n                                                                                    :keywordize-keys true)]\n                                                                   (set-value uuid val\n                                                                              :persistent? persistent?\n                                                                              :model model)))}\n                                                  formatting)])))})\n                 (when (and label (= variant \"outlined\"))\n                   {:label-width  (* 7.5 (count label)) })\n                 (when (:input classes)\n                      {:class-name (:input classes)})\n                 (when disabled?\n                   {:disabled true})\n                 (when multiline?\n                   (merge {:multiline true}\n                          (when rows\n                            {:rows rows})\n                          (when max-rows\n                            {:max-rows max-rows})))              \n                 (when (or (fn? on-blur)\n                           required?\n                           (fn? on-focus))\n                   {:input-props (merge (when (or required? (fn? on-blur))\n                                          {:on-blur (fn []\n                                                      (when required?\n                                                        (if (or (nil? @state)\n                                                                (= \"\" @state))\n                                                          (set-error uuid true :model model\n                                                                     :persistent? persistent?)\n                                                          (set-error uuid false :model model\n                                                                     :persistent? persistent?)))\n                                                      (when (fn? on-blur)\n                                                        (on-blur)))})\n                                        (when (fn? on-focus)\n                                          {:on-focus (fn []\n                                                       (when (fn? on-focus)\n                                                         (on-focus)))}))})\n                 (when type\n                   {:type type})\n                 (when required?\n                   {:required true})\n                 (when read-only?\n                   {:read-only true})\n                 (when placeholder\n                   {:placeholder placeholder})\n                 \n                 (when prefix\n                   {:start-adornment\n                    (r/as-element\n                     [input-adornment {:position \"start\"}\n                      prefix])})\n                 \n                 (when suffix\n                   {:end-adornment\n                    (r/as-element\n                     [input-adornment {:position \"start\"}\n                      suffix])})\n                 (when (not formatting)\n                   {:on-change (fn [evt]\n                                 (let [val (.-value (.-target evt))]\n                                   (set-value uuid val\n                                              :persistent? persistent?\n                                              :model model)\n                                   (when (fn? on-change)\n                                     (on-change val))))}))]\n         (when (or help-text\n                   (and @error-state\n                        (not= @error-state true)))\n           [form-helper-text (when (:info classes)\n                               {:class-name (:info classes)})\n            (if (and @error-state (not= @error-state true))\n              @error-state\n              help-text)])]))))\n\n(defn formatted-text\n  \"creates a fromatted text based on a specified format. This is most useful when presenting currency or maybe numbers. The attributes are as follows:\n\n  - **:prefix**: an optional string to be presented before the **value**\n  - **:suffix**: an optional string to be presented after the **value**\n  - **:decimal-points**: an optional parameter indicating the number of decimals in a number to be formated\n  - **:fixed-decimal-points?**: an optional boolean indicating if we should pad to get the number of decimal-points\n  - **:thousand-spearator**: an optional character indicating the thousand separator. Default is ,.\n  - **:format**: a required string identifying the string format. The format will only have the # changed according to value so for example\n  ```\n  format: ### ### ,|, ###\n  value: 123456789\n  => result: 123 456 ,|, 789\n  ```\n  - **:allow-leading-zeros?**: is an optional boolean indicating if the value is a number (or numeric string) that is less then the format then it is appended with zeros in the beginning\"\n  [{:keys [prefix suffix decimal-points\n           fixed-decimal-points? decimal-separator\n           thousand-separator\n           is-numeric-string? format\n           allow-leading-zeros?] :as config}\n   value]\n  [number-format-component (assoc config :value value\n                                  :display-type \"string\")])\n\n\n(defn editor\n  [{:keys [id labe disabled? read-only?]}]\n  (let [uuid (if id id (gen-uuid))]\n    (rendering-id uuid)\n    (fn []\n      [box])))\n\n(defn text-field\n  \"creates a react input component that allows text. The attributes are as follows:\n\n  - **:id**: is an optional keyword/string/number/array that uniquely identifies the field. As always you can use set-value to set the value of the field or set-error to set its error\n  - **:label** is an optional string indicating the label of the field. Note taht depending on the variant this field might more or not\n  - **:variant**, **color** , *:size**: Optional parameters that follow the rules sent in [doc](https://material-ui.com/api/form-control/)\n  - **:disabled?**: is an optional boolean indicating that the field is disabled\n  - **:required?**: is an optional  boolean indicating if the field is required or not. Once the field is blurred if the value is empty or nil the field is marked as error\n  - **:full-width?**: is a boolean indicating that the field should take the full width of its parent\n  - **:placeholder**: is an optional string that will appear if no value is given. Note that the normal variant will hide the placeholder with the label until it is focused\n  - **:persistent?**: an optional boolean identifies that the state of the field will carry over from one page to the next\n  - **:model**: is an optional atom that can be given to have the **id** part of. Should only be used if the history is not needed\n  - **:on-focus**: is an optional function that will be called on focus\n  - **:on-blur**: is an optional function that will be called on blur\n  - **:help-text**: is an optional string that will appear under the field. As a help text or as an error if the set-error is not a message\n  - **:multiline?**: is an optional boolean indicating whether the field should allow multiple lines\n  - **:rows**: in case the **:multiline?** is true then this will indicate how many rows to show always\n  - **:max-rows**: in case the **:multiline?** is true then this will indicate max rows before a scroll appears\n  - **:prefix**: an optional string or react component to be presented before the **value**\n  - **:suffix**: an optional string or react component to be presented after the **value**\"\n  [{:keys [id label variant disabled?\n           help-text required?\n           read-only? multiline?\n           prefix suffix color rows\n           placeholder max-rows\n           on-focus on-blur size full-width?\n           persistent? model] :as config}]\n  [generic-field config])\n\n(defn number-field\n  \"creates a react input component that has some base autoformatting and only allows numbers. The attributes are as follows:\n\n  - **:id**: is an optional keyword/string/number/array that uniquely identifies the field. As always you can use set-value to set the value of the field or set-error to set its error\n  - **:label** is an optional string indicating the label of the field. Note taht depending on the variant this field might more or not\n  - **:variant**, **color** , *:size**: Optional parameters that follow the rules sent in [doc](https://material-ui.com/api/form-control/)\n  - **:disabled?**: is an optional boolean indicating that the field is disabled\n  - **:required?**: is an optional  boolean indicating if the field is required or not. Once the field is blurred if the value is empty or nil the field is marked as error\n  - **:full-width?**: is a boolean indicating that the field should take the full width of its parent\n  - **:placeholder**: is an optional string that will appear if no value is given. Note that the normal variant will hide the placeholder with the label until it is focused\n  - **:persistent?**: an optional boolean identifies that the state of the field will carry over from one page to the next\n  - **:model**: is an optional atom that can be given to have the **id** part of. Should only be used if the history is not needed\n  - **:on-focus**: is an optional function that will be called on focus\n  - **:on-blur**: is an optional function that will be called on blur\n  - **:help-text**: is an optional string that will appear under the field. As a help text or as an error if the set-error is not a message\n  - **:prefix**: an optional string or react component to be presented before the **value**\n  - **:suffix**: an optional string or react component to be presented after the **value**\n  - **:decimal-points**: an optional parameter indicating the number of decimals in a number to be formated\n  - **:fixed-decimal-points?**: an optional boolean indicating if we should pad to get the number of decimal-points\n  - **:thousand-spearator**: an optional character indicating the thousand separator. Default is ,.\n  - **:format**: a required string identifying the string format. The format will only have the # changed according to value so for example\n  ```\n  format: ### ### ,|, ###\n  value: 123456789\n  => result: 123 456 ,|, 789\n  ```\n  - **:allow-leading-zeros?**: is an optional boolean indicating if the value is a number (or numeric string) that is less then the format then it is appended with zeros in the beginning\n  - **:is-numeric-string?**: is an optional boolean indicating that the value is a string representation.\n  - **:mask**: is an optional represntation of how the empty format spaces (ie #) should be presented. This can be a single character such as \\\"_\\\" or it can be an array of characters such as [\\\"M\\\" \\\"M\\\"] which identifies that the format spaces should be two\n\n\n\n  Note that the output is a hashmap of the following format:\n  ```\n  { :value ..... ; string representation of number\n    :formattedValue .... ; string representation as formatted with separator and decimal points\n    :floatValue ... ; float value\n  }\n  ```\"\n  [{:keys [id label variant disabled?\n           help-text required? full-width?\n           color placeholder model\n           on-focus on-blur size persistent?\n           decimal-points allow-leading-zeros?\n           fixed-decimal-points? decimal-separator\n           thousand-separator is-numeric-string?\n           format mask prefix suffix] :as config}]\n  [generic-field (assoc config\n                        :formatting {:thousand-separator thousand-separator\n                                     :is-numeric-string? is-numeric-string?\n                                     :format format      :mask mask\n                                     :decimal-separator decimal-separator\n                                     :allow-leading-zeros? allow-leading-zeros?\n                                     :fixed-decimal-points? fixed-decimal-points?\n                                     :decimal-points decimal-points})])\n\n\n(defn credit-card-field\n  \"creates a react input component for credit cards specifically. The attributes are as follows:\n\n  - **:id**: is an optional keyword/string/number/array that uniquely identifies the field. As always you can use set-value to set the value of the field or set-error to set its error\n  - **:label** is an optional string indicating the label of the field. Note taht depending on the variant this field might more or not\n  - **:variant**, **color** , *:size**: Optional parameters that follow the rules sent in [doc](https://material-ui.com/api/form-control/)\n  - **:disabled?**: is an optional boolean indicating that the field is disabled\n  - **:required?**: is an optional  boolean indicating if the field is required or not. Once the field is blurred if the value is empty or nil the field is marked as error\n  - **:full-width?**: is a boolean indicating that the field should take the full width of its parent\n  - **:placeholder**: is an optional string that will appear if no value is given. Note that the normal variant will hide the placeholder with the label until it is focused\n  - **:persistent**: an optional boolean identifies that the state of the field will carry over from one page to the next\n  - **:model**: is an optional atom that can be given to have the **id** part of. Should only be used if the history is not needed\n  - **:on-focus**: is an optional function that will be called on focus\n  - **:on-blur**: is an optional function that will be called on blur\n  - **:help-text**: is an optional string that will appear under the field. As a help text or as an error if the set-error is not a message\n  - **:mask**: is an optional string representing how the credit card numbers will appear before being filled\n\n  Note that the output is a hashmap of the following format:\n  ```\n  { :value ..... ; string representation of number\n    :formattedValue .... ; string representation as formatted with separator and decimal points\n    :floatValue ... ; float value\n  }\n  ```\"\n  [{:keys [id label variant disabled?\n           help-text required? mask\n           color placeholder \n           on-focus on-blur\n           size full-width?\n           persistent? model] :as config}]\n  [generic-field (assoc config\n                        :formatting {:thousand-separator false\n                                     :format \"#### #### #### ####\"\n                                     :mask (if mask mask \"_\")})])\n\n(defn month-year-field\n  \"creates a react input component for month year specifically. It should be noted that this is usually used for card expiry. The attributes are as follows:\n\n  - **:id**: is an optional keyword/string/number/array that uniquely identifies the field. As always you can use set-value to set the value of the field or set-error to set its error\n  - **:label** is an optional string indicating the label of the field. Note taht depending on the variant this field might more or not\n  - **:variant**, **color** , *:size**: Optional parameters that follow the rules sent in [doc](https://material-ui.com/api/form-control/)\n  - **:disabled?**: is an optional boolean indicating that the field is disabled\n  - **:required?**: is an optional  boolean indicating if the field is required or not. Once the field is blurred if the value is empty or nil the field is marked as error\n  - **:full-width?**: is a boolean indicating that the field should take the full width of its parent\n  - **:placeholder**: is an optional string that will appear if no value is given. Note that the normal variant will hide the placeholder with the label until it is focused\n  - **:persistent**: an optional boolean identifies that the state of the field will carry over from one page to the next\n  - **:model**: is an optional atom that can be given to have the **id** part of. Should only be used if the history is not needed\n  - **:on-focus**: is an optional function that will be called on focus\n  - **:on-blur**: is an optional function that will be called on blur\n  - **:help-text**: is an optional string that will appear under the field. As a help text or as an error if the set-error is not a message\n  - **:mask**: is an optional string representing how the credit card numbers will appear before being filled\n\n  Note that the output is a hashmap of the following format:\n  ```\n  { :value ..... ; string representation of number\n    :formattedValue .... ; string representation as formatted with separator and decimal points\n    :floatValue ... ; float value\n  }\n  ```\"\n  [{:keys [id label variant disabled?\n           help-text required? size\n           color  on-focus on-blur\n           persistent? model full-width?] :as config}]\n  [generic-field (assoc config\n                        :placeholder \"MM / YY\"\n                        :formatting {:thousand-separator false\n                                     :format \"## / ##\"\n                                     :mask [\"M\" \"M\" \"Y\" \"Y\"]})])\n\n(defn password-field\n  \"creates a react input component that allows text. The attributes are as follows:\n\n  - **:id**: is an optional keyword/string/number/array that uniquely identifies the field. As always you can use set-value to set the value of the field or set-error to set its error\n  - **:label** is an optional string indicating the label of the field. Note taht depending on the variant this field might more or not\n  - **:variant**, **color** , *:size**: Optional parameters that follow the rules sent in [doc](https://material-ui.com/api/form-control/)\n  - **:disabled?**: is an optional boolean indicating that the field is disabled\n  - **:required?**: is an optional  boolean indicating if the field is required or not. Once the field is blurred if the value is empty or nil the field is marked as error\n  - **:full-width?**: is a boolean indicating that the field should take the full width of its parent\n  - **:placeholder**: is an optional string that will appear if no value is given. Note that the normal variant will hide the placeholder with the label until it is focused\n  - **:persistent**: an optional boolean identifies that the state of the field will carry over from one page to the next\n     - **:model**: is an optional atom that can be given to have the **id** part of. Should only be used if the history is not needed\n  - **:on-focus**: is an optional function that will be called on focus\n  - **:on-blur**: is an optional function that will be called on blur\n  - **:help-text**: is an optional string that will appear under the field. As a help text or as an error if the set-error is not a message\n  - **:multiline?**: is an optional boolean indicating whether the field should allow multiple lines\n  - **:rows**: in case the **:multiline?** is true then this will indicate how many rows to show always\n  - **:max-rows**: in case the **:multiline?** is true then this will indicate max rows before a scroll appears\n  - **:prefix**: an optional string or react component to be presented before the **value**\n  - **:suffix**: an optional string or react component to be presented after the **value**\n  - **:hide-afer-ms**: is an optional argument that if given will cause the password to hide after x milliseconds where x is the value of this argument\n  - **only-peek?**: is an optional boolean argument indicating that the password should automatically get hidden when the icon is not pressed\"\n  [{:keys [id label variant disabled?\n           help-text required?\n           color placeholder \n           on-focus on-blur size\n           persistent? model\n           hide-after-ms full-width?\n           only-peek?] :as config\n    :or {hide-after-ms 2000}}]\n  (let [uuid (if id id (gen-uuid))\n        type (r/atom \"password\")]\n    (fn [{:keys [id label variant disabled?\n                 help-text required?\n                 color placeholder \n                 on-focus on-blur size\n                 persistent? model\n                 hide-after-ms\n                 only-peek?] :as config\n          :or {hide-after-ms 2000}}]\n      [generic-field (-> config\n                         (dissoc hide-after-ms)\n                         (assoc :id uuid\n                                :type @type\n                                :suffix [icon-button (if only-peek?\n                                                       {:on-mouse-down #(reset! type nil)\n                                                        :on-touch-start #(reset! type nil)\n                                                        :on-mouse-up #(reset! type \"password\")\n                                                        :on-mouse-leave #(reset! type \"password\")\n                                                        :on-touch-end #(reset! type \"password\")}\n                                                       {:on-click (fn []\n                                                                    (if (= @type \"password\")\n                                                                      (do\n                                                                        (when hide-after-ms\n                                                                          (.setTimeout js/window\n                                                                                       #(reset! type \"password\")\n                                                                                       hide-after-ms))\n                                                                        (reset! type nil))\n                                                                      (reset! type \"password\")))})\n                                         (if (= @type \"password\")\n                                           [visibility-off]\n                                           [visibility])]))])))\n(defn date-field\n  \"creates a react input component for date/time/datetime handling.. The attributes are as follows:\n\n  - **:id**: is an optional keyword/string/number/array that uniquely identifies the field. As always you can use set-value to set the value of the field or set-error to set its error\n  - **:label** is an optional string indicating the label of the field. Note taht depending on the variant this field might more or not\n  - **:variant**: Optional parameters that follow the rules sent in [doc](https://material-ui.com/api/form-control/)\n  - **:disabled?**: is an optional boolean indicating that the field is disabled\n  - **:full-width?**: is a boolean indicating that the field should take the full width of its parent\n  - **:placeholder**: is an optional string that will appear if no value is given. Note that the normal variant will hide the placeholder with the label until it is focused\n  - **:persistent**: an optional boolean identifies that the state of the field will carry over from one page to the next\n  - **:model**: is an optional atom that can be given to have the **id** part of. Should only be used if the history is not needed\n  - **:help-text**: is an optional string that will appear under the field. As a help text or as an error if the set-error is not a message\n  - **:min-date**: is an optional string in the provided format that will be the minimium date to be selectable. Only applicable if type is date\n  - **:max-date**: is an optional string in the provided format that will be the maximium date to be selectable. Only applicable if type is date\n  - **:type**: is an optional value indicating whether to provide a date/time/datetime selector. The options are :date | :time | :datetime. Default is :date\n  - **:allow-keyboard?**: is an optional boolean to indicate whether the user can input/edit the date/time/datetime by hand.\n  - **:error?**: is an optional boolean to indicate that the field should be in an error state. Note that the field can be in error state without this argument depending on what was inputted.\n  - **:dialog?**: is an optional boolean indicating wether the selector should be a popup or inline\n  - **:disabled-days**: is an optional array of strings in the format provided that will be disabled from selection. Is only available in case of type is :date\n  - **:format**: is an optional representation of the output based on the type provided. The default is 'yyyy-MM-dd hh:mm a' for :datetime, 'hh:mm a' for :time and 'yyyy-MM-dd' for :date\n\n  Please note that extra params can be seen in this [doc](https://material-ui-pickers.dev/api/DatePicker)\"\n  [{:keys [id label variant disabled? placeholder\n           disabled-days type allow-keyboard?\n           persistent? model min-date\n           max-date help-text error? dialog?]}]\n  (let [uuid (if id id (gen-uuid))\n        state (get-value uuid :persistent? persistent?\n                         :model model)\n        error-state (get-error uuid :model model\n                               :persistent? persistent?)\n        date-utils (date-fns.)]\n    (fn [{:keys [label variant disabled? placeholder\n                 disabled-days type allow-keyboard?\n                 persistent? model format min-date\n                 max-date help-text error? dialog?] :as config}]\n      (let [styles (use-styles)\n            format (if format\n                     format\n                     (case type\n                       \"datetime\" \"yyyy-MM-dd hh:mm a\"\n                       :datetime \"yyyy-MM-dd hh:mm a\"\n                       :time \"hh:mm a\"\n                       \"time\" \"hh:mm a\"\n                       \"yyyy-MM-dd\"))]\n        [box {:class-name (:flex styles)}\n         [mui-pickers-utils-provider {:utils date-fns}\n          [(if allow-keyboard?\n             (case type\n               \"datetime\" keyboard-date-time-picker\n               \"time\" keyboard-time-picker\n               keyboard-date-picker)\n             (case type\n               \"datetime\" date-time-picker\n               \"time\" time-picker\n               date-picker))\n           (merge {:auto-ok true}\n                  (-> config\n                      (dissoc :id\n                                 :value\n                                 :class-name\n                                 :on-change\n                                 :error\n                                 :help-text\n                                 :min-date\n                                 :max-date\n                                 :label\n                                 :variant\n                                 :format\n                                 :on-change\n                                 :on-error\n                                 :type\n                                 :persistent?\n                                 :model\n                                 :input-variant))\n                  {:value @state\n                   :class-name (cstr/join \" \"\n                                          [(:margin styles)\n                                           (when (not label)\n                                             (:without-label styles))])\n                   :on-change (fn [val]\n                                (set-value uuid val))\n                   :on-error (fn [err val]\n                               (if (and (not (nil? err))\n                                       (not= err \"\"))\n                                 (set-error uuid err)\n                                 (when (not (nil? @error-state))\n                                   (set-error uuid nil))))\n                   :variant (if dialog? \"dialog\" \"inline\")\n                   :format format}\n                  (when disabled-days\n                    {:should-disable-date (fn [val]\n                                            (some #(= (.parse date-utils % format) val)\n                                                  disabled-days))})\n                  (when (or @error-state error?)\n                    {:error true})\n                  (when (or (and @error-state\n                                 (not= @error-state true))\n                            help-text)\n                    {:helper-text (if (and @error-state\n                                           (not= @error-state true))\n                                    @error-state\n                                    help-text)})\n                  (when placeholder\n                    {:placeholder placeholder})\n                  (when min-date\n                    {:min-date (.parse date-utils min-date format)})\n                  (when max-date\n                    {:max-date (.parse date-utils max-date format)})\n                  (when label\n                    {:label label})\n                  (when variant\n                    {:input-variant variant})\n                  )]]]))))\n\n(defn calendar-field\n  \"creates a react calendar component for selecting a day from a month view.\n  **NOTE** this component is **NOT** breadcrumb ready.\n  \n  The attributes are as follows:\n\n  - **:id**: is an optional keyword/string/number/array that uniquely identifies the field. As always you can use set-value to set the value of the field or set-error to set its error\n  - **:default-value**: is an optional string in the provided format that indicates the current selected day. It is by default today.\n  - **:persistent**: an optional boolean identifies that the state of the field will carry over from one page to the next\n  - **:model**: is an optional atom that can be given to have the **id** part of. Should only be used if the history is not needed\n  - **:min-date**: is an optional string in the provided format that will be the minimium date to be selectable. Only applicable if type is date\n  - **:max-date**: is an optional string in the provided format that will be the maximium date to be selectable. Only applicable if type is date\n  - **:orientation**: is an optional argument to indicate if calendar is portrait or orientation. Default is portrait.\n  - **:disable-toolbar?**: is an optional boolean indicating whether to show the top toolbar or not. Without the top toolbar you can not jump years.\n  - **:disabled-days**: is an optional array of strings in the format provided that will be disabled from selection. Is only available in case of type is :date\n  - **:badged-days**: is an optional hashmap with the keys being the days in the provided format with the value being either true or a hashmap that follows this [doc](https://material-ui.com/api/badge/)\n  ```\n  { \\\"2020-10-04\\\": true\n    \\\"2020-11-04\\\": {:badge-content 10}}\n  ```\n  - **:format**: is an optional representation of the output based on the type provided. The default 'yyyy-MM-dd'\n\n  Please note that extra params can be seen in this [doc](https://material-ui-pickers.dev/api/DatePicker)\"\n  [{:keys [id disabled-days default-value\n           persistent? model min-date\n           max-date format orientation\n           disable-toolbar? badged-days]}]\n  (let [uuid (if id id (gen-uuid))\n        error-state (get-error uuid :model model\n                               :persistent? persistent?)\n        date-utils (date-fns.)]\n    (fn [{:keys [disabled-days default-value\n                 persistent? model min-date\n                 max-date format orientation\n                 disable-toolbar? badged-days] :as config}]\n      (let [styles (use-styles)\n            format (if format\n                     format\n                     \"yyyy-MM-dd\")\n            [state on-state-change] (react/useState default-value)]\n        [box {:class-name (:flex styles)}\n         [mui-pickers-utils-provider {:utils date-fns}\n          [date-picker\n           (merge {:value state :auto-ok true\n                   :class-name (cstr/join \" \"\n                                          [(:margin styles)])\n                   :on-change (fn [val]\n                                (set-value uuid val\n                                           :persistent? persistent?\n                                           :model model)\n                                (on-state-change val))\n                   :on-error (fn [err val]\n                               (if (and (not (nil? err))\n                                       (not= err \"\"))\n                                 (set-error uuid err\n                                            :persistent? persistent?\n                                            :model model)\n                                 (when (not (nil? @error-state))\n                                   (set-error uuid nil\n                                              :persistent? persistent?\n                                              :model model))))\n                   :variant \"static\"\n                   :format format}\n                  (when badged-days\n                    {:renderDay (fn [day _ _ elem]\n                                   (let [badge-config (get badged-days (.format date-utils day format))]\n                                     (r/as-element\n                                      (if badge-config\n                                        [badge (merge\n                                                {:overlap \"circle\"\n                                                 :color \"primary\"\n                                                 :max 9}\n                                                (when (map? badge-config)\n                                                  badge-config)\n                                                (when (or (not (map? badge-config))\n                                                          (not (:badge-content badge-config)))\n                                                  {:variant \"dot\"}))                                        \n                                         elem]\n                                        elem))))})\n                  (when orientation\n                    {:orientation orientation})\n                  (when disable-toolbar?\n                    {:disable-toolbar true})\n                  (when disabled-days\n                    {:should-disable-date (fn [val]\n                                            (some #(= (.parse date-utils % format) val)\n                                                  disabled-days))})\n                  (when min-date\n                    {:min-date (.parse date-utils min-date format)})\n                  (when max-date\n                    {:max-date (.parse date-utils max-date format)}))]]]))))\n(defn select-field\n  \"creates a react select component. The attributes are as follows:\n\n  - **:id**: is an optional keyword/string/number/array that uniquely identifies the field. As always you can use set-value to set the value of the field or set-error to set its error\n  - **:options**: is a required array of options available. The array can be of strings or of hashmaps/arrays. In case of the first the arguments **get-option-label** & **render-option** are optional while if the array is made up of hashmaps/arrays then one of those functions is required.\n  - **:label** is an optional string indicating the label of the field. Note taht depending on the variant this field might more or not\n  - **:variant**: Optional parameters that follow the rules sent in [doc](https://material-ui.com/api/form-control/)\n  - **:disabled?**: is an optional boolean indicating that the field is disabled\n  - **:required?**: is an optional  boolean indicating if the field is required or not. Once the field is blurred if the value is empty or nil the field is marked as error\n  - **:get-option-label**: is an optional function that will be called for every option given. The function takes as argument the option being rendered and should return a string or react component to be rendered\n  - **:render-option**: is an optional function that will be called for every option given. The function takes as argument the option being rendered and should return a string or react component to be rendered. It differs from **get-option-label** as the latter is a lighter version\n  - **allow-new?**: is an optinal boolean that if true indicates that the select is more of an autocomplete option.\n  - **:allow-add?**: is an optional boolean that indicates that the select will allow the addition of new values to the list. When this option is true the select will have a value being a hashmap of the following format:\n  ```\n  {:label xxxx ; whatever the user wrote\n   :newly-added? true}\n  ```\n  It should be noted if the **multiple?** is true then the above hashmap will be part of the resulting array\n  - **:on-add**: is an optional function that is called with the added value. Is only called if **allow-add?** is true.\n  - **:multiple?**: is an optional boolean indicating whether multiple options are allowed. If true then selection is done by checkbox in the popup\n  - **:limit**: is an optional argument that collapses the number of selections to only show the provided value. Extra values will appear as +X where X is the remaining selections. Only useful if **multiple?** is true\n  - **:on-change**: is an optiona function that is called every time the value of the selection is changed. It will return the whole selected option. **NOTE** if selected option was of the form\n  ```\n  {:label \\\"hi\\\" :some-special \\\"b\\\"}\n  ```\n  then the function will get the following result\n  ```\n  [{:label \\\"hi\\\" :someSpecial \\\"b\\\"}]\n  ```\n  - **width**: is an optional parameter to indicate the width of the select box. Default is 300\n  - **option-disabled-fn**: is an optional function that is called on every function. If the function returns true then the option will be disabled.\n  - **group-by-fn**: is an optional function that is called for every option and the result defines the group it is in. It should be noted that this does not reshuffle options. Accordingly the following is critical\n  ```\n  [{:label \\\"option1\\\" :group-by \\\"A\\\"}\n   {:label \\\"option3\\\" :group-by \\\"B\\\"}\n  {:label \\\"option2\\\" :group-by \\\"A\\\"}\n  {:label \\\"option4\\\" :group-by \\\"B\\\"}]\n  ```\n  will result in the following output\n  ```\n  A\n   option 1\n  B\n   option 3\n  A\n   option 2\n  B\n   option 4\n  ```\n  Accordingly it is recommended that the options be sorted by group-by  \n  - **:persistent?**: an optional boolean identifies that the state of the field will carry over from one page to the next\n  - **:model**: is an optional atom that can be given to have the **id** part of. Should only be used if the history is not needed\n  - **:help-text**: is an optional string that will appear under the field. As a help text or as an error if the set-error is not a message\"\n  \n  [{:keys [id options variant disabled? label\n           get-option-label render-option\n           allow-new? on-add allow-add?\n           group-by-fn option-disabled-fn\n           multiple? limit persistent?\n           model on-change width help-text]}]\n  (let [uuid (if id id (gen-uuid))\n        state (get-value uuid :model model\n                         :persistent? persistent?)\n        loading-state (get-loading uuid :model model\n                                   :persistent? persistent?)\n        error-state (get-error uuid :model model\n                               :persistent? persistent?)\n        temp (atom {})]\n    (rendering-id uuid)\n    (fn [{:keys [ options variant label width\n                 get-option-label render-option\n                 allow-new? on-add allow-add?\n                 group-by-fn option-disabled-fn\n                 multiple? limit on-change\n                 disabled? required? help-text]}]\n      (let [styles (use-styles)]\n        \n        [autocomplete \n         (merge\n          (when @state\n            {:value (clj->js @state)})\n          {:options options :id uuid\n           :loading @loading-state\n           :style {:width (if width width 300)}\n           :on-change (fn [evt new-val]\n                        (let [result (js->clj new-val :keywordize-keys true)]\n                          (when multiple?\n                            (doseq [selected-hash (:selected @temp)]\n                              (set-value selected-hash nil\n                                         :model temp))\n                            (doseq [val result]\n                              (set-value (hash val) val\n                                         :model temp))\n                            (set-value :selected (for [val result]\n                                                   (hash val))\n                                       :model temp))\n                          (set-value uuid (if allow-add?\n                                            (if multiple?\n                                              (map #(if (:newlyAdded? %)\n                                                      (-> %\n                                                          (dissoc :newlyAdded?)\n                                                          (assoc :newly-added? (:newlyAdded? %)))\n                                                      %)\n                                                   result)\n                                              (-> result\n                                                  (dissoc :newlyAdded?)\n                                                  (assoc :newly-added? (:newlyAdded? result))))\n                                            result)\n                                     :model model\n                                     :persistent? persistent?)\n                          (when required?\n                            (set-error uuid (or (empty? result)\n                                                (= result \"\"))\n                                       :model model\n                                       :persistent? persistent?))\n                          (when (and (fn? on-add)\n                                     (if multiple?\n                                       (:newlyAdded? (last result))\n                                       (:newlyAdded? result)))\n                            (on-add (if multiple?\n                                      (last result)\n                                      result)))\n                          (when (fn? on-change)\n                            (on-change new-val))))\n           :class-name (:flex styles)\n           :render-input (fn [params]\n                           (let [props (js->clj params :keywordize-keys true)]\n                             (r/as-element\n                              [ctext-field/text-field (merge (assoc-in props\n                                                                       [:InputProps :className]\n                                                                       (str (get-in props\n                                                                                    [:InputProps :className])\n                                                                            \" \"\n                                                                            (:width styles)))\n                                                             {:ref (.-ref (.-InputProps params))\n                                                              :error (boolean @error-state)\n                                                              :inputProps (.-inputProps params)\n                                                              :class-name (str (:className props)\n                                                                               (cstr/join\n                                                                                \" \"\n                                                                                [(:margin styles)\n                                                                                 (when (not label)\n                                                                                   (:without-label styles))]))}\n                                                             (when (or help-text\n                                                                       (and @error-state\n                                                                            (not= @error-state true)))\n                                                               {:helper-text (if (not help-text)\n                                                                               @error-state\n                                                                               help-text)})\n                                                             (when required?\n                                                               {:required true\n                                                                :on-blur #(when (and (not @state)\n                                                                                     required?)\n                                                                            (set-error uuid true\n                                                                                       :model model\n                                                                                       :persistent? persistent?))})\n                                                             (when label\n                                                               {:label label})\n                                                             (when variant\n                                                               {:variant variant}))])))\n           :get-option-disabled (fn [option]\n                                  (let [clj-option (js->clj option :keywordize-keys true)]\n                                    (if (fn? option-disabled-fn)\n                                      (option-disabled-fn clj-option)\n                                      (:disabled? clj-option))))}\n          (when (or allow-new? allow-add?)\n            {:free-solo true})\n          (when (fn? group-by-fn)\n            {:group-by (fn [opt]\n                         (let [option (js->clj opt :keywordize-keys true)]\n                           (group-by-fn option)))})\n          (when disabled?\n            {:disabled true})\n          (when limit\n            {:limit-tags limit})\n          (when (or (and  (fn? get-option-label)\n                          (not multiple?)\n                          (not (fn? render-option)))\n                    allow-add?)\n            {:get-option-label (fn [opt]\n                                 (let [params (js->clj opt :keywordize-keys true)]\n                                   (cond\n                                     (and allow-add? (:newlyAdded? params))\n                                     (:label params)\n                                     (fn? get-option-label)\n                                     (get-option-label params)\n                                     true params)))})\n          (when multiple?\n            {:multiple true :disableCloseOnSelect true\n             :render-option (fn [opt]\n                              (let [params (js->clj opt :keywordize-keys true)\n                                    hashed (hash params)]\n                                (when (contains? params @state)\n                                  (set-value hashed params\n                                             :model temp))\n                                (r/as-element\n                                 [box\n                                  [checkbox {:id hashed\n                                             :value params :model temp\n                                             :on-change (fn [checked?]\n                                                          (set-value :selected\n                                                                     (if checked?\n                                                                       (conj @temp hashed)\n                                                                       (remove #(= hashed %)\n                                                                               @temp))\n                                                                     :model temp)\n                                                          (set-value uuid (if checked?\n                                                                            (conj @state params)\n                                                                            (remove #(= params %)\n                                                                                    @state))\n                                                                     :model model\n                                                                     :persistent? persistent?))}]\n                                  (cond\n                                    (fn? render-option)\n                                    (render-option params)\n                                    (fn? get-option-label)\n                                    (get-option-label params)\n                                    true params)])))}))]))))\n"]}