{
"version":3,
"file":"module$node_modules$$material_ui$core$utils$useForkRef.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,uDAAA,CAA2E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG/GC,MAAAA,CAAyBH,OAAA,CAAQ,kEAAR,CAEzBI,OAAAA,CAA0BJ,OAAA,CAAQ,mEAAR,CAE9BK,OAAAC,eAAA,CAAsBJ,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CK,MAAO,CAAA,CADoC,CAA7C,CAGAL,QAAAM,QAAA,CAMAC,QAAmB,CAACC,IAAD,CAAOC,IAAP,CAAa,CAM9B,MAAOC,MAAAC,QAAA,CAAc,QAAS,EAAG,CAC/B,MAAY,KAAZ,EAAIH,IAAJ,EAA4B,IAA5B,EAAoBC,IAApB,CACS,IADT,CAIO,QAAS,CAACG,QAAD,CAAW,CACzB,CAAC,CAAA,CAAGC,OAAAP,QAAJ,EAAqBE,IAArB,CAA2BI,QAA3B,CACA,EAAC,CAAA,CAAGC,OAAAP,QAAJ,EAAqBG,IAArB;AAA2BG,QAA3B,CAFyB,CALI,CAA1B,CASJ,CAACJ,IAAD,CAAOC,IAAP,CATI,CANuB,CAJhC,KAAIC,MAAQR,MAAA,CAAwBJ,OAAA,CAAQ,iCAAR,CAAxB,CAAZ,CAEIe,QAAUZ,MAAA,CAAuBH,OAAA,CAAQ,oDAAR,CAAvB,CAdqG;",
"sources":["node_modules/@material-ui/core/utils/useForkRef.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$$material_ui$core$utils$useForkRef\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useForkRef;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nvar _setRef = _interopRequireDefault(require(\"./setRef\"));\n\nfunction useForkRef(refA, refB) {\n  /**\n   * This will create a new function if the ref props change and are defined.\n   * This means react will call the old forkRef with `null` and the new forkRef\n   * with the ref. Cleanup naturally emerges from this behavior\n   */\n  return React.useMemo(function () {\n    if (refA == null && refB == null) {\n      return null;\n    }\n\n    return function (refValue) {\n      (0, _setRef.default)(refA, refValue);\n      (0, _setRef.default)(refB, refValue);\n    };\n  }, [refA, refB]);\n}\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","_interopRequireWildcard","Object","defineProperty","value","default","useForkRef","refA","refB","React","useMemo","refValue","_setRef"]
}
