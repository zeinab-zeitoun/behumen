{"version":3,"sources":["reagent_material_ui/util.cljs"],"mappings":";;;AAWA,AAAA,AAAA,AAAAA,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AACFE;AADJ,AAEG,AAACC,AAAkBD,AAAE,AAACE,AAASF;;;AAFlC,AAAA,AAAA,AAAMF,AAGFE,AAAEG;AAHN,AAIG,AAAMC,AAAQ,AAACC,AAAoBL;AAAnC,AACE,AAAM,AAAeI,AAASD;;AAC9BC;;;AANL,AAAA,AAAA,AAAMN;;AAAN,AAQA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAeQ;AACf,AAAA,AAAgBC,AAAiBC;AAAjC,AACE,AAAK,AAASA,AACT,AAAA,AAAA,AAAO,AAAA,AAACC,AAAqBD;;AACpC,AAAA,AAAgBE,AAAcF;AAA9B,AACE,AAAK,AAASA,AACT,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACG,AACU,AAACC,AAAMJ;;AAEzB,AAAA,AAAgBK,AAAUC;AAA1B,AACE,AAAMC,AAAE,AAACC,AAAKF;AAAd,AACE,AACE,AAACR,AAAAA,AAAAA,AAAWQ,AAAAA;AAAGC;;AADjB,AAEE,AAAA,AAACE,AAAiBF;AAAWA;;AAF/B,AAGE,AAAA,AAACE,AAAiBF;AAAWA;;AAH/B,AAIE,AAACL,AAAaK;AAAGA;;AAJnB,AAKQ,AAACG,AAAkBJ;;;;;;;AAE/B,AAAA,AAAgBK,AAAkBC,AAAEC;AAApC,AACE,AAACC,AAAS,AAAKC;AAAL,AACE,AAAI,AAACC,AAAWD;AAAhB,AACG,AAAAE,AAAG,AAACC,AAAIH;AAAR,AAAA,AAAAE,AAAAA,AAACJ,AAAAA,AAAAA;AAAW,AAACM,AAAIJ;;AAClBA;;AACJH;;AAEZ,AAAA,AAAMQ,AACHC;AADH,AAEE,AAACC,AAAQ,AAACX,AAAiBU,AAAI,AAAKf;AAAL,AACE,AAAI,AAAAiB,AAAUjB;AACZ,AAACD,AAASC;;AACVA;;;;AAErC,AAAA,AAAA,AAAAlB,AAAMqC;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAlC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMkC,AACFJ;AADJ,AAEG,AAAA,AAACK,AAASL;;;AAFb,AAAA,AAAA,AAAMI,AAGFJ,AAAIM;AAHR,AAIG,AAAMC,AAAS,AAAA,AAACC,AAAQR;AAClBS,AAAO,AAAAC,AAAQ,AAACC,AAAQX;AAAjBU,AAAA,AAAAA,AACEH,AAAS,AAAAG,AAAA,AAACE;AADZF,AAAA,AAEO,AAAAA,AAACpB,AAAiB,AAAKL;AAAL,AACE,AACE,AAAAiB,AAAUjB;AAAGA;;AADf,AAEE,AAACR,AAAAA,AAAAA,AAAWQ,AAAAA;AAAG,AAAC4B,AAAQ5B;;AAF1B,AAGE,AAACP,AAAgBO;AAAG,AAAC6B,AAAY7B;;AAHnC,AAIE,AAACJ,AAAaI;AAAG,AAAC4B,AAAQ5B;;AAJ5B,AAKQ,AAAC8B,AAAqB9B;;;;;;;;AARzD,AAAA,AASEsB;AAAS,AAAAG,AAAA,AAACM,AAAgBT;;AAT5BG;;;AADb,AAWE,AAAIJ;AACF,AAAAW,AAAa,AAAA,AAACT,AAAQR;AAAtB,AAAA,AAAAiB;AAAA,AAAAA,AAASC;AAAT,AACE,AAAA,AAACF,AAAMP,AAAYS;;AACnBT;;;AACFA;;;;AAnBP,AAAA,AAAA,AAAML;;AAAN,AAqBA,AAAA,AAAMe,AAAmB3B;AAAzB,AACE;AAAO4B;AAAP,AACE,AAACrB,AAAS,AAACsB,AAAM7B,AAAE,AAAC8B,AAAIlB,AAASgB;;;AAD5BA;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;;;AAGT,AAAA,AAAMG,AAAkB/B;AAAxB,AACE;AAAO4B;AAAP,AACE,AAACf,AAAS,AAACgB,AAAM7B,AAAE,AAAC8B,AAAIvB,AAASqB;;;AAD5BA;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;;;AAGT,AAAA,AAAMI,AAAwBjC;AAA9B,AACE,AAACE,AAAS,AAAKC;AAAL,AACE,AAAI,AAAC+B,AAAI/B;AACP,AAACyB,AAAkBzB;;AACnBA;;AACJH;;AAEZ,AAAA,AAAMmC,AAAoBC;AAA1B,AACE,AAAMC,AAAW,AAAAC,AAAA,AAAcC,AAAMZ;AAApB,AACE,AAAMa,AAAU,AAAA,AAAA,AAAA,AAACC,AAAM,AAAA,AAAC3B,AAASyB,AACCZ,AACA,AAAA,AAACV,AAAQsB;AAF3C,AAGE,AAAA,AAACG,AAAcN,AAAUI;;AAJ9C,AAKE,AAAM,AAAeH,AAAY,AAACvD,AAASsD;;AAC3CC;;AAEJ,AAAA,AAAMM,AAAiBC;AAAvB,AACE,AAAI,AAACV,AAAIU;AACP,AAAKC;AAAL,AACM,AAAC/B,AAAS+B,AACV,AAAAC,AACA,AAACb,AACD,AAACzB;AAFD,AAAA,AAAAsC,AAAAA,AAACF,AAAAA,AAAAA;;;;AAGP,AAAClC,AAAQ,AAACuB,AAAuBW;;;AAErC,AAAA,AAAMG,AAAWC,AAAIZ;AAArB,AACMA,AACA,AAACD,AACD,AAAAc,AACA,AAACpE;AADD,AAAA,AAAAoE,AAAAA,AAACD,AAAAA,AAAAA;;;AAGP,AAAA,AAAA,AAAAxE,AAAM2E;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAxE,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMwE,AACFnD,AAAEN;AADN,AAEG,AAAA,AAAC0D,AAAYpD,AAAEN;;;AAFlB,AAAA,AAAA,AAAMyD,AAGFnD,AAAEN,AAAE2D;AAHR,AAIG,AAAA3B,AAAe,AAAA6B,AAAI,AAACC,AAAKxD,AAAE,AAACwB,AAAqB9B;AAAlC,AAAA,AAAA6D;AAAAA;;AACI,AAACC,AAAKxD,AAAE,AAACyD,AAAmB/D;;;AAD/C,AAAA,AAAAgC;AAAA,AAAAA,AAAS4B;AAAT,AAEE,AAAC/C,AAAI+C;;AACLD;;;;AAPL,AAAA,AAAA,AAAMF;;AAAN,AASA,AAAA,AAAA,AAAA3E,AAAMmF;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAJ,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAI;;;;;AAAA,AAAA,AAAA,AAAMJ,AACF3D,AAAEN,AAAE6E;AADR,AAEG,AAAC9C,AAAM,AAACJ,AAAOrB,AAAE,AAACyD,AAAmB/D,AAAI,AAAC8B,AAAqB9B,AAAG6E;;;AAFrE,AAAA,AAAA,AAAA,AAAMZ,AAGF3D,AAAEN,AAAE6E,AAAIC;;AAHZ,AAIG,AAAMC,AAAI,AAACC,AAAc1E,AAAEN,AAAE6E;AAA7B,AACE,AAAIC;AACF,AAAOC;AAAI,AAACjF,AAAMgF;AAAK,AAACG,AAAOH;AAAK,AAACI,AAAMJ;;;;;;;AAC3CC;;;;;;AAPP;AAAA,AAAA,AAAA,AAAAR,AAAMN;AAAN,AAAA,AAAAO,AAAA,AAAA1E,AAAAyE;AAAAA,AAAA,AAAAE,AAAAF;AAAAG,AAAA,AAAA5E,AAAAyE;AAAAA,AAAA,AAAAE,AAAAF;AAAAI,AAAA,AAAA7E,AAAAyE;AAAAA,AAAA,AAAAE,AAAAF;AAAA,AAAA,AAAAK,AAAA;AAAA,AAAA,AAAAA,AAAAJ,AAAAE,AAAAC,AAAAJ;;;AAAA,AAAA,AAAA,AAAMN;;AAAN,AASA,AAAA,AAAMkB,AAAU5E,AAAE6E;AAAlB,AACE,AAAMC,AAAQ,AAAA,AAACC;AACTP,AAAI;AAAO5C;AAAP,AACE,AAAA,AAAAoD,AAACC,AAAiBH;;AAClB,AAACI,AAAQJ,AAAQ,AAAA,AAACK;AAAD,AAAgB,AAACtD,AAAM7B,AAAE4B;AAAMiD;;;AAF3CjD;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;;AADjB,AAIE,AAAA,AAAM,AAAS4C;AAAf,AAAqB,AAAA,AAAAQ,AAACC,AAAiBH;;;AACvCN;;AAEJ,AAAA,AAAMY,AAAuBrF;AAA7B,AACE,AAACsF,AACA,AAACC,AAAU,AAAKC,AAAI9F,AAAE6E;AAAX,AACE,AAAI,AAAYA;AACd,AAACkB,AAAQD,AAAI9F;;AACb8F;;AACJ,AAACE,AAAU1F,AACXA;;AAEd,AAAA,AAAM2F,AAAShE,AAAIiE;AAAnB,AACE,AACE,AAAC1D,AAAIP;AAAK,AAACA,AAAAA,AAAAA,AAAIiE,AAAAA;;AADjB,AAEEjE;AAAI,AAAM,AAAWA,AAAKiE;;AAF5B;;;;AAIF,AAAA,AAAA,AAAApH,AAAMuH;AAAN,AAAA,AAAAF,AAAA;AAAA,AAAA,AAAAhC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAgC,AAAA,AAAA,AAAA/B;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAgC,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA7B,AAAA,AAAA6B,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAE,AAAAD;;;AAAA,AAAA,AAAA,AAAA,AAAMC,AAAgBI;AAAtB,AACE,AAAA,AAACC;AAAD,AAAgB,AAAM,AAACC,AAAWC,AAAKH;AAAvB,AACE,AAAKP;AAAL,AACE,AAAAW,AAAA,AAAAL,AAAYC;AAAZK,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAAE,AAAQ/E;AAAR,AAAA,AACE,AAACgE,AAAQhE,AAAIiE;;AADf;AAAA,AAAAW;AAAAC;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAC,AAAA,AAAAT,AAAAK;AAAA,AAAA,AAAAI;AAAA,AAAA,AAAAJ,AAAAI;AAAA,AAAA,AAAA,AAAAC,AAAAL;AAAA,AAAAM,AAAA,AAAAC,AAAAP;AAAA,AAAA,AAAA,AAAAQ,AAAAR;AAAAM;AAAA,AAAAG,AAAAH;AAAA;;;;;;;AAAA,AAAA,AAAArH,AAAA+G,AAAQ5E;AAAR,AAAA,AACE,AAACgE,AAAQhE,AAAIiE;;AADf;AAAA,AAAA,AAAAzB,AAAAoC;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;;;AAFJ;;AAID,AAACzE,AAAMmF,AAAMd;;;AAL9B,AAAA,AAAA,AAAMJ;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC,AAAAF;;;AAAA,AAOA,AAAA,AAAMkB,AAAcC,AAAS5E;AAA7B,AACE,AAAC6E,AAAkBD,AAAS5E;;AAE9B,AAAA,AAAM8E,AAAYC,AAAO/E;AAAzB,AACE,AAACgF,AAAgBD,AAAO/E;;AAE1B,AAAA,AAAMiF,AAAmBF;AAAzB,AACE,AAACG,AAAsBH;;AAEzB,AAAA,AAAMI,AAAS9B;AAAf,AACE,AAAC+B,AAAa/B;;AAEhB,AAAA,AAAMgC,AAAWC;AAAjB,AACE,AAACC,AAAeD;;AAElB,AAAA,AAAME,AAAiBC,AAAKjJ;AAA5B,AACE,AAAMqD,AAAU,AAAC6F,AAAW,AAAA3F,AAAA,AAAcC,AAAMZ;AAApB,AACE,AAAAuG,AAAG,AAAA3E,AAAI,AAAW4E;AAAf,AAAA,AAAA5E;AAAAA;;AAAwB,AAAW4E;;AACnC,AAAA,AAACC,AAA2BzG,AAAKY,AACjCyF;;AAHjC,AAIE,AAACnJ,AAAkBuD,AAAUrD","names":["var_args","G__80193","reagent-material-ui.util/adapt-react-class","js/Error","c","reagent_material_ui.util.adapt_react_class","reagent.impl.util/fun-name","display-name","adapted","reagent.core/adapt-react-class","reagent-material-ui.util/color-key?","reagent-material-ui.util/numeric-string?","s","cljs.core/re-matches","reagent-material-ui.util/pascal-case?","cljs.core/contains?","cljs.core/first","reagent-material-ui.util/key->str","k","n","cljs.core/name","clojure.string/starts-with?","camel-snake-kebab.core/->camelCaseString","reagent-material-ui.util/convert-map-keys","m","f","clojure.walk/postwalk","x","cljs.core/map-entry?","G__80203","cljs.core/key","cljs.core/val","reagent-material-ui.util/clj->js'","obj","cljs.core/clj->js","cljs.core/Keyword","G__80211","reagent-material-ui.util/js->clj'","reagent_material_ui.util.js__GT_clj_SINGLEQUOTE_","pass-ref?","children","goog.object/get","result","G__80214","cljs.core.js__GT_clj","cljs.core.dissoc","cljs.core.keyword","js/parseInt","camel-snake-kebab.core/->kebab-case-keyword","cljs.core.assoc","temp__5733__auto__","ref","reagent-material-ui.util/wrap-clj-function","args","cljs.core.apply","cljs.core.map","reagent-material-ui.util/wrap-js-function","reagent-material-ui.util/wrap-all-clj-functions","cljs.core/fn?","reagent-material-ui.util/reactify-component","component","reactified","js/module$node_modules$react$index.forwardRef","props","clj-props","cljs.core.merge","reagent.core.as_element","reagent-material-ui.util/wrap-jss-styles","styles","theme","G__80227","reagent-material-ui.util/apply-hoc","hoc","G__80229","G__80233","reagent-material-ui.util/get-anycase","reagent_material_ui.util.get_anycase","default","entry","or__4126__auto__","cljs.core/find","camel-snake-kebab.core/->camelCaseKeyword","G__80240","reagent-material-ui.util/assoc-anycase","args-arr__4757__auto__","len__4736__auto__","i__4737__auto__","argseq__4758__auto__","cljs.core/IndexedSeq","seq80236","G__80237","cljs.core/next","G__80238","G__80239","self__4723__auto__","v","kvs","ret","reagent_material_ui.util.assoc_anycase","cljs.core/second","cljs.core/nnext","reagent-material-ui.util/debounce","ms","timeout","cljs.core/volatile!","cljs.core/deref","js/clearTimeout","cljs.core/vreset!","js/setTimeout","reagent-material-ui.util/remove-undefined-vals","cljs.core/persistent!","cljs.core/reduce-kv","acc","cljs.core.dissoc_BANG_","cljs.core/transient","reagent-material-ui.util/set-ref","value","args__4742__auto__","argseq__4743__auto__","reagent-material-ui.util/use-fork-ref","seq80253","self__4724__auto__","cljs.core/seq","refs","js/module$node_modules$react$index.useMemo","cljs.core/not-every?","cljs.core/nil?","seq__80257","chunk__80258","count__80259","i__80260","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/array","reagent-material-ui.util/use-callback","callback","js/module$node_modules$react$index.useCallback","reagent-material-ui.util/use-effect","effect","js/module$node_modules$react$index.useEffect","reagent-material-ui.util/use-layout-effect","js/module$node_modules$react$index.useLayoutEffect","reagent-material-ui.util/use-ref","js/module$node_modules$react$index.useRef","reagent-material-ui.util/use-state","initial-state","js/module$node_modules$react$index.useState","reagent-material-ui.util/create-svg-icon","path","js/module$node_modules$react$index.memo","js/module$node_modules$react$index.createElement","js/module$node_modules$$material_ui$core$esm$SvgIcon$index","js/Object.assign"],"sourcesContent":["(ns reagent-material-ui.util\n  (:require-macros [reagent-material-ui.macro :refer [e forward-ref]])\n  (:require [react :as react]\n            [reagent.core :as r]\n            [reagent.impl.util :refer [fun-name]]\n            [clojure.string :as str]\n            [clojure.walk :refer [postwalk]]\n            [camel-snake-kebab.core :refer [->kebab-case-keyword ->camelCaseKeyword ->camelCaseString]]\n            [goog.object :as obj]\n            [\"@material-ui/core/SvgIcon\" :as SvgIcon]))\n\n(defn adapt-react-class\n  ([c]\n   (adapt-react-class c (fun-name c)))\n  ([c display-name]\n   (let [adapted (r/adapt-react-class c)]\n     (set! (.-displayName adapted) display-name)\n     adapted)))\n\n(def ^:private color-key? #{:A100 :A200 :A400 :A700 \"A100\" \"A200\" \"A400\" \"A700\"})\n(defn ^:private numeric-string? [s]\n  (and (string? s)\n       (some? (re-matches #\"[0-9]+\" s))))\n(defn ^:private pascal-case? [s]\n  (and (string? s)\n       (contains? #{\\A \\B \\C \\D \\E \\F \\G \\H \\I \\J \\K \\L \\M \\N \\O \\P \\Q \\R \\S \\T \\U \\V \\W \\X \\Y \\Z}\n                  (first s))))\n\n(defn ^:private key->str [k]\n  (let [n (name k)]\n    (cond\n      (color-key? k) n\n      (str/starts-with? n \"data-\") n\n      (str/starts-with? n \"aria-\") n\n      (pascal-case? n) n\n      :else (->camelCaseString k))))\n\n(defn ^:private convert-map-keys [m f]\n  (postwalk (fn [x]\n              (if (map-entry? x)\n                [(f (key x)) (val x)]\n                x))\n            m))\n\n(defn clj->js'\n  [obj]\n  (clj->js (convert-map-keys obj (fn [k]\n                                   (if (keyword? k)\n                                     (key->str k)\n                                     k)))))\n\n(defn js->clj'\n  ([obj]\n   (js->clj' obj true))\n  ([obj pass-ref?]\n   (let [children (obj/get obj \"children\")\n         result (cond-> (js->clj obj)\n                  children (dissoc \"children\")\n                  true (convert-map-keys (fn [k]\n                                           (cond\n                                             (keyword? k) k\n                                             (color-key? k) (keyword k)\n                                             (numeric-string? k) (js/parseInt k)\n                                             (pascal-case? k) (keyword k)\n                                             :else (->kebab-case-keyword k))))\n                  children (assoc :children children))]\n     (if pass-ref?\n       (if-let [ref (obj/get obj \"ref\")]\n         (assoc result :ref ref)\n         result)\n       result))))\n\n(defn wrap-clj-function [f]\n  (fn [& args]\n    (clj->js' (apply f (map js->clj' args)))))\n\n(defn wrap-js-function [f]\n  (fn [& args]\n    (js->clj' (apply f (map clj->js' args)))))\n\n(defn wrap-all-clj-functions [m]\n  (postwalk (fn [x]\n              (if (fn? x)\n                (wrap-clj-function x)\n                x))\n            m))\n\n(defn reactify-component [component]\n  (let [reactified (forward-ref [props ref]\n                     (let [clj-props (merge (js->clj' props false)\n                                            {:ref      ref\n                                             :children (obj/get props \"children\")})]\n                       (r/as-element [component clj-props])))]\n    (set! (.-displayName reactified) (fun-name component))\n    reactified))\n\n(defn wrap-jss-styles [styles]\n  (if (fn? styles)\n    (fn [theme]\n      (-> (js->clj' theme)\n          (styles)\n          (wrap-all-clj-functions)\n          (clj->js')))\n    (clj->js (wrap-all-clj-functions styles))))\n\n(defn apply-hoc [hoc component]\n  (-> component\n      (reactify-component)\n      (hoc)\n      (adapt-react-class)))\n\n(defn get-anycase\n  ([m k]\n   (get-anycase m k nil))\n  ([m k default]\n   (if-let [entry (or (find m (->kebab-case-keyword k))\n                      (find m (->camelCaseKeyword k)))]\n     (val entry)\n     default)))\n\n(defn assoc-anycase\n  ([m k v]\n   (assoc (dissoc m (->camelCaseKeyword k)) (->kebab-case-keyword k) v))\n  ([m k v & kvs]\n   (let [ret (assoc-anycase m k v)]\n     (if kvs\n       (recur ret (first kvs) (second kvs) (nnext kvs))\n       ret))))\n\n(defn debounce [f ms]\n  (let [timeout (volatile! nil)\n        ret (fn [& args]\n              (js/clearTimeout @timeout)\n              (vreset! timeout (js/setTimeout #(apply f args) ms)))]\n    (set! (.-clear ret) #(js/clearTimeout @timeout))\n    ret))\n\n(defn remove-undefined-vals [m]\n  (persistent!\n   (reduce-kv (fn [acc k v]\n                (if (undefined? v)\n                  (dissoc! acc k)\n                  acc))\n              (transient m)\n              m)))\n\n(defn set-ref [ref value]\n  (cond\n    (fn? ref) (ref value)\n    ref (set! (.-current ref) value)))\n\n(defn use-fork-ref [& refs]\n  (react/useMemo #(when (not-every? nil? refs)\n                    (fn [value]\n                      (doseq [ref refs]\n                        (set-ref ref value))))\n                 (apply array refs)))\n\n(defn use-callback [callback props]\n  (react/useCallback callback props))\n\n(defn use-effect [effect props]\n  (react/useEffect effect props))\n\n(defn use-layout-effect [effect]\n  (react/useLayoutEffect effect))\n\n(defn use-ref [value]\n  (react/useRef value))\n\n(defn use-state [initial-state]\n  (react/useState initial-state))\n\n(defn create-svg-icon [path display-name]\n  (let [component (react/memo (forward-ref [props ref]\n                                (e (or (.-default SvgIcon) (.-SvgIcon SvgIcon))\n                                   (js/Object.assign #js {:ref ref} props)\n                                   path)))]\n    (adapt-react-class component display-name)))\n"]}