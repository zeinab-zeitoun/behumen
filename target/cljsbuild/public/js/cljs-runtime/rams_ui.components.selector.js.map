{"version":3,"sources":["rams_ui/components/selector.cljs"],"mappings":";AAwBA,AAAKA,AAAa,AAACC,AAAY,AAAKC;AAAL,AAAA,AAAA,AAAA,AAAA,AACuB,AAAAC,AAAC,AAAA,AAAUD;AAAX,AAAA,AAAAC,AAAAA,AAAA,AAAAA,AAAA;AADvB,AAE0B,AAAAC,AAAC,AAAA,AAAUF;AAAX,AAAA,AAAAE,AAAAA,AAAA,AAAAA,AAAA;;;AAEzD,AAAA,AAAAC,AAAOM;AAAP,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAC4CU;AAD5C,AAAAN,AAAAJ,AAAA,AAE2Cc;AAF3C,AAAAV,AAAAJ,AAAA,AACoCS;AADpC,AAAAL,AAAAJ,AAAA,AAGuBgB;AAHvB,AAAAZ,AAAAJ,AAAA,AACoBQ;AADpB,AAAAJ,AAAAJ,AAAA,AAEWW;AAFX,AAAAP,AAAAJ,AAAA,AAEuBa;AAFvB,AAAAT,AAAAJ,AAAA,AAEiBY;AAFjB,AAAAR,AAAAJ,AAAA,AAG2CmB;AAH3C,AAAAf,AAAAJ,AAAA,AAG6BiB;AAH7B,AAAAb,AAAAJ,AAAA,AACcO;AADd,AAAAH,AAAAJ,AAAA,AACWM;AADX,AAAAF,AAAAJ,AAAA,AAGkCkB;AAHlC,AAAAd,AAAAJ,AAAA,AAGWe;AAHX,AAIE,AAAMK,AAAM,AAAA,AAAA,AAACC,AAAUf,AAAgBS,AACTC;AAD9B,AAAA,AAEG,AAAIG,AACFG,AACAC,AACF,AAAA,AAAA,AAACC,AAAM,AAAA,AAAA,AAAA,AAAA,AAAMb,AACIA,AACV,AAAA,AAAA,AAAA,AAAA,AAAMM,AACGA,AACT,AAAA,AAAA,AAAA,AAAA,AAAA,AAAMP,AAEM,AAAKe;AAAL,AACE,AAAMC,AAAS,AAAW,AAAUD;AAApC,AACE,AAACE,AAAUrB,AACA,AAAIoB,AACF,AAAIR,AACF,AAAA,AAAAU,AAACC,AAAMT,AAAMR,AACbA,AACF,AAAIM,AACF,AAAA,AAAAY,AAACC;AAAD,AAAS,AAAAD,AAACE,AAAEpB;AAN3B,AAAA,AAKa,AACE,AAAAgB,AAAsBR,AAEbL,AACNC;;AAClB,AAAM,AAACiB,AAAInB;AAAX,AACE,AAACA,AAAAA,AAAAA,AAAUY,AAAAA;;AADb;;AAEhB,AAAI,AAAAQ,AAAI,AAAAC,AAAK,AAAIjB,AACF,AAAA,AAAAkB,AAACC;AAAD,AAAO,AAAAD,AAACJ,AAAEpB;AAAV,AAAAgB,AAAoBR,AACpB,AAAA,AAAAQ,AAACI,AAAEpB,AAAOQ;AAFjB,AAAA,AAAAe;AAGKvB;;AAHLuB;;;AAAJ,AAAA,AAAAD;AAAAA;;AAII,AAAAC,AAAKtB;AAAL,AAAA,AAAAsB;AACK,AAAIjB;AACF,AAAA,AAAAoB,AAACD;AAAD,AAAO,AAAAC,AAACN,AAAEnB;AAAV,AAAAe,AAAkCR;;AAClC,AAAA,AAAAQ,AAACI,AAAEnB,AAAqBO;;;AAH/Be;;;AAJR,AAAA,AAAA,AAAA,AAAA,AAAA,AAUA,AAAM,AAAAA,AAAKtB;AAAL,AAAA,AAAAsB;AACK,AAAIjB;AACF,AAAA,AAAAqB,AAACF;AAAD,AAAO,AAAAE,AAACP,AAAEnB;AAAV,AAAAe,AAAkCR;;AAClC,AAAA,AAAAQ,AAACI,AAAEnB,AAAqBO;;;AAH/Be;;AAAN,AAAA,AAAA,AAAA,AAAA;;AAMZ;;;;;;;;;;;;;;;AAAA,AAAAK,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxC,AAAA,AAAAwC,AAAA,AAAA,AAAA,AAAA,AAAAvC,AAAAC,AAAAsC,AAAAA;AAAAA,AAgBkDE;AAhBlD,AAAAvC,AAAAqC,AAAA,AAcoC/B;AAdpC,AAAAN,AAAAqC,AAAA,AAe2C3B;AAf3C,AAAAV,AAAAqC,AAAA,AAgBuBzB;AAhBvB,AAAAZ,AAAAqC,AAAA,AAcoBjC;AAdpB,AAAAJ,AAAAqC,AAAA,AAeW9B;AAfX,AAAAP,AAAAqC,AAAA,AAeuB5B;AAfvB,AAAAT,AAAAqC,AAAA,AAeiB7B;AAfjB,AAAAR,AAAAqC,AAAA,AAgBkCtB;AAhBlC,AAAAf,AAAAqC,AAAA,AAgB6BxB;AAhB7B,AAAAb,AAAAqC,AAAA,AAcclC;AAdd,AAAAH,AAAAqC,AAAA,AAcWnC;AAdX,AAAAF,AAAAqC,AAAA,AAgBW1B;AAhBX,AAiBE,AAAM6B,AAAK,AAAItC,AAAGA,AAAG,AAACuC;AAAtB,AACE,AAACC,AAAaF;;AACd,AAAAG;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA/C,AAAA,AAAA+C,AAAA,AAAA,AAAA,AAAA,AAAA9C,AAAAC,AAAA6C,AAAAA;AAAAA,AAEwBL;AAFxB,AAAAvC,AAAA4C,AAAA,AAA2CtC;AAA3C,AAAAN,AAAA4C,AAAA,AAC6ClC;AAD7C,AAAAV,AAAA4C,AAAA,AAAmCvC;AAAnC,AAAAL,AAAA4C,AAAA,AAEahC;AAFb,AAAAZ,AAAA4C,AAAA,AAAmBxC;AAAnB,AAAAJ,AAAA4C,AAAA,AACarC;AADb,AAAAP,AAAA4C,AAAA,AACyBnC;AADzB,AAAAT,AAAA4C,AAAA,AACmBpC;AADnB,AAAAR,AAAA4C,AAAA,AAAazC;AAAb,AAAA,AAGG0C,AACA,AAAA,AAAA,AAAA,AAACzB,AAAM,AAAA,AAAA,AAAA,AAAA,AAAMhB,AACcA,AACpB,AAAA,AAAA,AAAA,AAAA,AAAMD,AACIA,AACFK,AACE,AAAA,AAACsC,AACC7C,AAAgB,AAAA,AAAC8C,AAAMR,AAAWC;;;AAI5D;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAAQ,AAAME,AAgCHS;AAhCH,AAAA,AAAAV,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApD,AAAA,AAAAoD,AAAA,AAAA,AAAA,AAAA,AAAAnD,AAAAC,AAAAkD,AAAAA;AAAA,AAAAjD,AAAAiD,AAAA,AA+BqBS;AA/BrB,AAAA1D,AAAAiD,AAAA,AA+BW3C;AA/BX,AAAAN,AAAAiD,AAAA,AA8BuBrC;AA9BvB,AAAAZ,AAAAiD,AAAA,AA6BiCM;AA7BjC,AAAAvD,AAAAiD,AAAA,AA4BoBE;AA5BpB,AAAAnD,AAAAiD,AAAA,AA8BkC1C;AA9BlC,AAAAP,AAAAiD,AAAA,AA+B4BlC;AA/B5B,AAAAf,AAAAiD,AAAA,AA8B6BQ;AA9B7B,AAAAzD,AAAAiD,AAAA,AA8BwCpC;AA9BxC,AAAAb,AAAAiD,AAAA,AA4Bc9C;AA5Bd,AAAAH,AAAAiD,AAAA,AA4BW/C;AA5BX,AAAAF,AAAAiD,AAAA,AA6BqCO;AA7BrC,AAAAxD,AAAAiD,AAAA,AA6BWI;AA7BX,AAAArD,AAAAiD,AAAA,AA8BWtC;AA9BX,AAAAX,AAAAiD,AAAA,AA4B8BG;AA5B9B,AAAApD,AAAAiD,AAAA,AA6BsBK;AA7BtB,AAiCE,AAAMd,AAAK,AAAItC,AAAGA,AAAG,AAACuC;AAChBmB,AAAY,AAAA,AAAA,AAACC,AAAU3D,AAAgBS,AACTC;AAC9BI,AAAM,AAAA,AAAA,AAACC,AAAUf,AAAgBS,AACTC;AAJ9B,AAKE,AAAC8B,AAAaF;;AACd,AAAAsB,AAGKH;AAHL,AAAA,AAAAI,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlE,AAAA,AAAAkE,AAAA,AAAA,AAAA,AAAA,AAAAjE,AAAAC,AAAAgE,AAAAA;AAAA,AAAA/D,AAAA+D,AAAA,AAE4BL;AAF5B,AAAA1D,AAAA+D,AAAA,AAEkBzD;AAFlB,AAAAN,AAAA+D,AAAA,AACmCR;AADnC,AAAAvD,AAAA+D,AAAA,AAAmBZ;AAAnB,AAAAnD,AAAA+D,AAAA,AAAuCxD;AAAvC,AAAAP,AAAA+D,AAAA,AAEalD;AAFb,AAAAb,AAAA+D,AAAA,AAAa5D;AAAb,AAAAH,AAAA+D,AAAA,AACuCP;AADvC,AAAAxD,AAAA+D,AAAA,AACaV;AADb,AAAArD,AAAA+D,AAAA,AAA6BX;AAA7B,AAAApD,AAAA+D,AAAA,AACwBT;AADxB,AAIE,AAAMI,AAAO,AAAA5B,AAAI4B;AAAJ,AAAA,AAAA5B;AAAAA;;AAAA,AAAAA,AACI,AAAAC,AAAKoB;AAAL,AAAA,AAAApB;AAAA,AAAe,AAAA,AAAAP,AAACwC,AAAQhD,AACnB,AAAK,AAAA,AAAAQ,AAAA,AAAOR;;AADjBe;;;AADJ,AAAA,AAAAD;AAAAA;;AAGI,AAAAC,AAAKwB;AAAL,AAAA,AAAAxB;AAAA,AAAAA,AAAA,AAAAP,AAAUR;AAAV,AAAA,AAAAe;AACK,AAAG,AAAA,AAAAP,AAACyC,AAAOjD,AAAOuC;;AADvBxB;;;AAAAA;;;;;AAEXmC,AAAW,AAAC5E,AAAAA,AAAAA;AALlB,AAAA,AAMG6E,AAAa,AAAC/C,AAAM,AAAA,AAAA,AAAA,AAAA,AAAA,AAAM+B,AAEN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAMM,AAEN,AAAM,AAAA3B,AAAI4B;AAAJ,AAAA,AAAA5B;AAAAA;;AAAA,AAAAN,AAAYoC;;AAVzC,AAAA,AAAA,AAAA,AAAA,AAMgB,AAAA,AAAA,AAIO,AAAA,AAAA,AAAA,AAAA,AAGc,AAAA,AAAQM,AAAYZ,AACrDc,AAAiCjE,AACjCkE,AACA,AAACC,AACA,AAAAC,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAA;;AAAA,AAAA,AAAAE,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAAE;AAAA,AAAA,AAAAF,AAAAE;AAAA,AAAA,AAAA,AAAAE,AAAAJ;AAAA,AAAAK,AA+xEwC,AAAA+B,AAAApC;AA/xExCM,AAAA,AAAAb,AAAAY;AAAAE,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAAG,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAH;AAAA,AAAA,AAAAI,AAAAL,AAAAI,AAAMU;AAAN,AAAA,AAAA,AAAAR,AAAAJ,AAAA,AACGlC,AACA,AAAA,AAAA,AAAA,AAACzB,AAAM,AAAA,AAAA,AAAA,AAAA,AAAM,AAAA,AAAQuE,AACJ,AAAA,AAAQA,AAClB,AAAA,AAAA,AAAA,AAAA,AAAM,AAAA,AAAkBA,AACJ,AAAA,AAAkBA,AAC9B,AAAA,AAAQA,AACN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC7C,AACC7C,AAAqBuC,AACS7B,AACDI,AACL,AAAI,AAAA,AAAQ4E,AACV,AAAA,AAAQA,AACRpF,AACH,AAAI,AAAA,AAAOoF,AACT,AAAA,AAAOA,AACP9E,AACG,AAAAiB,AAAIxB,AAKR,AAAA,AAAQqF;AALJ,AAAA,AAAA7D;AAAAA;;AAAA,AAAAA,AACI,AAAA,AAAY6D;AADhB,AAAA,AAAA7D;AAAAA;;AAEI,AAAAC,AAAKyB;AAAL,AAAA,AAAAzB;AAAA,AAAS,AAACH,AAAE4B,AAAI,AAAA,AAAAhC,AAACyC,AAAOjD,AACnB,AAAA,AAAC6E;AAADD;AAAA,AAAW,AAAAA,AAAChE,AAAE,AAAA,AAAQ+D;;AAAtB,AAAAnE,AACWR;;AAFhBe;;;;AAXCnB;;AARvD,AAAA,AAAAqE,AAAA;;;;AAAA;;;;;AAAA,AAAAG,AAAA,AAAAC,AAAAN,AAAA,AAAAO,AAAA,AAAAC,AAAAf;;AAAA,AAAAY,AAAA,AAAAC,AAAAN,AAAA;;;AAAA,AAAA,AAAAS,AAAAhB,AAAMmB;AAAN,AAAA,AAAAF,AAAA,AACG5C,AACA,AAAA,AAAA,AAAA,AAACzB,AAAM,AAAA,AAAA,AAAA,AAAA,AAAM,AAAA,AAAQuE,AACJ,AAAA,AAAQA,AAClB,AAAA,AAAA,AAAA,AAAA,AAAM,AAAA,AAAkBA,AACJ,AAAA,AAAkBA,AAC9B,AAAA,AAAQA,AACN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC7C,AACC7C,AAAqBuC,AACS7B,AACDI,AACL,AAAI,AAAA,AAAQ4E,AACV,AAAA,AAAQA,AACRpF,AACH,AAAI,AAAA,AAAOoF,AACT,AAAA,AAAOA,AACP9E,AACG,AAAAiB,AAAIxB,AAKR,AAAA,AAAQqF;AALJ,AAAA,AAAA7D;AAAAA;;AAAA,AAAAA,AACI,AAAA,AAAY6D;AADhB,AAAA,AAAA7D;AAAAA;;AAEI,AAAAC,AAAKyB;AAAL,AAAA,AAAAzB;AAAA,AAAS,AAACH,AAAE4B,AAAI,AAAA,AAAAhC,AAACyC,AAAOjD,AACnB,AAAA,AAAC6E;AAADD;AAAA,AAAW,AAAAA,AAAChE,AAAE,AAAA,AAAQ+D;;AAAtB,AAAAnE,AACWR;;AAFhBe;;;;AAnBtD,AAAAuD,AAAA,AAAAI,AAAAlB,AAQuD5D;;;AARvD;;;;AAAA,AAAA;;AAAA,AAAA,AAAA2D,AAAWZ;AAuBb,AAAM,AAAA7B,AAAIuB;AAAJ,AAAA,AAAAvB;AAAAA;;AAAA,AAAAA,AAAesB;AAAf,AAAA,AAAAtB;AAAAA;;AACI,AAAAC,AAAA,AAAAP,AAAMoC;AAAN,AAAA,AAAA7B;AACK,AAAA,AAAAP,AAAA,AAACsE,AAAMlC;;AADZ7B;;;;AADV,AAAA,AAGGgE,AACA,AAAI,AAAAhE,AAAA,AAAAP,AAAMoC;AAAN,AAAA,AAAA7B;AACK,AAAA,AAAAP,AAAA,AAACsE,AAAMlC;;AADZ7B;;AAAJ,AAAAP,AAEGoC,AACD,AAAI,AAAA7B,AAAK2B;AAAL,AAAA,AAAA3B;AAAYsB;;AAAZtB;;AAPT,AAQOsB,AACAD;;;AAGhB;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAA4C,AAAME,AA4BHvC;AA5BH,AAAA,AAAAsC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApG,AAAA,AAAAoG,AAAA,AAAA,AAAA,AAAA,AAAAnG,AAAAC,AAAAkG,AAAAA;AAAA,AAAAjG,AAAAiG,AAAA,AA2B2CvC;AA3B3C,AAAA1D,AAAAiG,AAAA,AA2BiC3F;AA3BjC,AAAAN,AAAAiG,AAAA,AA2BWrF;AA3BX,AAAAZ,AAAAiG,AAAA,AAyBoB9C;AAzBpB,AAAAnD,AAAAiG,AAAA,AA2BsB1F;AA3BtB,AAAAP,AAAAiG,AAAA,AA2BiBxC;AA3BjB,AAAAzD,AAAAiG,AAAA,AA2B4BpF;AA3B5B,AAAAb,AAAAiG,AAAA,AAyBc9F;AAzBd,AAAAH,AAAAiG,AAAA,AAyBW/F;AAzBX,AAAAF,AAAAiG,AAAA,AA0BW5C;AA1BX,AAAArD,AAAAiG,AAAA,AA0BiCtF;AA1BjC,AAAAX,AAAAiG,AAAA,AAyB8B7C;AAzB9B,AAAApD,AAAAiG,AAAA,AA0BsB3C;AA1BtB,AA6BE,AAAMd,AAAK,AAAItC,AAAGA,AAAG,AAACuC;AAChBmB,AAAY,AAAA,AAAA,AAACC,AAAU3D,AAAgBS,AACTC;AAC9BI,AAAM,AAAA,AAAA,AAACC,AAAUf,AAAgBS,AACTC;AAJ9B,AAKE,AAAC8B,AAAaF;;AACd,AAAA2D,AAGKxC;AAHL,AAAA,AAAAyC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvG,AAAA,AAAAuG,AAAA,AAAA,AAAA,AAAA,AAAAtG,AAAAC,AAAAqG,AAAAA;AAAA,AAAApG,AAAAoG,AAAA,AAE4B1C;AAF5B,AAAA1D,AAAAoG,AAAA,AAEkB9F;AAFlB,AAAAN,AAAAoG,AAAA,AAAmBjD;AAAnB,AAAAnD,AAAAoG,AAAA,AAAuC7F;AAAvC,AAAAP,AAAAoG,AAAA,AAEavF;AAFb,AAAAb,AAAAoG,AAAA,AAAajG;AAAb,AAAAH,AAAAoG,AAAA,AACa/C;AADb,AAAArD,AAAAoG,AAAA,AAA6BhD;AAA7B,AAAApD,AAAAoG,AAAA,AACwB9C;AADxB,AAIE,AAAMI,AAAO,AAAA5B,AAAI4B;AAAJ,AAAA,AAAA5B;AAAAA;;AAAA,AAAAA,AAAA,AAAAN,AAAYoC;AAAZ,AAAA,AAAA9B;AAAAA;;AACI,AAAAC,AAAKoB;AAAL,AAAA,AAAApB;AAAA,AAAe,AAAA,AAAAP,AAACwC,AAAQhD,AACnB,AAAK,AAAA,AAAAQ,AAAA,AAAOR;;AADjBe;;;;;AAEXmC,AAAW,AAAC5E,AAAAA,AAAAA;AAHlB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAIG6E,AAAa,AAAA,AAAA,AAAA,AAAC/C,AAAM,AAAA,AAAA,AAAA,AAAA,AAAA,AAAM+B,AAEN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAMM,AAEN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAMC,AAEQ,AAAA,AAAQQ,AAAYZ,AACrDc,AAAiCjE,AACjCkG,AAAyB,AAAA,AAAA7E,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAOR,AACIA,AACpC,AAACsD,AACA,AAAAC,AAAA,AAAA+B;AAAA,AAAA,AAAA7B,AAAA,AAAA;AAAA,AAAA,AAAA6B,AAAAA;;AAAA,AAAA,AAAA5B,AAAA,AAAAC,AAAA2B;AAAA,AAAA,AAAA5B;AAAA,AAAA,AAAA4B,AAAA5B;AAAA,AAAA,AAAA,AAAAE,AAAA0B;AAAA,AAAAzB,AAssEwC,AAAA+B,AAAAN;AAtsExCxB,AAAA,AAAAb,AAAAY;AAAA0B,AAAA,AAAAvB,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAA0B,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAA1B;AAAA,AAAA,AAAAI,AAAAL,AAAA2B,AAAMb;AAAN,AAAA,AAAA,AAAAR,AAAAoB,AAAA,AACG1D,AACA,AAAA,AAAA,AAAA,AAACzB,AAAM,AAAA,AAAA,AAAA,AAAA,AAAM,AAAA,AAAQuE,AACJ,AAAA,AAAQA,AAClB,AAAA,AAAA,AAAA,AAAA,AAAM,AAAA,AAAkBA,AACJ,AAAA,AAAkBA,AAC9B,AAAA,AAAQA,AACJ,AAAA7D,AAAIxB;AAAJ,AAAA,AAAAwB;AAAAA;;AACI,AAAA,AAAY6D;;AANnC,AAOiB,AAAA,AAAC7C,AACC4D,AAAM,AAACtF,AAAM,AAAM,AAAAU,AAAIvB;AAAJ,AAAA,AAAAuB;AAAAA;;AAAU,AAAA,AAAQ6D;;AAA/B,AAAA,AAAO,AAAA,AAAA,AAAA,AACU,AAAI,AAAA,AAAQA,AACV,AAAA,AAAQA,AACRpF,AACA;AAAKc;AAAL,AACE,AAAMC,AAAS,AAAW,AAAUD;AAApC,AACE,AAACsF,AAAUnE,AAAK,AAAA,AAAA,AAAMlB,AACN,AAAA,AAAQqE;;AACxC,AAAM,AAAA7D,AAAIjB;AAAJ,AAAA,AAAAiB;AAAAA;;AAAS,AAAA,AAAO6D;;AAAtB,AAAA,AAAA,AAAA,AACS,AAAI,AAAA,AAAOA,AACT,AAAA,AAAOA,AACP9E;;AArB9C,AAAA,AAAA2F,AAAA;;;;AAAA;;;;;AAAA,AAAApB,AAAA,AAAAC,AAAAkB,AAAA,AAAAE,AAAA,AAAAlB,AAAAe;;AAAA,AAAAlB,AAAA,AAAAC,AAAAkB,AAAA;;;AAAA,AAAA,AAAAf,AAAAc,AAAMX;AAAN,AAAA,AAAAF,AAAA,AACG5C,AACA,AAAA,AAAA,AAAA,AAACzB,AAAM,AAAA,AAAA,AAAA,AAAA,AAAM,AAAA,AAAQuE,AACJ,AAAA,AAAQA,AAClB,AAAA,AAAA,AAAA,AAAA,AAAM,AAAA,AAAkBA,AACJ,AAAA,AAAkBA,AAC9B,AAAA,AAAQA,AACJ,AAAA7D,AAAIxB;AAAJ,AAAA,AAAAwB;AAAAA;;AACI,AAAA,AAAY6D;;AANnC,AAOiB,AAAA,AAAC7C,AACC4D,AAAM,AAACtF,AAAM,AAAM,AAAAU,AAAIvB;AAAJ,AAAA,AAAAuB;AAAAA;;AAAU,AAAA,AAAQ6D;;AAA/B,AAAA,AAAO,AAAA,AAAA,AAAA,AACU,AAAI,AAAA,AAAQA,AACV,AAAA,AAAQA,AACRpF,AACA;AAAKc;AAAL,AACE,AAAMC,AAAS,AAAW,AAAUD;AAApC,AACE,AAACsF,AAAUnE,AAAK,AAAA,AAAA,AAAMlB,AACN,AAAA,AAAQqE;;AACxC,AAAM,AAAA7D,AAAIjB;AAAJ,AAAA,AAAAiB;AAAAA;;AAAS,AAAA,AAAO6D;;AAlBzD,AAAAc,AAAA,AAAAf,AAAAY,AAkBmC,AAAA,AAAA,AAAA,AACS,AAAI,AAAA,AAAOX,AACT,AAAA,AAAOA,AACP9E;;;AArB9C;;;;AAAA,AAAA;;AAAA,AAAA,AAAA0D,AAAWZ;AAsBb,AAAM,AAAA7B,AAAIuB;AAAJ,AAAA,AAAAvB;AAAAA;;AAAA,AAAAA,AAAesB;AAAf,AAAA,AAAAtB;AAAAA;;AACI,AAAAC,AAAA,AAAAP,AAAMoC;AAAN,AAAA,AAAA7B;AACK,AAAA,AAAAP,AAAA,AAACsE,AAAMlC;;AADZ7B;;;;AADV,AAAA,AAGGgE,AACA,AAAI,AAAAhE,AAAA,AAAAP,AAAMoC;AAAN,AAAA,AAAA7B;AACK,AAAA,AAAAP,AAAA,AAACsE,AAAMlC;;AADZ7B;;AAAJ,AAAAP,AAEGoC,AACD,AAAI,AAAA7B,AAAK2B;AAAL,AAAA,AAAA3B;AAAYsB;;AAAZtB;;AAPT,AAQOsB,AACAD","names":["rams-ui.components.selector/check-styles","reagent_material_ui.styles.make_styles","theme","fexpr__80712","fexpr__80713","p__80718","map__80719","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","rams-ui.components.selector/checkbox-helper","id","label","label-placement","classes","disabled?","color","value","indeterminate-value","on-change","persistent?","model","size","grouped?","as-switch?","state","rams_ui.util.get_value","reagent-material-ui.core.switch-component/switch","reagent-material-ui.core.checkbox/checkbox","cljs.core.merge","evt","clicked?","rams_ui.util.set_value","cljs.core/deref","cljs.core.conj","p1__80714#","cljs.core.remove","cljs.core._EQ_","cljs.core/fn?","or__4126__auto__","and__4115__auto__","p1__80715#","cljs.core/some","p1__80716#","p1__80717#","p__80721","map__80722","rams-ui.components.selector/checkbox","config","uuid","rams-ui.util/gen-uuid","rams-ui.util/rendering-id","p__80724","map__80725","reagent-material-ui.core.form-control-label/form-control-label","reagent.core.as_element","cljs.core.assoc","p__80728","map__80729","rams-ui.components.selector/checkbox-group","required?","help-text","error-text","class-name","min","max","row?","error?","items","error-state","rams_ui.util.get_error","p__80731","map__80732","cljs.core/empty?","cljs.core/count","use-styles","reagent-material-ui.core.form-control/form-control","reagent-material-ui.core.form-label/form-label","reagent-material-ui.core.form-group/form-group","cljs.core.doall","iter__4529__auto__","s__80735","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__80737","cljs.core/chunk-buffer","i__80736","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__80734","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","item","p1__80727#","cljs.core/not-any?","cljs.core.not_EQ_","reagent-material-ui.core.form-helper-text/form-helper-text","p__80738","map__80739","rams-ui.components.selector/radio-group","p__80741","map__80742","reagent-material-ui.core.radio-group/radio-group","s__80745","b__80747","i__80746","iter__80744","reagent-material-ui.core.radio/radio","rams-ui.util/set-value","cljs.core/chunk-first"],"sourcesContent":["(ns rams-ui.components.selector\n  \"Offers access to checkbox, checkbox group and radio group\"\n  (:require [reagent.core :as r]\n            [re-frame.core :refer [dispatch subscribe reg-event-db reg-sub]]\n            [clojure.string :as cstr]\n            [rams-ui.util :refer [gen-uuid rendering-id set-db-value\n                                  set-value get-value get-db-value\n                                  open-url go-back get-history\n                                  set-error get-error]]\n            [rams-ui.components.list :refer [items-list set-selected-item]]\n\n            [reagent-material-ui.styles :refer [make-styles with-styles]]\n            [reagent-material-ui.core.box :refer [box]]\n            [reagent-material-ui.core.switch-component :refer [switch]]\n            [reagent-material-ui.core.radio :refer [radio]]\n            [reagent-material-ui.core.checkbox :as ccheckbox]\n            [reagent-material-ui.core.radio-group :as cradio-group]\n            [reagent-material-ui.core.form-group :refer [form-group]]\n            [reagent-material-ui.core.form-helper-text :refer [form-helper-text]]\n            [reagent-material-ui.core.form-label :refer [form-label]]\n            [reagent-material-ui.core.form-control :refer [form-control]]\n            [reagent-material-ui.core.form-control-label :refer [form-control-label]]\n            [reagent-material-ui.core.typography :refer [typography]]))\n\n(def check-styles (make-styles (fn [theme]\n                                 {:group {:margin-top ((:spacing theme) 2)\n                                          :margin-bottom ((:spacing theme) 2)}})))\n\n(defn- checkbox-helper\n  [{:keys [id label label-placement classes disabled?\n           color value indeterminate-value on-change\n           persistent? model size grouped? as-switch?]}]\n  (let [state (get-value id :persistent? persistent?\n                         :model model)]\n    [(if as-switch?\n       switch\n       ccheckbox/checkbox)\n     (merge (when color\n              {:color color})\n            (when size\n              {:size size})\n            (when disabled?\n              {:disabled true})\n            {:on-change (fn [evt]\n                          (let [clicked? (.-checked (.-target evt))]\n                            (set-value id\n                                       (if clicked?\n                                         (if grouped?\n                                           (conj @state value)\n                                           value)\n                                         (if grouped?\n                                           (remove #(= value %) @state)\n                                           nil))\n                                       :persistent? persistent?\n                                       :model model)\n                            (when (fn? on-change)\n                              (on-change clicked?))))}\n            (if (or (and (if grouped?\n                           (some #(= value %) @state)\n                           (= value @state))\n                         value)\n                    (and indeterminate-value\n                         (if grouped?\n                           (some #(= indeterminate-value %) @state)\n                           (= indeterminate-value @state))))\n              {:checked true}\n              {:checked false})\n            (when (and indeterminate-value\n                       (if grouped?\n                         (some #(= indeterminate-value %) @state)\n                         (= indeterminate-value @state)))\n              {:indeterminate true}))]))\n\n(defn checkbox\n  \"creates a material ui checkbox component. It takes the following configurations:\n\n  - **:id**: is an optional keyword/string/number/array that uniquely identifies the menu. This is useful to preset the value of the checkbox.\n  - **:label**: is an optional label that will appear with the checkbox. By default the label appears to the left in ltr and right in rtl\n  - **:label-placement**: is an optional string to indicate where the label should be placed. Potential values are left | right | top | bottom. Note that left and right will take into account the ltr/rtl direction of the page\n  - **:disabled?**: is a boolean indicating whether the checkbox is disabled?\n  - **:color**: is an optional string that identifies the color. Potential values are primary | secondary | default\n  - **:value**: is a required argument and is given to the **id** key once the checkbox is selected. Note that the **id** should have this value if the checkbox is to be preselected \n  - **:indeterminate-value**: is an option argument and is given to the **id** key once the checkbox is in an indeterminate state. Note that the **id** should have this value if the checkbox is to be indeterminate. This is usually useful when a select all has some selected but not all\n  - **on-change**: is an optional function that is called when the checkbox is clicked. It is given a single argument that is true if checked and false if not\n  - **:persistent?**: an optional boolean identifies that the state of the checkbox will carry over from one page to the next\n  - **:model**: is an optional atom that can be given to have the **id** part of. Should only be used if the history is not needed\n  - **:size**: is an optional string that indicates the size of the checkbox. Potential values are size | medium with the default being medium \"\n  [{:keys [id label label-placement disabled?\n           color value indeterminate-value on-change\n           persistent? model size as-switch?] :as config}]\n  (let [uuid (if id id (gen-uuid))]\n    (rendering-id uuid)\n    (fn [{:keys [label label-placement classes disabled?\n                 color value indeterminate-value on-change\n                 model] :as config}]\n      [form-control-label\n       (merge (when label-placement\n                {:label-placement label-placement})\n              (when label\n                {:label label})\n              {:value value\n               :control (r/as-element\n                         [checkbox-helper (assoc config :id uuid)])})])))\n\n\n\n(defn checkbox-group\n  \"creates a material ui checkbox group component. It takes the following arguments:\n\n  - **config**: is a configuration hash map thta is made up of the following keys\n     - **:id**: is an optional keyword/string/number/array that uniquely identifies the menu. This is useful to preset the value of the checkboxs or get the value. It returns a list of the values of the checked checkboxes.\n     - **:label**: is an optional label that will appear with the checkbox. By default the label appears to the left in ltr and right in rtl\n     - **:disabled?**: is a boolean indicating whether the checkbox group is disabled?\n     - **:color**: is an optional string that identifies the default color of the checkboxes. Potential values are primary | secondary | default\n     - **:persistent?**: an optional boolean identifies that the state of the checkbox will carry over from one page to the next\n     - **:model**: is an optional atom that can be given to have the **id** part of. Should only be used if the history is not needed\n     - **:size**: is an optional string that indicates the default size of the checkboxs. Potential values are size | medium with the default being medium\n     - **:help-text**: is an optional help text that will appear under the checkboxes if no error is present\n     - **:error-text**: is an optional help text that will appear under the checkboxes if there is an error\n     - **:error?**: is an optional boolean to indicate that there is an error\n     - **:min**: is an optional integer to indicate the minimum required checkboxes to select. If given and there is less checkboxes selected then an error is raised irrespective of value of **:error?**\n     - **:max**: is an optional integer to indicate the maximum allowed checkboxes to select. After the number is selected the remaining checkboxes are disabled.\n     - **:row?**: is an optional boolean to indicate whether the group should be rendered horizontally or vertically. If horizontally then it will wrap at the end of the width\n     - **:required?**: is an optional boolean indicating whether selecting some checkboxes is required or not.\n     - **:class-name**: is an optional style given to the whole group\n  - **items**: is an array of hashmaps each identifying one of the checkbox options. Each hashmap has the following:\n     - **:label**: is a required argument that will appear with the checkbox. By default the label appears to the left in ltr and right in rtl\n     - **:value**: is a required argument and is the value added to the array result of **:id** when checkbox selected.\n    - **:label-placement**: is an optional string to indicate where the label should be placed for this checkbox. Potential values are left | right | top | bottom. Note that left and right will take into account the ltr/rtl direction of the page \n     - **:disabled?**: is a boolean indicating whether this checkbox is disabled?\n     - **:color**: is an optional string that identifies the color of this checkbox. Potential values are primary | secondary | default\n     - **:size**: is an optional string that indicates the  size of this checkbox. Potential values are size | medium with the default being medium\n  \"\n\n  [{:keys [id label required? help-text\n           error-text class-name min max\n           persistent? model row? color size\n           disabled? error? as-switch?]}\n   items]\n  (let [uuid (if id id (gen-uuid))\n        error-state (get-error id :persistent? persistent?\n                               :model model)\n        state (get-value id :persistent? persistent?\n                         :model model)]\n    (rendering-id uuid)\n    (fn [{:keys [label required? help-text color\n                 error-text class-name min max\n                 size disabled? error?]}\n         items]\n      (let [error? (or error?\n                       (and required? (empty? @state)\n                            (not (nil? @state)))\n                       (and min @state\n                            (< (count @state) min)))\n            use-styles (check-styles)]\n        [form-control (merge (when required?\n                               {:required true})\n                             (when row?\n                               {:row true})\n                             (when (or error? @error-state)\n                               {:error true})\n                             \n                             {:class-name [(:group use-styles) class-name]})\n         [form-label {:component \"legend\"} label]\n         [form-group\n          (doall\n           (for [item items]\n             [form-control-label\n              (merge (when (:label item)\n                       {:label (:label item)})\n                     (when (:label-placement item)\n                       {:label-placement (:label-placement item)})\n                     {:value (:value item)\n                      :control (r/as-element\n                                [checkbox-helper {:id uuid :model model\n                                                  :persistent? persistent?\n                                                  :as-switch? as-switch?\n                                                  :color (if (:color item)\n                                                           (:color item)\n                                                           color)\n                                                  :size (if (:size item)\n                                                          (:size item)\n                                                          size)\n                                                  :disabled? (or disabled?\n                                                                 (:disabled? item)\n                                                                 (and max (= max (count @state))\n                                                                      (not-any? #(= (:value item) %)\n                                                                                @state)))\n                                                  :value (:value item) :grouped? true}])})]))]\n         (when (or error-text help-text\n                   (and @error-state\n                        (not= @error-state true)))\n           [form-helper-text\n            (if (and @error-state\n                     (not= @error-state true))\n              @error-state\n              (if (and error? error-text)\n                error-text\n                help-text))])]))))\n\n\n(defn radio-group\n  \"creates a material ui radio group component. It takes the following arguments:\n\n  - **config**: is a configuration hash map thta is made up of the following keys\n     - **:id**: is an optional keyword/string/number/array that uniquely identifies the radio group. This is useful to preset the value of the radio group or get the value. It returns a single value.\n     - **:label**: is an optional label that will appear with the checkbox. By default the label appears to the left in ltr and right in rtl\n     - **:disabled?**: is a boolean indicating whether the checkbox group is disabled?\n     - **:color**: is an optional string that identifies the default color of the checkboxes. Potential values are primary | secondary | default\n     - **:persistent?**: an optional boolean identifies that the state of the checkbox will carry over from one page to the next\n     - **:model**: is an optional atom that can be given to have the **id** part of. Should only be used if the history is not needed\n     - **:size**: is an optional string that indicates the default size of the checkboxs. Potential values are size | medium with the default being medium\n     - **:help-text**: is an optional help text that will appear under the checkboxes if no error is present\n     - **:error-text**: is an optional help text that will appear under the checkboxes if there is an error\n     - **:error?**: is an optional boolean to indicate that there is an error\n     - **:row?**: is an optional boolean to indicate whether the group should be rendered horizontally or vertically. If horizontally then it will wrap at the end of the width\n     - **:required?**: is an optional boolean indicating whether selecting some checkboxes is required or not.\n     - **:class-name**: is an optional style given to the whole group\n  - **items**: is an array of hashmaps each identifying one of the checkbox options. Each hashmap has the following:\n     - **:label**: is a required argument that will appear with the checkbox. By default the label appears to the left in ltr and right in rtl\n     - **:value**: is a required argument and is the value added to the array result of **:id** when checkbox selected.\n    - **:label-placement**: is an optional string to indicate where the label should be placed for this checkbox. Potential values are left | right | top | bottom. Note that left and right will take into account the ltr/rtl direction of the page \n     - **:disabled?**: is a boolean indicating whether this checkbox is disabled?\n     - **:color**: is an optional string that identifies the color of this checkbox. Potential values are primary | secondary | default\n     - **:size**: is an optional string that indicates the  size of this checkbox. Potential values are size | medium with the default being medium\n  \"\n  [{:keys [id label required? help-text\n           error-text class-name persistent?\n           model row? color size disabled? error?]}\n   items]\n  (let [uuid (if id id (gen-uuid))\n        error-state (get-error id :persistent? persistent?\n                               :model model)\n        state (get-value id :persistent? persistent?\n                         :model model)]\n    (rendering-id uuid)\n    (fn [{:keys [label required? help-text color\n                 error-text class-name\n                 size disabled? error?]}\n         items]\n      (let [error? (or error? @error-state\n                       (and required? (empty? @state)\n                            (not (nil? @state))))\n            use-styles (check-styles)]\n        [form-control (merge (when required?\n                               {:required true})\n                             (when row?\n                               {:row true})\n                             (when error?\n                               {:error true})\n                             {:class-name [(:group use-styles) class-name]})\n         [form-label {:component \"legend\"} label]\n         [cradio-group/radio-group (when @state\n                                     {:value @state})\n          (doall\n           (for [item items]\n             [form-control-label\n              (merge (when (:label item)\n                       {:label (:label item)})\n                     (when (:label-placement item)\n                       {:label-placement (:label-placement item)})\n                     {:value (:value item)\n                      :disabled? (or disabled?\n                                     (:disabled? item))\n                      :control (r/as-element\n                                [radio (merge (when (or color (:color item))\n                                                {:color (if (:color item)\n                                                          (:color item)\n                                                          color)})\n                                              {:on-change (fn [evt]\n                                                            (let [clicked? (.-checked (.-target evt))]\n                                                              (set-value uuid (when clicked?\n                                                                              (:value item)))))}\n                                              (when (or size (:size item))\n                                                {:size (if (:size item)\n                                                         (:size item)\n                                                         size)}))])})]))]\n         (when (or error-text help-text\n                   (and @error-state\n                        (not= @error-state true)))\n           [form-helper-text\n            (if (and @error-state\n                     (not= @error-state true))\n              @error-state\n              (if (and error? error-text)\n                error-text\n                help-text))])]))))\n"]}