{"version":3,"sources":["rams_ui/components/alert.cljs"],"mappings":";AAcA,AAAcA,AAAG,AAACC;AAElB,AAAcC,AACZ,AAACC,AAAY,AAAKC;AAAL,AAAA,AAAA,AAAA,AAAA,AACoB,AAAAC,AAAC,AAAA,AAAUD;AAAX,AAAA,AAAAC,AAAAA,AAAA,AAAAA,AAAA;;;AAEnC,AAAA;;;;;;;;;;;;;;;AAAA,AAAAC,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AAcFQ;AAdJ,AAeG,AAAA,AAACC,AAAcD;;;AAflB,AAAA,AAAA,AAAAN,AAAMF,AAgB4CQ;AAhBlD,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAgB0CU;AAhB1C,AAAAN,AAAAJ,AAAA,AAgBYO;AAhBZ,AAAAH,AAAAJ,AAAA,AAgBoBQ;AAhBpB,AAAAJ,AAAAJ,AAAA,AAgBgCS;AAhBhC,AAiBG,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACE,AAAUtB,AACakB,AACHE,AACOD,AACJH;;;AArB3B,AAAA,AAAA,AAAMR;;AAAN,AAwBA,AAAA,AAAMe;AAAN,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAACD,AAAWtB;;AAEd,AAAA,AAAAwB,AAAOE,AAEwBI;AAF/B,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAb,AAAA,AAAAa,AAAA,AAAA,AAAA,AAAA,AAAAZ,AAAAC,AAAAW,AAAAA;AAAA,AAAAV,AAAAU,AAAA,AACWE;AADX,AAAAZ,AAAAU,AAAA,AACyBN;AADzB,AAAAJ,AAAAU,AAAA,AAEWG;AAFX,AAAAb,AAAAU,AAAA,AAEoBI;AAFpB,AAGE,AAAME,AAAM,AAAC7B,AAAAA,AAAAA;AAAb,AAAA,AACG8B,AAAS,AAAA,AAAA,AAACC,AAAqB,AAAAC,AAAMN;AAANM,AAAA,AAAA,AAAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAzB,AAAA,AAAA,AAAAyB;;;AAAtB,AAAA,AAaW,AAAA,AAAQJ,AACJ;AAAA,AACE,AAACP;;AACD,AAAM,AAACa,AAAIP;AAAX,AACE,AAACA,AAAAA,AAAAA;;AADH;;AAhBjB,AAkBU,AAAC5B,AACP,AAAA,AAAA,AAAA,AAAA,AAAM,AAAA,AAAM,AAAA,AAAO6B,AACP,AAAA,AAAUA,AACtB,AAAM,AAAAO,AAAKV;AAAL,AAAA,AAAAU;AACK,AAAA,AAACC,AAAKX;;AADXU;;AAAN,AAAA,AAAA,AAAA,AAEuBV,AACvB,AAAM,AAAAY,AAAIpB;AAAJ,AAAA,AAAAoB;AAAAA;;AAAgB,AAAA,AAAUT;;AAAhC,AAAA,AAAA,AACW,AAAA,AAAA,AAACU,AAEC,AAAA,AAAM,AAAA,AAAUV,AACd,AAAAW,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAA;;AAAA,AAAA,AAAAE,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAAE;AAAA,AAAA,AAAAF,AAAAE;AAAA,AAAA,AAAA,AAAAE,AAAAJ;AAAA,AAAAK,AAs3EkB,AAAAyB,AAAA9B;AAt3ElBM,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAI,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAJ;AAAA,AAAA,AAAAK,AAAAN,AAAAK,AAAMU;AAAN,AAAA,AAAA,AAAAR,AAAAJ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACGa,AACgB,AAAA,AAAI,AAAA,AAAQD,AACV,AAAA,AAAQA,AAEP;;AAAA,AACE,AAACvC;;AACD,AAAA,AAAWuC;;AAChC,AAAA,AAAQA;;AARX,AAAA,AAAAV,AAAA;;;;AAAA;;;;;AAAA,AAAAG,AAAA,AAAAC,AAAAN,AAAA,AAAAO,AAAA,AAAAC,AAAAhB;;AAAA,AAAAa,AAAA,AAAAC,AAAAN,AAAA;;;AAAA,AAAA,AAAAS,AAAAjB,AAAMoB;AAAN,AAAA,AAAAF,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACGG,AACgB,AAAA,AAAI,AAAA,AAAQD,AACV,AAAA,AAAQA,AAEP;;AAAA,AACE,AAACvC;;AACD,AAAA,AAAWuC;;AAPnC,AAAAL,AAAA,AAAAI,AAAAnB,AAQG,AAAA,AAAQoB;;;AARX;;;;AAAA,AAAA;;AAAA,AAAA,AAAArB,AAAa,AAAA,AAAUX;AAJtC,AAGa,AAUA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAMX,AACH6C,AAAyB,AAAA,AAAQjC,AACVR,AACtB0C,AAC9B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAM,AAAA,AAAOnC,AACVoC,AAAiB,AAAA,AAAOpC,AACxB,AAAA,AAAUA;;AAElB;;;;;;;;AAAA,AAAAqC,AAAME;AAAN,AAAA,AAAAD,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxD,AAAA,AAAAwD,AAAA,AAAA,AAAA,AAAA,AAAAvD,AAAAC,AAAAsD,AAAAA;AAAA,AAAArD,AAAAqD,AAAA,AAOWzC;AAPX,AAAAZ,AAAAqD,AAAA,AAOyBjD;AAPzB,AAAAJ,AAAAqD,AAAA,AAQWxC;AARX,AAAAb,AAAAqD,AAAA,AAQoBvC;AARpB,AASE,AAAMC,AAAM,AAAA,AAAA,AAACyC,AAAUvE;AAAvB,AAAA,AAAA,AAAAsE,AACG5C,AAAkBI","names":["rams-ui.components.alert/id","rams-ui.util/gen-uuid","rams-ui.components.alert/use-styles","reagent_material_ui.styles.make_styles","theme","fexpr__80324","var_args","G__80326","rams-ui.components.alert/show-alert","js/Error","p__80327","map__80328","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","message","rams_ui.components.alert.show_alert","actions","show-close?","type","config","rams_ui.util.set_value","rams-ui.components.alert/hide-alert","p__80330","map__80331","rams-ui.components.alert/alert-box-helper","hide-after-ms","position","on-close","state","style","reagent-material-ui.core.snackbar/snackbar","cljs.core.merge","G__80333","cljs.core/Keyword","cljs.core/fn?","and__4115__auto__","cljs.core.not_EQ_","or__4126__auto__","reagent.core.as_element","iter__4529__auto__","s__80335","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__80337","cljs.core/chunk-buffer","i__80336","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__80334","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","action","reagent-material-ui.core.button/button","reagent-material-ui.core.icon-button/icon-button","reagent-material-ui.icons.close/close","reagent-material-ui.lab.alert/alert","p__80338","map__80339","rams-ui.components.alert/alert-box","cljs.core/deref","rams_ui.util.get_value","cljs.core/chunk-first"],"sourcesContent":["(ns rams-ui.components.alert\n  (:require [reagent.core :as r]\n            [re-frame.core :refer [dispatch subscribe reg-event-db reg-sub]]\n            [clojure.string :as cstr]\n            [rams-ui.util :refer [gen-uuid rendering-id set-db-value\n                                  set-value get-value get-db-value]]\n            [reagent-material-ui.core.snackbar :refer [snackbar]]\n            [reagent-material-ui.styles :refer [make-styles]]\n            [reagent-material-ui.icons.close :as iclose]\n            [reagent-material-ui.core.icon-button :refer [icon-button]]\n            [reagent-material-ui.lab.alert :refer [alert]]\n            [reagent-material-ui.core.button :refer [button]]\n            [reagent-material-ui.core.typography :refer [typography]]))\n\n(def ^:no-doc id (gen-uuid))\n\n(def ^:no-doc use-styles\n  (make-styles (fn [theme]\n                 {:close {:padding ((:spacing theme) 0.5)}})))\n\n(defn show-alert\n  \"helper function that allows to show an alert. Takes the following arguments\n\n  - **config**: an optional hashmap identifying anything happening in the alert\n  \n    - **:actions**: an optional array of hashmaps identifying the buttons available to this alert. Each hashmap should be of the form\n      ```\n      {:label \\\"button label\\\"\n       :color \\\"primary\\\" ; could be either primary or secondary\n       :on-click (fn [] ...)\n      }```\n    - **:show-close?**: boolean to indicate if the close icon should be shown\n    - **:type**: is an optional string indicating the severity of the alert. Potential values are \\\"error\\\" | \\\"success\\\" | \\\"warning\\\" | \\\"info\\\". If left nil then the notification is shown as a black box.\n  - **message**: the string that would be shown in the box\"\n  ([message]\n   (show-alert {} message))\n  ([{:keys [actions show-close? type] :as config} message]\n   (set-value id {:open? true\n                  :actions actions\n                  :type type\n                  :show-close? show-close?\n                  :message message}\n              :persistent? true)))\n\n(defn hide-alert []\n  (set-value [id :open?] false :persistent? true))\n\n(defn- alert-box-helper\n  [{:keys [hide-after-ms show-close?\n           position on-close]} state]\n  (let [style (use-styles)]\n    [snackbar (merge {:anchorOrigin (case position\n                                   :top-right {:vertical \"top\"\n                                               :horizontal \"right\"}\n                                   :top-center {:vertical \"top\"\n                                                :horizontal \"center\"}\n                                   :top-left {:vertical \"top\"\n                                              :horizontal \"left\"}\n                                   :bottom-right {:vertical \"bottom\"\n                                                  :horizontal \"right\"}\n                                   :bottom-center {:vertical \"bottom\"\n                                                   :horizontal \"center\"}\n                                   :bottom-left {:vertical \"bottom\"\n                                                 :horizontal \"left\"})\n                   :open (:open? state)\n                   :on-close (fn []\n                               (hide-alert)\n                               (when (fn? on-close)\n                                 (on-close)))\n                   :key (gen-uuid)}\n                  (when (nil? (:type state))\n                    {:message (:message state)})\n                  (when (and hide-after-ms\n                             (not= hide-after-ms 0))\n                    {:auto-hide-duration hide-after-ms})\n                  (when (or show-close? (:actions state))\n                    {:action (r/as-element\n                              [:<>\n                               (when (:actions state)\n                                 (for [action (:actions state)]\n                                   [button  {:size \"small\"\n                                             :color (if (:color action)\n                                                      (:color action)\n                                                      \"secondary\")\n                                             :on-click (fn []\n                                                         (hide-alert)\n                                                         (:on-click action))}\n                                    (:label action)]))\n                               (when show-close?\n                                 [icon-button {:class-name (:close style)\n                                               :on-click hide-alert}\n                                  [iclose/close]])])}))\n     (when (:type state)\n       [alert {:severity (:type state)}\n        (:message state)])]))\n\n(defn alert-box\n  \"draws a react component for alerts. Only one should be added per project. Takes the following kesy\n\n  - **:hide-afer-ms**: is the number of milliseconds before the alert is autohidden\n  - **:show-close?**: is boolean indicating if there should be a close icond\n  - **:on-close**: is an optional function that will be called when the notification is hidden either automatically or by click\n  - **:position**: is an optional keyword indicating where the alert should appear. Potential values are :top-left | :top-center | :top-right | :bottom-left | :bottom-center | :bottom-right. Default is :top-left\"\n  [{:keys [hide-after-ms show-close?\n           position on-close]}]\n  (let [state (get-value id :persistent? true)]\n    [alert-box-helper @state]))\n"]}