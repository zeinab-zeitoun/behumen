{"version":3,"sources":["rams_ui/ajax.cljs"],"mappings":"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","names":["p__80344","map__80345","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","rams-ui.ajax/ajax-loader","id","type","config","uuid","state","rams_ui.util.get_value","cljs.core/deref","cljs.core._EQ_","reagent-material-ui.core.linear-progress/linear-progress","reagent-material-ui.core.circular-progress/circular-progress","cljs.core.dissoc","ajax-call-count","cljs.core.atom","loader-count","repeating-requests","rams-ui.ajax/set-config","key","value","p1__80347#","cljs.core.swap_BANG_","cljs.core.assoc","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","rams-ui.ajax/make-call","p__80351","map__80352","seq80350","self__4724__auto__","cljs.core/seq","on-success-fn","on-error-fn","on-warning-fn","on-finally-fn","show-loader?","call-key","url","method","params","no-repeat-response-fn","required-message-fn","handle-message-fn","loader-id","cljs.core/contains?","cljs.core/not","p1__80348#","rams_ui.util.set_value","cljs.core/inc","G__80356","G__80357","fexpr__80355","G__80361","cljs.core/Keyword","ajax.core/POST","ajax.core/PUT","ajax.core/GET","p__80358","map__80359","status","message","result","and__4115__auto__","cljs.core/fn?","cljs.core/dec","p1__80349#"],"sourcesContent":["(ns rams-ui.ajax\n  (:require [ajax.core :refer [GET POST PUT]]\n            [rams-ui.util :refer [gen-uuid rendering-id set-db-value\n                                  set-value get-value get-db-value]]\n            [reagent-material-ui.core.circular-progress :refer [circular-progress]]\n            [reagent-material-ui.core.linear-progress :refer [linear-progress]]))\n\n\n(defn ajax-loader\n  [{:keys [id type] :as config}]\n  (let [uuid (if id id :rams-ui|-|loader)\n        state (get-value uuid :persistent? true)]\n    (when @state\n      [(if (= :type :bar)\n         linear-progress\n         circular-progress)\n       (dissoc config :type :id)])))\n\n\n(let [ajax-call-count (atom 0)\n      loader-count (atom 0)\n      repeating-requests (atom {})\n      config (atom {:success \"success\"\n                    :error \"error\"\n                    :warning \"error\"\n                    :method :get})]\n  \n  (defn set-config\n    \"a helper function to configure the ajax call. It takes the following keys:\n\n    - **key**: is one of the following keywords:\n      - **:success**: identifies the string value of the key :success in an api request which identifies if a request if successful or not. Default is \\\"success\\\"\n      - **:error**: identifies the string value of the key :success in an api request which identifies if a request if error or not. Default is \\\"error\\\"\n      - **:warning**: identifies the string value of the key :success in an api request which identifies if a request if warning or not. Default is \\\"warning\\\"\n      - **:method**: keyword that identifies the default REST method to use and can be either :get | :post | :put. Default is :get\"\n    [key value]\n    (swap! config #(assoc % key value)))\n  \n  (defn make-call [& {:keys [on-success-fn on-error-fn\n                             on-warning-fn on-finally-fn\n                             show-loader? call-key\n                             url  method params\n                             no-repeat-response-fn\n                             required-message-fn\n                             handle-message-fn\n                             loader-id]\n                      :or {method (:method @config)}}]\n    (let [id (if loader-id\n               loader-id\n               :rams-ui|-|loader)]\n      (if (or (not (contains? @repeating-requests call-key))\n              (not no-repeat-response-fn))\n        (do\n          (swap! repeating-requests #(assoc %\n                                            call-key true))\n          (when show-loader?\n            (set-value id true :persistent? true)\n            (swap! loader-count inc))\n          (swap! ajax-call-count inc)\n          ((case method\n             :post POST\n             :put PUT\n             GET) url\n           {:params params\n            :headers {\"Accept\" \"application/transit+json\"}\n            :handler (fn [{:keys [status message] :as result}]\n                       (when (and status message (fn? handle-message-fn))\n                         (handle-message-fn result))\n                       (when (or (nil? status)\n                                 (= status (:success @config)))\n                         (when (fn? on-success-fn)\n                           (on-success-fn result)))\n                       (when (= status (:warning @config))\n                         (if (fn? on-warning-fn)\n                           (on-warning-fn result)\n                           (when (fn? on-success-fn)\n                             (on-success-fn result))))\n                       (when (= status (:error @config))\n                         (if (fn? on-error-fn)\n                           (on-error-fn result)\n                           (when (and (nil? message)\n                                      (fn? required-message-fn))\n                             (required-message-fn result)))))\n            :finally (fn []\n                       (swap! ajax-call-count dec)\n                       (swap! loader-count dec)\n                       (when (= @loader-count 0)\n                         (set-value id false :persistent? true))\n                       (swap! repeating-requests #(dissoc % call-key))\n                       (when (fn? on-finally-fn)\n                         (on-finally-fn)))\n            :error-handler (fn [result]\n                             (when (fn? on-error-fn)\n                               (on-error-fn result)))}))\n        (when (fn? no-repeat-response-fn)\n          (no-repeat-response-fn))))))\n\n\n"]}