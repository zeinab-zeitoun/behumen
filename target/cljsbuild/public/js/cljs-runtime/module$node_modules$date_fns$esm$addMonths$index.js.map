{
"version":3,
"file":"module$node_modules$date_fns$esm$addMonths$index.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,iDAAA,CAAqE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAc7GC,QAASA,uBAAsB,CAACC,GAAD,CAAM,CAAE,MAAOA,IAAA,EAAOA,GAAAC,WAAP,CAAwBD,GAAxB,CAA8B,CAAE,UAAWA,GAAb,CAAvC,CAXrCE,MAAAC,eAAA,CAAsBL,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CM,MAAO,CAAA,CADoC,CAA7C,CAGAN,QAAA,CAAQ,SAAR,CAAA,CAgCAO,QAAkB,CAACC,SAAD,CAAYC,WAAZ,CAAyB,CACzC,CAAC,CAAA,CAAGC,OAAA,CAAQ,SAAR,CAAJ,EAAwB,CAAxB,CAA2BC,SAA3B,CACA,KAAIC,KAAO,CAAC,CAAA,CAAGC,OAAA,CAAQ,SAAR,CAAJ,EAAwBL,SAAxB,CAAX,CACIM,OAAS,CAAC,CAAA,CAAGC,MAAA,CAAO,SAAP,CAAJ,EAAuBN,WAAvB,CAEb,IAAIO,KAAA,CAAMF,MAAN,CAAJ,CACE,MAAO,KAAIG,IAAJ,CAASC,GAAT,CAGT,IAAI,CAACJ,MAAL,CAEE,MAAOF,KAGT,KAAIO,WAAaP,IAAAQ,QAAA,EAAjB;AASIC,kBAAoB,IAAIJ,IAAJ,CAASL,IAAAU,QAAA,EAAT,CACxBD,kBAAAE,SAAA,CAA2BX,IAAAY,SAAA,EAA3B,CAA6CV,MAA7C,CAAsD,CAAtD,CAAyD,CAAzD,CACIW,OAAAA,CAAcJ,iBAAAD,QAAA,EAElB,IAAID,UAAJ,EAAkBM,MAAlB,CAGE,MAAOJ,kBASPT,KAAAc,YAAA,CAAiBL,iBAAAM,YAAA,EAAjB,CAAkDN,iBAAAG,SAAA,EAAlD,CAAgFL,UAAhF,CACA,OAAOP,KAxCgC,CA9B3C,KAAIG,OAASd,sBAAA,CAAuBH,OAAA,CAAQ,uDAAR,CAAvB,CAAb,CAEIe,QAAUZ,sBAAA,CAAuBH,OAAA,CAAQ,+CAAR,CAAvB,CAFd,CAIIY,QAAUT,sBAAA,CAAuBH,OAAA,CAAQ,0DAAR,CAAvB,CAZ+F;",
"sources":["node_modules/date-fns/esm/addMonths/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$date_fns$esm$addMonths$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = addMonths;\n\nvar _index = _interopRequireDefault(require(\"../_lib/toInteger/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../toDate/index.js\"));\n\nvar _index3 = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * const result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n */\nfunction addMonths(dirtyDate, dirtyAmount) {\n  (0, _index3[\"default\"])(2, arguments);\n  var date = (0, _index2[\"default\"])(dirtyDate);\n  var amount = (0, _index[\"default\"])(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  var dayOfMonth = date.getDate(); // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n\n  var endOfDesiredMonth = new Date(date.getTime());\n  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);\n  var daysInMonth = endOfDesiredMonth.getDate();\n\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);\n    return date;\n  }\n}\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","obj","__esModule","Object","defineProperty","value","addMonths","dirtyDate","dirtyAmount","_index3","arguments","date","_index2","amount","_index","isNaN","Date","NaN","dayOfMonth","getDate","endOfDesiredMonth","getTime","setMonth","getMonth","daysInMonth","setFullYear","getFullYear"]
}
