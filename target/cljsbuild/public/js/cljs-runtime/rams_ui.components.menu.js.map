{"version":3,"sources":["rams_ui/components/menu.cljs"],"mappings":"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","names":["p__68605","map__68606","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","rams-ui.components.menu/menu-helper","id","tooltip","on-click","icon","layout","hide-on-away-click?","badge","label","ref","start-icon","end-icon","max-height","width","config","menu-items","uuid","rams-ui.util/gen-uuid","menu-state","rams-ui.util/get-value","p__68608","map__68609","cljs.core/fn?","close-fn","rams-ui.util/set-value","temp-button","reagent-material-ui.core.icon-button/icon-button","reagent-material-ui.core.button/button","cljs.core.merge","evt","cljs.core/deref","js/document","G__68611","cljs.core/not","reagent.core.as_element","temp-render","reagent-material-ui.core.badge/badge","menu-list-helper","cljs.core.doall","iter__4529__auto__","s__68613","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__68615","cljs.core/chunk-buffer","i__68614","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__68612","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","item","reagent-material-ui.core.divider/divider","reagent-material-ui.core.menu-item/menu-item","fexpr__68616","fexpr__68622","fexpr__68617","fexpr__68623","reagent_material_ui.styles.make_styles","_","reagent-material-ui.core.typography/typography","reagent-material-ui.core.grid/grid","reagent-material-ui.core.list-item-icon/list-item-icon","s__68619","b__68621","i__68620","iter__68618","s__68625","b__68627","i__68626","iter__68624","action","and__4115__auto__","reagent-material-ui.core.box/box","reagent-material-ui.core.tooltip/tooltip","or__4126__auto__","reagent-material-ui.core.popper/popper","reagent-material-ui.core.paper/paper","reagent-material-ui.core.grow/grow","reagent-material-ui.core.click-away-listener/click-away-listener","reagent-material-ui.core.menu-list/menu-list","cljs.core._EQ_","reagent-material-ui.core.menu/menu","p__68628","map__68629","rams-ui.components.menu/icon-menu","p__68631","map__68632","rams-ui.components.menu/button-menu","p__68634","map__68635","rams-ui.components.menu/context-menu-helper","s__68638","b__68640","i__68639","iter__68637","fexpr__68641","fexpr__68647","fexpr__68642","fexpr__68648","s__68644","b__68646","i__68645","iter__68643","s__68650","b__68652","i__68651","iter__68649","var_args","G__68654","rams-ui.components.menu/context-menu","js/Error","p__68655","map__68656","content","rams-ui.util/rendering-id","p__68658","map__68659","cljs.core.assoc","cljs.core/chunk-first"],"sourcesContent":["(ns rams-ui.components.menu\n  (:require [reagent.core :as r]\n            [re-frame.core :refer [dispatch subscribe reg-event-db]]\n            [clojure.string :as cstr]\n            [rams-ui.util :refer [gen-uuid rendering-id set-db-value\n                                  set-value get-value get-db-value]]\n            [reagent-material-ui.core.box :refer [box]]\n            [reagent-material-ui.core.grid :refer [grid]]\n            [reagent-material-ui.core.popper :refer [popper]]\n            [reagent-material-ui.core.button :refer [button]]\n            [reagent-material-ui.core.divider :refer [divider]]\n            [reagent-material-ui.core.icon-button :refer [icon-button]]\n            [reagent-material-ui.core.tooltip :as ctooltip]\n            [reagent-material-ui.core.badge :as cbadge]\n            [reagent-material-ui.styles :refer [make-styles with-styles]]\n            [reagent-material-ui.core.menu :as cmenu]\n            [reagent-material-ui.core.grow :refer [grow]]\n            [reagent-material-ui.core.paper :refer [paper]]\n            [reagent-material-ui.core.click-away-listener :refer [click-away-listener]]\n            [reagent-material-ui.core.list-item-icon :refer [list-item-icon]]\n            [reagent-material-ui.core.menu-list :refer [menu-list]]\n            [reagent-material-ui.core.menu-item :refer [menu-item]]\n            [reagent-material-ui.core.typography :refer [typography]]))\n\n\n\n(defn- menu-helper\n  [{:keys [id tooltip on-click icon layout\n           hide-on-away-click? badge label ref\n           start-icon end-icon max-height width]\n    :or {hide-on-away-click? true} :as config}\n   menu-items]\n  (let [uuid (if id id (gen-uuid))\n        menu-state (get-value uuid)]\n    (fn [{:keys [id tooltip on-click icon layout ref\n                 hide-on-away-click? badge label start-icon\n                 end-icon  max-height width]\n          :or {hide-on-away-click? true} :as config}\n         menu-items]\n      (when (fn? ref)\n        (ref uuid))\n      (let [close-fn #(do\n                        (set-value uuid {:anchor nil :open? false})\n                        (when (fn? on-click)\n                          (on-click false)))\n            temp-button [(if icon\n                           icon-button\n                           button)\n                         (merge {:aria-label tooltip\n                                 :id (str uuid \"-button\")\n                                 :aria-has-popup \"true\"\n                                 :on-click (fn [evt]\n                                             (if (:open? @menu-state)\n                                               (close-fn)\n                                               (set-value uuid\n                                                          {:anchor (.getElementById js/document\n                                                                                    (str uuid \"-button\"))\n                                                           :open? true}))\n                                             (when (fn? on-click)\n                                               (on-click (not (:open? @menu-state)))))}\n                                (when start-icon\n                                  {:start-icon (r/as-element start-icon)})\n                                (when end-icon\n                                  {:end-icon (r/as-element end-icon)}))\n                         (if icon\n                           (r/as-element icon)\n                           label)]\n            temp-render (if badge\n                          [cbadge/badge badge\n                           temp-button]\n                          temp-button)\n            menu-list-helper (doall\n                              (for [item menu-items]\n                                (if (:divider? item)\n                                  [divider {:m 2}]\n                                  [menu-item {:on-click (fn [evt]\n                                                          (close-fn)\n                                                          (when (fn? (:on-click item))\n                                                            ((:on-click item))))\n                                              :disabled (:disabled? item)\n                                              :key (gen-uuid)\n                                              :className (:root\n                                                          ((make-styles (fn [_]\n                                                                          {:root {:justify-content \"space-between\"}}))))}\n                                   \n                                   [typography {:variant \"inherit\" :no-wrap true}\n                                    [grid {:container true\n                                           :style {:display \"block\"\n                                                   :text-overflow \"ellipsis\"\n                                                   :overflow \"hidden\"}}\n                                     (when (:icon item)\n                                       [list-item-icon\n                                        (r/as-element (:icon item))])\n                                     (:label item)]]\n                                   (when (:actions item)\n                                     (doall\n                                      (for [action (:actions item)]\n                                        [(if (and (:icon action) (not (:label action))) icon-button button)\n                                         (merge {:on-click (:on-click action)\n                                                 :key (gen-uuid)\n                                                 :size \"small\"}\n                                                (when (:color action)\n                                                  {:color (:color action)})\n                                                (when (:label action)\n                                                  {:variant \"text\"})\n                                                (when (and (:label action) (:icon action))\n                                                  {:start-icon (r/as-element (:icon action))}))\n                                         (if (and (:icon action) (not (:label action)))\n                                           (r/as-element (:icon action))\n                                           (:label action))])))])))]\n        [box\n         (if tooltip\n           [ctooltip/tooltip {:title tooltip}\n            temp-render]\n           temp-render)\n         (if (or (not hide-on-away-click?) layout)\n           [popper {:open (:open? @menu-state)\n                    :anchor-el (:anchor @menu-state)\n                    :transition true\n                    :placement (if layout layout \"bottom-end\")\n                    :disable-portal true}\n            [paper (when (or max-height width)\n                     {:style (merge\n                              (when max-height\n                                {:max-height max-height})\n                              (when width\n                                {:width width}))})\n             [grow {:in (:open? @menu-state)}\n              [click-away-listener {:on-click-away (when hide-on-away-click?\n                                                     close-fn)}\n               [menu-list {:auto-focus-item (:open? @menu-state)\n                           :on-key-down (fn [evt]\n                                          (when (= \"Tab\" (.-key evt))\n                                            (.preventDefault evt)\n                                            (close-fn)))}\n                menu-list-helper]]]]]\n           [cmenu/menu (merge {:anchor-el (:anchor @menu-state)\n                               :keep-mounted true\n                               :open (:open? @menu-state)\n                               :on-close #(close-fn)}\n                              (when (or width max-height)\n                                {:PaperProps {:style (merge\n                                                      (when max-height\n                                                        {:max-height max-height})\n                                                      (when width\n                                                        {:width width}))}}))\n            menu-list-helper])]))))\n\n(defn icon-menu\n  \"creates a material ui menu that appears when clicking an icon without the need to have to write a lot of code for the headers actions and even collapse.\n\n  - **config**: is a hash map of the tabs component. The hashmap takes arguments as defined in [material-ui](https://material-ui.com/api/cards/). The hash map includes several keys that are extra on the original set\n      - **:id**: is an optional keyword/string/number/array that uniquely identifies the menu. Once given it would allow for two very important functions:\n           - Changing whether the menu is open or not through dispatching :set-page-item with the given id and the value must be the following hashmap\n             ```clojure\n              {:anchor (.getElementById js/document\n                                       (str id \\\"-button\\\"))\n               :open? true}\n             ```\n           - Allowing the state of the card (expanded or not) to persist when using back or breadcrumb\n      - **:ref**: is an optional function that takes one argument which is the id of the element. This is useful in case you want to get the id of the item without having to provide one \n      - **:on-click**: is an optional function that will be called when the menu is opened by the user. It gives one argument which is the state of the menu (ie open or not)\n      - **:hide-on-away-click?**: is an optional boolean indicating whether clicking outside the menu will close the menu or not. \n      - **:max-height**: is an optional value of the maximum height of the menu allowed.\n      - **:icon**: a required react component that will define the icon whose click will show the menu\n      - **:width**: is an optional value of the width of the menu. Can be any of the number defined in material-ui such as 20ch (for 20 characters) | 20px (for 20 pixels) | 20% (for 20% of the width of the parent)\n      - **:tooltip**: is an optional text that will appear as tooltip under the icon button \n      - **:badge**: an optional hashmap indicating that a badge should be shown. The hashmap must follow the information in [doc|https://material-ui.com/api/badge/]\n  - **menu-items**: Array of hashmaps identifying each of the menu items that are available such that each item has the following keys:\n     - **:divider?**: an optional parameter indicating that this item is only a divider and therefore all other keys will be ignored.\n     - **:on-click**: required function to be called when the item is clicked. It is not required if \n     - **:disabled?**: an optional boolean indicating whether the item can be clicked or not\n     - **:icon**: an optional icon to appear in the item before the label\n     - **:label**: a required label that should be given as the text. Note that if the width of this label is bigger then allowed width then it will automatically be truncated\n     - **:actions**: an optional array of hashmaps describing potential actions to be done on the item. Each hashmap can have the following keywords.\n         - **:color**: an optional string indicating the color to be set for the action. Potential options are primary | secondary | default\n         - **:icon**: an optional component icon to be drawn. If this is given with a label it will be before the label\n         - **:label**: an optional string indicating the text of the button\"\n  [{:keys [id tooltip on-click icon layout\n           hide-on-away-click? badge\n           max-height width]\n    :or {hide-on-away-click? true} :as config}\n   menu-items]\n  [menu-helper config menu-items])\n\n(defn button-menu\n  \"creates a material ui menu that appears when clicking a button without the need to have to write a lot of code for the headers actions and even collapse.\n\n  - **config**: is a hash map of the tabs component. The hashmap takes arguments as defined in [material-ui](https://material-ui.com/api/cards/). The hash map includes several keys that are extra on the original set\n      - **:id**: is an optional keyword/string/number/array that uniquely identifies the menu. Once given it would allow for two very important functions:\n           - Changing whether the menu is open or not through dispatching :set-page-item with the given id and the value must be the following hashmap\n             ```clojure\n              {:anchor (.getElementById js/document\n                                       (str id \\\"-button\\\"))\n               :open? true}\n             ```\n           - Allowing the state of the card (expanded or not) to persist when using back or breadcrumb\n      - **:ref**: is an optional function that takes one argument which is the id of the element. This is useful in case you want to get the id of the item without having to provide one \n      - **:on-click**: is an optional function that will be called when the menu is opened by the user. It gives one argument which is the state of the menu (ie open or not)\n      - **:hide-on-away-click?**: is an optional boolean indicating whether clicking outside the menu will close the menu or not. \n      - **:max-height**: is an optional value of the maximum height of the menu allowed.\n      - **:width**: is an optional value of the width of the menu. Can be any of the number defined in material-ui such as 20ch (for 20 characters) | 20px (for 20 pixels) | 20% (for 20% of the width of the parent)\n      - **:tooltip**: is an optional text that will appear as tooltip under the icon button\n      - **:label**: a required string that will define the label of the button whose click will show the menu\n      - **:start-icon**: an optional react component that will draw an icon before the label\n      - **:end-icon**: an optional react component that will draw an icon after the label\n      - **:badge**: an optional hashmap indicating that a badge should be shown. The hashmap must follow the information in [doc](https://material-ui.com/api/badge/)\n  - **menu-items**: Array of hashmaps identifying each of the menu items that are available such that each item has the following keys:\n     - **:divider?**: an optional parameter indicating that this item is only a divider and therefore all other keys will be ignored.\n     - **:on-click**: required function to be called when the item is clicked. It is not required if \n     - **:disabled?**: an optional boolean indicating whether the item can be clicked or not\n     - **:icon**: an optional icon to appear in the item before the label\n     - **:label**: a required label that should be given as the text. Note that if the width of this label is bigger then allowed width then it will automatically be truncated\n     - **:actions**: an optional array of hashmaps describing potential actions to be done on the item. Each hashmap can have the following keywords.\n         - **:color**: an optional string indicating the color to be set for the action. Potential options are primary | secondary | default\n         - **:icon**: an optional component icon to be drawn. If this is given with a label it will be before the label\n         - **:label**: an optional string indicating the text of the button\"\n  [{:keys [id tooltip on-click start-icon layout\n           hide-on-away-click? badge end-icon\n           max-height width]\n    :or {hide-on-away-click? true} :as config}\n   menu-items]\n  [menu-helper config menu-items])\n\n(defn- context-menu-helper\n  [{:keys [id width max-height]} menu-items]\n  (let [menu-state (get-value id)\n        close-fn #(set-value id {:position {:top nil :left nil}\n                                 :open? false})]\n    [cmenu/menu (merge {:anchor-reference \"anchorPosition\"\n                        :anchor-position (:position @menu-state)\n                        :keep-mounted true\n                        :open (:open? @menu-state)\n                        :on-close close-fn}\n                       (when (or width max-height)\n                         {:PaperProps {:style (merge\n                                               (when max-height\n                                                 {:max-height max-height})\n                                               (when width\n                                                 {:width width}))}}))\n     (doall\n      (for [item menu-items]\n        (if (:divider? item)\n          [divider {:m 2}]\n          [menu-item {:on-click (fn [evt]\n                                  (close-fn)\n                                  (when (fn? (:on-click item))\n                                    ((:on-click item))))\n                      :disabled (:disabled? item)\n                      :key (gen-uuid)\n                      :className (:root\n                                  ((make-styles (fn [_]\n                                                  {:root {:justify-content \"space-between\"}}))))}\n           \n           [typography {:variant \"inherit\" :no-wrap true}\n            [grid {:container true\n                   :style {:display \"block\"\n                           :text-overflow \"ellipsis\"\n                           :overflow \"hidden\"}}\n             (when (:icon item)\n               [list-item-icon\n                (r/as-element (:icon item))])\n             (:label item)]]\n           (when (:actions item)\n             (doall\n              (for [action (:actions item)]\n                [(if (and (:icon action) (not (:label action))) icon-button button)\n                 (merge {:on-click (:on-click action)\n                         :key (gen-uuid)\n                         :size \"small\"}\n                        (when (:color action)\n                          {:color (:color action)})\n                        (when (:label action)\n                          {:variant \"text\"})\n                        (when (and (:label action) (:icon action))\n                          {:start-icon (r/as-element (:icon action))}))\n                 (if (and (:icon action) (not (:label action)))\n                   (r/as-element (:icon action))\n                   (:label action))])))])))]))\n\n(defn context-menu\n  \"create a material ui context menu which is a menu that appears on the right click. This function takes the following arguments\n\n   - **config**: is a hash map of the navigation component. The hashmap takes includes several keys \n      - **:id**: is an optional keyword/string/number that uniquely identifies the item.\n      - **:ref**: is an optional function that takes one argument which is the id of the element. This is useful in case you want to get the id of the item without having to provide one.\n      - **:width**: is an optional value to identify the width of the menu\n      - **:max-height**: is an optional value identifying the max height allowed for the menu\n   - **menu-items**: Array of hashmaps identifying each of the menu items that are available such that each item has the following keys:\n     - **:divider?**: an optional parameter indicating that this item is only a divider and therefore all other keys will be ignored.\n     - **:on-click**: required function to be called when the item is clicked. It is not required if \n     - **:disabled?**: an optional boolean indicating whether the item can be clicked or not\n     - **:icon**: an optional icon to appear in the item before the label\n     - **:label**: a required label that should be given as the text. Note that if the width of this label is bigger then allowed width then it will automatically be truncated\n     - **:actions**: an optional array of hashmaps describing potential actions to be done on the item. Each hashmap can have the following keywords.\n         - **:color**: an optional string indicating the color to be set for the action. Potential options are primary | secondary | default\n         - **:icon**: an optional component icon to be drawn. If this is given with a label it will be before the label\n         - **:label**: an optional string indicating the text of the button\n   - **content**: is the react component that will be drawn where the if the right menu is clicked our context menu will appear\"\n  ([menu-items content]\n   [context-menu {:id (gen-uuid)} menu-items content])\n  ([{:keys [id width max-height ref] :as config} menu-items content]\n   (let [uuid (if id id (gen-uuid))]\n     (rendering-id uuid)\n     (fn [{:keys [id width max-height ref] :as config} menu-items content]\n       (when (fn? ref)\n         (ref uuid))\n       [:div {:on-context-menu (fn [evt]\n                                 (.preventDefault evt)\n                                 (set-value id {:open? true\n                                                :position {:top (- (.-clientY evt) 4)\n                                                           :left (- (.-clientX evt) 2)}}))\n              :style {:cursor \"context-menu\"}}\n        (r/as-element content)\n        [context-menu-helper (assoc config :id uuid) menu-items]]))))\n"]}