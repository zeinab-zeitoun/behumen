{"version":3,"sources":["behumen/ajax.cljs"],"mappings":"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","names":["p__66341","map__66342","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","behumen.ajax/local-uri?","uri","cljs.core/not","cljs.core/re-find","behumen.ajax/default-headers","request","p1__66346#","cljs.core.update","cljs.core.merge","js/csrfToken","behumen.ajax/as-transit","opts","cognitect.transit.reader","luminus-transit.time/time-deserialization-handlers","cognitect.transit.writer","luminus-transit.time/time-serialization-handlers","behumen.ajax/load-interceptors!","cljs.core.swap_BANG_","ajax.core/default-interceptors","cljs.core/conj","G__66349","ajax.core/to-interceptor","rams-ui.ajax/set-config","behumen.common/+success+","behumen.common/+error+","behumen.common/+warning+","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","behumen.ajax/ajax","p__66354","map__66355","seq66352","self__4724__auto__","cljs.core/seq","db","url","event","method","params","on-success","on-error","hide-loader?","allow-repeat?","finally","on-warning","user","p1__66350#","rams_ui.ajax.make_call","cljs.core.assoc","rams_ui.components.alert.show_alert","result","clojure.string.join","cljs.core.drop_last","cljs.core.reduce","cljs.core/str","p1__66351#","cljs.core.map","iter__4529__auto__","s__66378","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__66380","cljs.core/chunk-buffer","i__66379","vec__66381","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__66377","cljs.core/chunk-rest","vec__66384","cljs.core/first","cljs.core/cons","cljs.core/rest","_","issue","cljs.core/chunk-first"],"sourcesContent":["(ns behumen.ajax\n  (:require\n    [luminus-transit.time :as time]\n    [cognitect.transit :as transit]\n    [behumen.common :as common]\n    [ajax.core :as cajax]\n    [rams-ui.components.alert :refer [show-alert hide-alert]]\n    [rams-ui.ajax :refer [make-call set-config]]\n    [clojure.string :as cstr]\n    [re-frame.core :as rf :refer [dispatch reg-event-db subscribe]]))\n\n(defn local-uri? [{:keys [uri]}]\n  (not (re-find #\"^\\w+?://\" uri)))\n\n(defn default-headers [request]\n  (if (local-uri? request)\n    (-> request\n        (update :headers #(merge {\"x-csrf-token\" js/csrfToken} %)))\n    request))\n\n;; injects transit serialization config into request options\n(defn as-transit [opts]\n  (merge {:raw             false\n          :format          :transit\n          :response-format :transit\n          :reader          (transit/reader :json time/time-deserialization-handlers)\n          :writer          (transit/writer :json time/time-serialization-handlers)}\n         opts))\n\n(defn load-interceptors! []\n  (swap! cajax/default-interceptors\n         conj\n         (cajax/to-interceptor {:name \"default headers\"\n                               :request default-headers})))\n\n\n(set-config :success common/+success+)\n(set-config :error common/+error+)\n(set-config :warning common/+warning+)\n\n(defn ajax [& {:keys [db url event method params\n                      on-success on-error hide-loader?\n                      allow-repeat? finally\n                      on-warning]\n               :or {method :get allow-repeat? false\n                    no-loader? true}}]\n  (let [user (:user db)]\n    (make-call :url url :call-key event :method method\n                    :params (if (:token user)\n                                (assoc params :jstoken (:token user))\n                                params)\n                    :show-loader? (not hide-loader?)\n                    :on-success-fn on-success\n                    :on-error-fn on-error\n                    :on-warning-fn on-warning\n                    :on-finally-fn finally\n                    :handle-message-fn #(show-alert\n                                         {:type (:status %) :show-close? true}\n                                         (:message %))\n                    :required-message-fn (fn [result]\n                                           (show-alert\n                                            {:type (:status result) :show-close? true}\n                                            (str (clojure.string/join\n                                                  \"\" (drop-last\n                                                      (drop-last\n                                                       (reduce str\n                                                               (map\n                                                                #(.replace\n                                                                  % \" must be present\" \", \")\n                                                                (for [[_ issue] (:issues result)]\n                                                                  (first issue)))))))\n                                                 \" field(s) must be present\")))\n                    :no-repeat-response-fn (when allow-repeat?\n                                             (fn []\n                                               (show-alert\n                                                {:type \"warning\" :show-close? true}\n                                                \"Already processing this request, give us a moment\"))))\n  db))\n"]}