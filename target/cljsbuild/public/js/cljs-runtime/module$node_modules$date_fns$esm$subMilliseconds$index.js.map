{
"version":3,
"file":"module$node_modules$date_fns$esm$subMilliseconds$index.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,uDAAA,CAA2E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAcnHC,QAASA,uBAAsB,CAACC,GAAD,CAAM,CAAE,MAAOA,IAAA,EAAOA,GAAAC,WAAP,CAAwBD,GAAxB,CAA8B,CAAE,UAAWA,GAAb,CAAvC,CAXrCE,MAAAC,eAAA,CAAsBL,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CM,MAAO,CAAA,CADoC,CAA7C,CAGAN,QAAA,CAAQ,SAAR,CAAA,CAgCAO,QAAwB,CAACC,SAAD,CAAYC,WAAZ,CAAyB,CAC/C,CAAC,CAAA,CAAGC,OAAA,CAAQ,SAAR,CAAJ,EAAwB,CAAxB,CAA2BC,SAA3B,CACA,KAAIC,OAAS,CAAC,CAAA,CAAGC,MAAA,CAAO,SAAP,CAAJ,EAAuBJ,WAAvB,CACb,OAAO,CAAC,CAAA,CAAGK,OAAA,CAAQ,SAAR,CAAJ,EAAwBN,SAAxB,CAAmC,CAACI,MAApC,CAHwC,CA9BjD,KAAIC,OAASZ,sBAAA,CAAuBH,OAAA,CAAQ,uDAAR,CAAvB,CAAb;AAEIgB,QAAUb,sBAAA,CAAuBH,OAAA,CAAQ,wDAAR,CAAvB,CAFd,CAIIY,QAAUT,sBAAA,CAAuBH,OAAA,CAAQ,0DAAR,CAAvB,CAZqG;",
"sources":["node_modules/date-fns/esm/subMilliseconds/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$date_fns$esm$subMilliseconds$index\"] = function(global,require,module,exports) {\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = subMilliseconds;\n\nvar _index = _interopRequireDefault(require(\"../_lib/toInteger/index.js\"));\n\nvar _index2 = _interopRequireDefault(require(\"../addMilliseconds/index.js\"));\n\nvar _index3 = _interopRequireDefault(require(\"../_lib/requiredArgs/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * @name subMilliseconds\n * @category Millisecond Helpers\n * @summary Subtract the specified number of milliseconds from the given date.\n *\n * @description\n * Subtract the specified number of milliseconds from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:\n * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:29.250\n */\nfunction subMilliseconds(dirtyDate, dirtyAmount) {\n  (0, _index3[\"default\"])(2, arguments);\n  var amount = (0, _index[\"default\"])(dirtyAmount);\n  return (0, _index2[\"default\"])(dirtyDate, -amount);\n}\n};"],
"names":["shadow$provide","global","require","module","exports","_interopRequireDefault","obj","__esModule","Object","defineProperty","value","subMilliseconds","dirtyDate","dirtyAmount","_index3","arguments","amount","_index","_index2"]
}
